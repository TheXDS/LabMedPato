<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCART</name>
    </assembly>
    <members>
        <member name="T:MCART.Controls.BarStepper">
            <summary>
            Este control permite reportar visualmente el progreso de una tarea en 
            una barra de estado; opcionalmente, mostrando además un botón para 
            cancelar dicha tarea.
            </summary>
            <remarks>
            Este control es compatible con la interfaz <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/>.
            </remarks>
            <example>
            Vea la página de ayuda de <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> para ver ejemplos
            de cómo utilizar este control.
            </example>
        </member>
        <member name="F:MCART.Controls.BarStepper.StatusForReadyProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.BarStepper.StatusForReady"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.BarStepper.ButtonBrushProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BarStepper.ButtonBrush"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.BarStepper.ButtonBrush">
            <summary>
            Obtiene o establece El <see cref="T:System.Windows.Media.Brush"/> a utilizar para dibujar 
            el botón de cancelar de este control.
            </summary>
        </member>
        <member name="P:MCART.Controls.BarStepper.StatusForReady">
            <summary>
            Determina si al finalizar una tarea, los controles se ocultarán o 
            si serán colapsados.
            </summary>
            <returns>
            El valor de <seealso cref="T:System.Windows.Visibility"/> aplicado a
            los controles al finalizar una tarea.
            </returns>
        </member>
        <member name="M:MCART.Controls.BarStepper.OnBegin(System.Boolean)">
            <summary>
            Modifica el control para mostrar el progreso de una tarea.
            </summary>
            <param name="stoppable">
            Indica si la tarea puede ser detenida.
            </param>
        </member>
        <member name="M:MCART.Controls.BarStepper.OnBusy(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Modifica el control para mostrar el progreso actual.
            </summary>
            <param name="e">Progreso actual de la tarea.</param>
        </member>
        <member name="M:MCART.Controls.BarStepper.OnReady(System.String)">
            <summary>
            Modifica el estado del control, cuando no se desea mostrar el
            progreso de una tarea.
            </summary>
            <param name="msg">Mensaje del control.</param>
        </member>
        <member name="M:MCART.Controls.BarStepper.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Controls.BarStepper"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.BusyIndicator">
            <summary>
            Control simple que indica al usuario que la aplicación está ocupada.
            </summary>
        </member>
        <member name="F:MCART.Controls.BusyIndicator.ThicknessProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BusyIndicator.Thickness"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.BusyIndicator.RadiusProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BusyIndicator.Radius"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.BusyIndicator.FillProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BusyIndicator.Fill"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.BusyIndicator.Fill2Property">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BusyIndicator.Fill2"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.BusyIndicator.StartingProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.BusyIndicator.Starting"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.BusyIndicator.Fill">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> a aplicar al control.
            </summary>
        </member>
        <member name="P:MCART.Controls.BusyIndicator.Fill2">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> a aplicar al estado
            secundario de el control.
            </summary>
        </member>
        <member name="P:MCART.Controls.BusyIndicator.Thickness">
            <summary>
            Obtiene o establece el grosor de los elementos de este control.
            </summary>
        </member>
        <member name="P:MCART.Controls.BusyIndicator.Radius">
            <summary>
            Obtiene o establece el radio de este control.
            </summary>
        </member>
        <member name="P:MCART.Controls.BusyIndicator.Starting">
            <summary>
            Obtiene o establece un valor que indica si el control se dibujará
            en su estado secundario.
            </summary>
        </member>
        <member name="M:MCART.Controls.BusyIndicator.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Controls.BusyIndicator"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.Slice">
            <summary>
            Representa una sección de un <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.label">
            <summary>
            Etiqueta de este <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.shape">
            <summary>
            Figura que representa a este valor al ser dibujado.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.NameProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.Slice.Name"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.SliceColorProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.Slice.SliceColor"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.ValueProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.Slice.Value"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.SliceBrushProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.Slice.SliceBrush"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.Slice.SliceBrush">
            <summary>
            Obtiene un <see cref="T:System.Windows.Media.Brush"/> que puede
            utilizarse para colorear este <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.Slice.Name">
            <summary>
            Obtiene o establece el nombre de este <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.Slice.SliceColor">
            <summary>
            Obtiene o establece <see cref="T:MCART.Types.Color"/> a utilizar para dibujar
            este <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.Slice.Value">
            <summary>
            Obtiene o establece el valor de este <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.Slice.drawingParent">
            <summary>
            Objeto sobre el cual este <see cref="T:MCART.Controls.Slice"/> se dibuja.
            </summary>
        </member>
        <member name="M:MCART.Controls.Slice.FromValues(System.Double[])">
            <summary>
            Convierte un arreglo de datos en una colección de
            <see cref="T:MCART.Controls.Slice"/>.
            </summary>
            <param name="values">
            Valores a incluir en el listado de <see cref="T:MCART.Controls.Slice"/>.
            </param>
            <returns>
            Una lista de <see cref="T:MCART.Controls.Slice"/> para utilizar como orígen de
            datos para un <see cref="T:MCART.Controls.ISliceGraph"/>.
            </returns>
        </member>
        <member name="F:MCART.Controls.Slice.SubSlices">
            <summary>
            Obtiene un listado de <see cref="T:MCART.Controls.Slice"/> que pertenecen a este
            <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.Slice.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.Slice.Finalize">
            <summary>
            Realiza algunas tareas de limpieza antes de destruir a este objeto.
            </summary>
        </member>
        <member name="T:MCART.Controls.LightGraph">
            <summary>
             Control/Widget de gráficos ligero.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.FrozenProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.Frozen"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.GraphTitleProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.GraphTitle"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.GraphStrokeProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.GraphStroke"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.Graph2StrokeProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.Graph2Stroke"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.GraphThicknessProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.GraphThickness"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.GraphDrawModeProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.GraphDrawMode"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.XLabelProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.XLabel"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.xPeriodProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.XPeriod"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsProperty">
            <summary>
            Identifica la propiedad de dependencia 
            <see cref="P:MCART.Controls.LightGraph.SpotLabels"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotPeriodProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.SpotPeriod"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.YLabelProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.YLabel"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.YMinProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.YMin"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.YMaxProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.YMax"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.Y2LabelProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.Y2Label"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.Y2MinProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.Y2Min"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.Y2MaxProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.LightGraph.Y2Max"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.Frozen">
            <summary>
            Congela o descongela la actualización del control.
            </summary>
            <remarks>
            Mientras el control esté congelado, los redibujos no funcionarán,
            lo que puede causar que el gráfico se visualice incorrectamente.
            </remarks>
        </member>
        <member name="P:MCART.Controls.LightGraph.GraphPadding">
            <summary>
            Ajusta el espacio a la derecha del gráfico, en unidades de puntos.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.XLabels">
            <summary>
            Obtiene o establece las etiquetas del eje X.
            </summary>
            <remarks>
            Esta no es una propiedad de dependencia, debido a algunas 
            complicaciones de eventos.
            </remarks>
        </member>
        <member name="P:MCART.Controls.LightGraph.Graph">
            <summary>
            Obtiene o establece los elementos de la gráfica.
            </summary>
            <remarks>
            Esta no es una propiedad de dependencia, debido a algunas
            complicaciones de eventos.
            </remarks>
        </member>
        <member name="P:MCART.Controls.LightGraph.Graph2">
            <summary>
            Obtiene o establece los elementos de la gráfica secundaria.
            </summary>
            <remarks>
            Esta no es una propiedad de dependencia, debido a algunas 
            complicaciones de eventos.
            </remarks>
        </member>
        <member name="P:MCART.Controls.LightGraph.SpotLabels">
            <summary>
            Obtiene o establece el modo de dibujo de las etiquetas dentro del gráfico
            </summary>
            <returns></returns>
        </member>
        <member name="P:MCART.Controls.LightGraph.XPeriod">
            <summary>
            Obtiene o establece el período de la rejilla mayor del eje X.
            </summary>
            <returns>
            La cantidad de pasos de la rejilla necesarios para un paso mayor.
            </returns>
        </member>
        <member name="P:MCART.Controls.LightGraph.XLabel">
            <summary>
            Obtiene o establece el título del eje X del gráfico.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> con el nombre actualmente establecido para
            el eje X del gráfico.
            </returns>
        </member>
        <member name="P:MCART.Controls.LightGraph.GraphTitle">
            <summary>
            Obtiene o establece el título principal del gráfico.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> con el título establecido para el control.
            </returns>
        </member>
        <member name="P:MCART.Controls.LightGraph.SpotPeriod">
            <summary>
            Obtiene o establece la cantidad de pasos para dibujar etiquetas en 
            los puntos del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.YLabel">
            <summary>
            Obtiene o establece el título del eje Y del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.YMin">
            <summary>
            Obtiene o establece el mínimo del eje Y del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.YMax">
            <summary>
            Obtiene o establece el máximo del eje Y del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.GraphStroke">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.Graph2Stroke">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> del gráfico secundario.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.GraphThickness">
            <summary>
            Obtiene o establece el grosor de la línea del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.GraphDrawMode">
            <summary>
            Determina el modo de dibujo del gráfico.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.Y2Label">
            <summary>
            Obtiene o establece el título del eje Y del gráfico secundario.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.Y2Min">
            <summary>
            Obtiene o establece el mínimo del eje Y del gráfico secundario.
            </summary>
        </member>
        <member name="P:MCART.Controls.LightGraph.Y2Max">
            <summary>
            Obtiene o establece el máximo del eje Y del gráfico secundario.
            </summary>
        </member>
        <member name="M:MCART.Controls.LightGraph.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Controls.LightGraph"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.LightGraph.Redraw">
            <summary>
            Obliga al control a volver a dibujarse.
            </summary>
            <remarks>
            Este método omite el valor de la propiedad <see cref="P:MCART.Controls.LightGraph.Frozen"/>.
            </remarks>
        </member>
        <member name="T:MCART.Controls.LightGraph.SpotLabelsDrawMode">
            <summary>
            Determina el modo de dibujo de las etiquetas puntuales de las 
            gráficas.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.None">
            <summary>
            No dibujar etiquetas.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.YValues">
            <summary>
            Dibujar el valor del punto.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.Percent">
            <summary>
            Dibujar el valor porcentual del punto.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.XValues">
            <summary>
            Dibujar una etiqueta del eje X.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.GraphColor">
            <summary>
            Dibujar en el mismo color del gráfico en lugar del color de
            texto.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.SpotLabelsDrawMode.DarkBG">
            <summary>
            Hace que el fondo de las etiquetas sea obscuro.
            </summary>
        </member>
        <member name="T:MCART.Controls.LightGraph.EnumGraphDrawMode">
            <summary>
            Determina el modo de dibujo del gráfico.
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.EnumGraphDrawMode.Histogram">
            <summary>
            Dibujar histograma
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.EnumGraphDrawMode.Filled">
            <summary>
            Rellenar el área del gráfico
            </summary>
        </member>
        <member name="F:MCART.Controls.LightGraph.EnumGraphDrawMode.Bars">
            <summary>
            Dibujar barras
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar">
            <remarks>
            Este control es especialmente útil para controlar un objeto 
            <see cref="T:System.Windows.Data.CollectionView"/> provisto por las conexiones de bases de 
            datos, en efecto, cumpliendo las funciones de un controlador en el
            paradigma Model-View-Controller (MVC).
            </remarks>
            <summary>
            Permite la navegación y búsqueda entre una lista de elementos por medio
            de la GUI.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.btnW">
            <summary>
            Anchura predeterminada de los botones.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.btnH">
            <summary>
            Altura predeterminada de los botones.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.thk1">
            <summary>
            <see cref="T:System.Windows.Thickness"/> predeterminado para algunos controles.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.view">
            <summary>
            Lista a ser controlada de manera opcional.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.flts">
            <summary>
            Lista de filtros de búsqueda.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.ctrls">
            <summary>
            Lista de controles con Binding de datos a controlar.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.HasItemsPropertyKey">
            <summary>
            Clave de propiedad de dependencia <see cref="F:MCART.Controls.NavigationBar.HasItemsProperty"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.HasItemsProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura <see cref="P:MCART.Controls.NavigationBar.HasItems"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.IsEditingPropertyKey">
            <summary>
            Clave de propiedad de dependencia <see cref="F:MCART.Controls.NavigationBar.IsEditingProperty"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.IsEditingProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura <see cref="P:MCART.Controls.NavigationBar.IsEditing"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.ButtonWidthProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.ButtonWidth"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.ModeProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.Mode"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.HasSearchProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.HasSearch"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.SearchProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.Search"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.SearchWatermarkProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.SearchWatermark"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.MaxProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.Max"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.PositionProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.NavigationBar.Position"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.NavigationBar.HasItems">
            <summary>
            Obtiene un valor que indica si la lista de la barra de navegación está vacía
            </summary>
        </member>
        <member name="P:MCART.Controls.NavigationBar.IsEditing">
            <summary>
            Obtiene un valor que indica si actualmente el control se encuentra en modo de edición
            </summary>        
        </member>
        <member name="P:MCART.Controls.NavigationBar.ButtonWidth">
            <summary>
            Obtiene o establece el ancho de los botones de edición de este control
            </summary>        
        </member>
        <member name="P:MCART.Controls.NavigationBar.Mode">
            <summary>
            Obtiene o establece los modos de edición disponibles para este control
            </summary>        
        </member>
        <member name="P:MCART.Controls.NavigationBar.HasSearch">
            <summary>
            Obtiene o establece si se mostrará el cuadro de búsqueda
            </summary>
            <returns><c>True</c> si el cuadro de búsqueda es visible; de lo contrario, <c>False</c></returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.Search">
            <summary>
            Obtiene o establece el valor actual del cuadro de búsqueda.
            </summary>        
        </member>
        <member name="P:MCART.Controls.NavigationBar.SearchWatermark">
            <summary>
            Obtiene o establece la marca de agua a mostrar en el cuadro de búsqueda
            </summary>        
        </member>
        <member name="P:MCART.Controls.NavigationBar.Max">
            <summary>
            Obtiene o establece el valor máximo de la barra de navegación
            </summary>
            <returns>El valor máximo de elementos a los que este nevegador debe permitir acceder</returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.Position">
            <summary>
            Obtiene o establece el valor actual de la barra de navegación
            </summary>
            <returns>El elemento actual al que el usuario accedió por medio de la barra</returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.Filters">
            <summary>
            Obtiene el listado de campos para realizar búsquedas
            </summary>
        </member>
        <member name="P:MCART.Controls.NavigationBar.HasViewAttached">
            <summary>
            Determina si este control administra un <see cref="T:System.Windows.Data.CollectionView"/>
            </summary>
            <returns><c>True</c> si este control actualmente administra un <see cref="T:System.Windows.Data.CollectionView"/>; de lo contrario, <c>False</c>.</returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.AttachedView">
            <summary>
            Devuelve el <see cref="T:System.Windows.Data.CollectionView"/> actualmente administrado por este control
            </summary>
            <returns>El <see cref="T:System.Windows.Data.CollectionView"/> actualmente administrado por este control en caso de haberse establecido; de lo contrario, <c>Nothing</c></returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.HasAttachedControls">
            <summary>
            Determina si este control administra el estado de otros controles
            </summary>
            <returns><c>True</c> si este control administra el estado de otros controles; de lo contario, <c>False</c>.</returns>
        </member>
        <member name="P:MCART.Controls.NavigationBar.AttachedControls">
            <summary>
            Devuelve un <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> de los controles administrados por este control
            </summary>
            <returns>Un <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> de los controles administrados por este control</returns>
        </member>
        <member name="E:MCART.Controls.NavigationBar.AttachedToView">
            <summary>
            Se produce cuando se ha conectado a un <see cref="T:System.Windows.Data.CollectionView"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.AttachedToViewEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.AttachedToView"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovingToFirst">
            <summary>
            Se produce cuando se ha solicitado la navegación al primer elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovingToFirstEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovingToFirst"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovingToPrev">
            <summary>
            Se produce cuando se ha solicitado la navegación al elemento anterior.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovingToPrevEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovingToPrev"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovingToNext">
            <summary>
            Se produce cuando se ha solicitado la navegación al elemento siguiente.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovingToNextEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovingToNext"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovingToLast">
            <summary>
            Se produce cuando se ha solicitado la navegación al último elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovingToLastEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovingToLast"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovingToPosition">
            <summary>
            Se produce cuando se ha solicitado la navegación a un elemento en particular.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovingToPositionEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovingToPosition"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovedToFirst">
            <summary>
            Se produce cuando se ha solicitado la navegación al primer elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovedToFirstEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovedToFirst"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovedToPrev">
            <summary>
            Se produce cuando se ha solicitado la navegación al elemento anterior.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovedToPrevEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovedToPrev"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovedToNext">
            <summary>
            Se produce cuando se ha solicitado la navegación al elemento siguiente.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovedToNextEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovedToNext"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovedToLast">
            <summary>
            Se produce cuando se ha solicitado la navegación al último elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovedToLastEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovedToLast"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.MovedToPosition">
            <summary>
            Se produce cuando se ha solicitado la navegación a un elemento en particular.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.MovedToPositionEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.MovedToPosition"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.SearchEntered">
            <summary>
            Se produce cuando se ha introducido texto en el cuadro de búsqueda.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.SearchEnteredEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.SearchEntered"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.SearchClosed">
            <summary>
            Se produce cuando se ha cerrado la búsqueda.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.SearchClosedEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.SearchClosed"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.CreatingNew">
            <summary>
            Se produce cuando se ha solicitado la creación de un elemento nuevo.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.CreatingNewEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.CreatingNew"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.Editing">
            <summary>
            Se produce cuando se ha solicitado la edición del elemento actual.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.EditingEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.Editing"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.Deleting">
            <summary>
            Se produce cuando se ha solicitado la eliminación del elemento actual.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.DeletingEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.Deleting"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.Saving">
            <summary>
            Se produce cuando se ha presionado el botón Guardar al editar o crear un nuevo elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.SavingEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.Saving"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.Cancelling">
            <summary>
            Se produce cuando se ha presionado el botón Cancelar al editar o crear un nuevo elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.CancellingEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.Cancelling"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.NewCreated">
            <summary>
            Se produce cuando se ha creado un elemento nuevo.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.NewCreatedEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.NewCreated"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.EditEntered">
            <summary>
            Se produce cuando se ha entrado en modo de edición.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.EditEnteredEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.EditEntered"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.ItemDeleted">
            <summary>
            Se produce cuando se ha eliminado un elemento.
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.ItemDeletedEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.ItemDeleted"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.ItemSaved">
            <summary>
            Se produce cuando se ha guardado un elemento
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.ItemSavedEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.ItemSaved"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.NavigationBar.Cancelled">
            <summary>
            Se produce cuando se ha cancelado la creación/edición de un elemento
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.CancelledEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.NavigationBar.Cancelled"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="M:MCART.Controls.NavigationBar.AttachView(System.Windows.Data.BindingListCollectionView,System.String[])">
            <summary>
            Conecta un <see cref="T:System.Windows.Data.BindingListCollectionView"/> para ser
            controlado automáticamente por este control.
            </summary>
            <param name="cv">
            <see cref="T:System.Windows.Data.BindingListCollectionView"/> a controlar.
            </param>
            <param name="searchFields">
            Si <see cref="P:MCART.Controls.NavigationBar.HasSearch"/> es <c>true</c>, establece los campos
            necesarios para realizar búsquedas.
            </param>
        </member>
        <member name="M:MCART.Controls.NavigationBar.DetachView">
            <summary>
            Libera la conexión de <see cref="T:System.Windows.Data.BindingListCollectionView"/>
            </summary>
        </member>
        <member name="M:MCART.Controls.NavigationBar.AttachControls(System.Windows.UIElement[])">
            <summary>
            Agrega una colección de controles para que su estado sea
            administrado automáticamente por este control.
            </summary>
            <param name="C">Colección de controles a administrar.</param>
        </member>
        <member name="M:MCART.Controls.NavigationBar.DetachControls">
            <summary>
            Libera a los controles administrados por este control
            </summary>
        </member>
        <member name="M:MCART.Controls.NavigationBar.#ctor">
            <summary>
            Inicializa una nueva instancia de este control
            </summary>
        </member>
        <member name="T:MCART.Controls.NavigationBar.EditMode">
            <summary>
            Determina las capacidades de edición disponibles en este control.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.ReadOnly">
            <summary>
            Control de sólo lectura. El usuario podrá navegar, pero no podrá editar.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.Newable">
            <summary>
            Otorga al usuario la facultad de crear nuevos elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.Editable">
            <summary>
            Otorga al usuario la facultad de editar elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.NewEdit">
            <summary>
            Otorga al usuario la facultad de crear y editar elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.Deletable">
            <summary>
            Otorga al usuario la facultad de eliminar elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.NewDelete">
            <summary>
            Otorga al usuario la facultad de crear y eliminar elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.EditDelete">
            <summary>
            Otorga al usuario la facultad de editar y eliminar elementos.
            </summary>
        </member>
        <member name="F:MCART.Controls.NavigationBar.EditMode.All">
            <summary>
            Otorga al usuario todas las facultades de edición
            </summary>
        </member>
        <member name="T:MCART.Controls.ProgressRing">
            <summary>
            Permite representar un valor porcentual en un anillo de progreso.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.AngleProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Angle"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.SweepProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Sweep"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.TextFormatProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.TextFormat"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.ThicknessProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Thickness"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.RadiusProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Radius"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.ValueProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Value"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.MinProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Minimum"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.MaxProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Maximum"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.RingStrokeProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.RingStroke"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.FillProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.ProgressRing.Fill"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.IsIndeterminateProperty">
            <summary>
            Identifica a la propiedad de dependencia 
            <see cref="P:MCART.Controls.ProgressRing.IsIndeterminate"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Angle">
            <summary>
            Obtiene o establece el ángulo desde el que se empezará a dibujar el
            relleno de este <see cref="T:MCART.Controls.ProgressRing"/>. 
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Sweep">
            <summary>
            Obtiene o establece la dirección en la cual se rellenará este
            <see cref="T:MCART.Controls.ProgressRing"/>. 
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.RingStroke">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> a utilizar para dibujar
            el fondo del anillo de este <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Fill">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Media.Brush"/> a utilizar para dibujar
            el relleno del anillo de este <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.TextFormat">
            <summary>
            Obtiene o establece el formato de texto a aplicar al centro de este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Thickness">
            <summary>
            Obtiene o establece el grosor del anillo de este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Radius">
            <summary>
            Obtiene o establece el radio del anillo de este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Value">
            <summary>
            Obtiene o establece el valor a representar en este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Minimum">
            <summary>
            Obtiene o establece el valor mínimo de este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.Maximum">
            <summary>
            Obtiene o establece el valor máximo de este
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ProgressRing.IsIndeterminate">
            <summary>
            Obtiene o establece un valor que indica si se mostrará un estado
            indeterminado en este <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.ProgressRing.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.ProgressRing.SweepDirection">
            <summary>
            Determina la dirección en la que este <see cref="T:MCART.Controls.ProgressRing"/>
            será rellenado.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.SweepDirection.Clockwise">
            <summary>
            El <see cref="T:MCART.Controls.ProgressRing"/> se rellenará en el sentido de las
            agujas del reloj.
            </summary>
        </member>
        <member name="F:MCART.Controls.ProgressRing.SweepDirection.CounterClockwise">
            <summary>
            El <see cref="T:MCART.Controls.ProgressRing"/> se rellenará en el sentido
            contrario a las agujas del reloj. 
            </summary>
        </member>
        <member name="T:MCART.Controls.RingGraph">
            <summary>
            RingGraph
            </summary>
        </member>
        <member name="M:MCART.Controls.RingGraph.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Controls.RingGraph"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.RingGraph.RingThicknessProperty">
                    Internamente, las propiedades de FontSize de txtTotal y el Margin
                    del ViewBox que lo contiene, causan que la propiedad StrokeThickness
                    de los elementos a dibujar representen valores porcentuales.
                    <summary>
                    Identifica a la propiedad de dependencia
                    <see cref="P:MCART.Controls.RingGraph.RingThickness"/>.
                    </summary>
                    *
        </member>
        <member name="F:MCART.Controls.RingGraph.SubLevelsShownProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.RingGraph.SubLevelsShown"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.RingGraph.TitleProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.RingGraph.Title"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.RingGraph.TitleFontSizeProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.RingGraph.TitleFontSize"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.RingGraph.TotalProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.RingGraph.Total"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.RingGraph.TotalVisibleProperty">
            <summary>
            Identifica a la propiedad de dependencia <see cref="P:MCART.Controls.RingGraph.TotalVisible"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.RingThickness">
            <summary>
            Obtiene o establece el porcentaje de espacio ocupado por los datos
            desde el radio hasta el centro del gráfico, o hasta el espacio
            reservado para la etiqueta de total.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.SubLevelsShown">
            <summary>
            Obtiene o establece la cantidad de sub-niveles a mostrar en este
            <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.Title">
            <summary>
            Obtiene o establece el título a mostrar de este
            <see cref="T:MCART.Controls.IGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.TitleFontSize">
            <summary>
            Obtiene o establece el tamaño de fuente a aplicar al título de este
            <see cref="T:MCART.Controls.IGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.Total">
            <summary>
            Obtiene el total general de los datos de este
            <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.RingGraph.TotalVisible">
            <summary>
            Obtiene o establece un valor que determina si se mostrarán los
            totales de los puntos y el total general de los datos.
            </summary>
        </member>
        <member name="M:MCART.Controls.RingGraph.Redraw">
            <summary>
            Vuelve a dibujar todo el control.
            </summary>
        </member>
        <member name="M:MCART.Controls.RingGraph.DrawMyChildren(MCART.Controls.Slice)">
            <summary>
            Vuelve a dibujar únicamente a los hijos del <see cref="T:MCART.Controls.Slice"/>.
            </summary>
            <param name="r">
            <see cref="T:MCART.Controls.Slice"/> que ha realizado la solicitud.
            </param>
        </member>
        <member name="P:MCART.Controls.RingGraph.Slices">
            <summary>
            Obtiene un listado de los <see cref="T:MCART.Controls.Slice"/> que conforman el
            set de datos de este <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
            <remarks>
            Esta no puede ser una propiedad de dependencia debido a que la
            observación de la lista de <see cref="T:MCART.Controls.Slice"/> se implementa
            mediante eventos.
            </remarks>
        </member>
        <member name="M:MCART.Controls.RingGraph.DrawMe(MCART.Controls.Slice)">
            <summary>
            Vuelve a dibujar todo el control.
            </summary>
            <param name="r">
            <see cref="T:MCART.Controls.Slice"/> que ha realizado la solicitud.
            </param>
        </member>
        <member name="M:MCART.Controls.RingGraph.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MCART.Controls.SearchBox">
            <summary>
            Cuadro de texto simple con marca de agua optimizado para búsquedas.
            </summary>
        </member>
        <member name="E:MCART.Controls.SearchBox.AttachedToView">
            <summary>
            Se produce cuando se ha conectado a un <see cref="T:System.Windows.Data.CollectionView"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.SearchBox.AttachedToViewEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.SearchBox.AttachedToView"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.SearchBox.SearchEntered">
            <summary>
            Se produce cuando se ha introducido texto en el cuadro de búsqueda.
            </summary>
        </member>
        <member name="T:MCART.Controls.SearchBox.SearchEnteredEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.SearchBox.SearchEntered"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="E:MCART.Controls.SearchBox.SearchClosed">
            <summary>
            Se produce cuando se ha cerrado la búsqueda.
            </summary>
        </member>
        <member name="T:MCART.Controls.SearchBox.SearchClosedEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Controls.SearchBox.SearchClosed"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">argumentos del evento.</param>
        </member>
        <member name="F:MCART.Controls.SearchBox.HasSearchProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.SearchBox.HasSearch"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.SearchBox.SearchProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.SearchBox.Search"/>.
            </summary>
        </member>
        <member name="F:MCART.Controls.SearchBox.SearchWatermarkProperty">
            <summary>
            Identifica la propiedad de dependencia <see cref="P:MCART.Controls.SearchBox.SearchWatermark"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.SearchBox.HasSearch">
            <summary>
            Obtiene o establece si se mostrará el cuadro de búsqueda
            </summary>
            <returns><c>True</c> si el cuadro de búsqueda es visible; de lo contrario, <c>False</c></returns>
        </member>
        <member name="P:MCART.Controls.SearchBox.Search">
            <summary>
            Obtiene o establece el valor actual del cuadro de búsqueda.
            </summary>        
        </member>
        <member name="P:MCART.Controls.SearchBox.SearchWatermark">
            <summary>
            Obtiene o establece la marca de agua a mostrar en el cuadro de búsqueda
            </summary>        
        </member>
        <member name="M:MCART.Controls.SearchBox.#cctor">
            <summary>
            Inicializa la clase <see cref="T:MCART.Controls.SearchBox"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.SearchBox.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Controls.SearchBox"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.SearchBox.AttachView(System.Windows.Data.BindingListCollectionView,System.String[])">
            <summary>
            Conecta un <see cref="T:System.Windows.Data.BindingListCollectionView"/> para ser
            controlado automáticamente por este control.
            </summary>
            <param name="cv">
            <see cref="T:System.Windows.Data.BindingListCollectionView"/> a controlar.
            </param>
            <param name="searchFields">
            Si <see cref="P:MCART.Controls.SearchBox.HasSearch"/> es <c>true</c>, establece los campos
            necesarios para realizar búsquedas.
            </param>
        </member>
        <member name="M:MCART.Controls.SearchBox.DetachView">
            <summary>
            Libera la conexión de <see cref="T:System.Windows.Data.BindingListCollectionView"/>
            </summary>
        </member>
        <member name="T:MCART.Controls.IGraph">
            <summary>
            Define una serie de métodos y propiedades a implementar por un control
            que permita mostrar gráficos de cualquier tipo.
            </summary>
        </member>
        <member name="P:MCART.Controls.IGraph.Title">
            <summary>
            Obtiene o establece el título de este <see cref="T:MCART.Controls.IGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.IGraph.TitleFontSize">
            <summary>
            Obtiene o establece el tamaño de fuente a aplicar al título.
            </summary>
        </member>
        <member name="M:MCART.Controls.IGraph.Redraw">
            <summary>
            Solicita al control volver a dibujarse en su totalidad.
            </summary>
        </member>
        <member name="T:MCART.Controls.Graph.ISeriesGraph">
            <summary>
            Expone una serie de métodos de redibujado disponibles para un
            control que acepte un <see cref="T:MCART.Controls.Series"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.ISliceGraph">
            <summary>
            Expone una serie de métodos de redibujado disponibles para un
            control que acepte un <see cref="T:MCART.Controls.Slice"/>.
            </summary>
        </member>
        <member name="M:MCART.Controls.ISliceGraph.DrawMe(MCART.Controls.Slice)">
            <summary>
            Dibuja al <see cref="T:MCART.Controls.Slice"/> y a sus hijos.
            </summary>
            <param name="r">
            <see cref="T:MCART.Controls.Slice"/> que ha realizado la solicitud de redibujo.
            </param>
        </member>
        <member name="M:MCART.Controls.ISliceGraph.DrawMyChildren(MCART.Controls.Slice)">
            <summary>
            Dibuja únicamente a los hijos del <see cref="T:MCART.Controls.Slice"/>.
            </summary>
            <param name="r">
            <see cref="T:MCART.Controls.Slice"/> que ha realizado la solicitud de redibujo.
            </param>
        </member>
        <member name="P:MCART.Controls.ISliceGraph.TotalVisible">
            <summary>
            Obtiene o establece un valor que determina si se mostrarán los
            totales de los puntos y el total general de los datos.
            </summary>
        </member>
        <member name="P:MCART.Controls.ISliceGraph.Slices">
            <summary>
            Obtiene un listado de los <see cref="T:MCART.Controls.Slice"/> que conforman el
            set de datos de este <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ISliceGraph.Total">
            <summary>
            Obtiene el total general de los datos de este 
            <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="P:MCART.Controls.ISliceGraph.SubLevelsShown">
            <summary>
            Obtiene o establece la cantidad de sub-niveles a mostrar en este
            <see cref="T:MCART.Controls.ISliceGraph"/>.
            </summary>
        </member>
        <member name="T:MCART.Controls.Misc">
            <summary>
            Funciones misceláneas para controles/widgets.
            </summary>
        </member>
        <member name="M:MCART.Controls.Misc.GetTotal(System.Collections.Generic.IEnumerable{MCART.Controls.Slice})">
            <summary>
            Obtiene la suma de todos los valores de una colección de
            <see cref="T:MCART.Controls.Slice"/>.
            </summary>
            <param name="c">
            Colección de <see cref="T:MCART.Controls.Slice"/> para la cual obtener la suma.
            </param>
            <returns>
            Un <see cref="T:System.Double"/> con la suma de los valores de una colección
            de <see cref="T:MCART.Controls.Slice"/>.
            </returns>
        </member>
        <member name="T:MCART.Controls.Series">
            <summary>
            Representa una serie de valores que pueden ser representados en un
            control TODO.
            </summary>
        </member>
        <member name="T:MCART.Forms.PasswordDialog">
            <summary>
            Esta clase contiene una ventana de Windows Presentation Framework que
            permite al usuario validar contraseñas, así como también establecerlas
            y medir el nivel de seguridad de la contraseña escogida.
            </summary>
        </member>
        <member name="M:MCART.Forms.PasswordDialog.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Forms.PasswordDialog"/>.
            </summary>
        </member>
        <member name="M:MCART.Forms.PasswordDialog.GetPassword(System.String,System.String,System.Boolean)">
            <summary>
            Obtiene una contraseña.
            </summary>
            <param name="StoredPw">
            Parámetro opcional. Proporciona una contraseña predeterminada para
            esta ventana.
            </param>
            <param name="DefaultUsr">
            Parámetro opcional. Nombre de usuario a mostrar de manera 
            predeterminada en el cuadro.
            </param>
            <param name="ShowUsrBox">
            Parámetro opcional. Indica si se mostrará o no el cuadro de 
            usuario.
            </param>
            <returns>
            Un <see cref="T:MCART.Security.Password.PwDialogResult"/> con el resultado de esta función.
            </returns>
        </member>
        <member name="M:MCART.Forms.PasswordDialog.ChoosePassword(MCART.Security.Password.PwMode,MCART.Security.Password.PwEvaluator)">
            <summary>
            Permite al usuario escoger una contraseña.
            </summary>
            <param name="Mode">
            Parámetro opcional. Establece las opciones disponibles para esta 
            ventana. De forma predeterminada, únicamente se mostrará un cuadro
            para confirmar la contraseña.
            </param>
            <param name="PwEvaluatorObj">
            Parámetro opcional. Objeto evaluador de contraseñas a utilizar. Si
            se omite, se utilizará un evaluador con un conjunto de reglas 
            predeterminado. Se ignora si <paramref name="Mode"/> no incluye la 
            bandera <see cref="F:MCART.Security.Password.PwMode.Secur"/>.
            </param>
            <returns>
            Un <see cref="T:MCART.Security.Password.PwDialogResult"/> con el resultado de este diálogo.
            </returns>
        </member>
        <member name="T:MCART.Forms.PluginBrowser">
            <summary>
            Diálogo que permite mostrar información acerca de los 
            <see cref="T:MCART.PluginSupport.Plugin"/> cargables por MCART.
            </summary>
            <summary>
            PluginBrowser
            </summary>
        </member>
        <member name="M:MCART.Forms.PluginBrowser.DetailsOf(MCART.PluginSupport.IPlugin)">
            <summary>
            Muestra información acerca de un <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
            <param name="p">
            <see cref="T:MCART.PluginSupport.IPlugin"/> del cual mostrar la información.
            </param>
        </member>
        <member name="M:MCART.Forms.PluginBrowser.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Forms.PluginBrowser"/>.
            </summary>
        </member>
        <member name="M:MCART.Forms.PluginBrowser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MCART.Events.DependencyPropertyChangingEventArgs">
            <summary>
            Contiene información para los eventos basados en
            <see cref="T:MCART.Events.DependencyPropertyChangingEventHandler"/>.
            </summary>
        </member>
        <member name="F:MCART.Events.DependencyPropertyChangingEventArgs.Property">
            <summary>
            Propiedad de dependencia que cambiará su valor.
            </summary>
        </member>
        <member name="F:MCART.Events.DependencyPropertyChangingEventArgs.OldValue">
            <summary>
            Valor original de la propiedad de dependencia.
            </summary>
        </member>
        <member name="F:MCART.Events.DependencyPropertyChangingEventArgs.NewValue">
            <summary>
            Nuevo valor de la propiedad de dependencia.
            </summary>
        </member>
        <member name="M:MCART.Events.DependencyPropertyChangingEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Events.DependencyPropertyChangingEventArgs"/>.
            </summary>
            <param name="property">
            Propiedad de dependencia que cambiará su valor.
            </param>
            <param name="oldValue">
            Valor original de la propiedad de dependencia.
            </param>
            <param name="newValue">
            Nuevo valor de la propiedad de dependencia.
            </param>
        </member>
        <member name="M:MCART.Events.DependencyPropertyChangingEventArgs.op_Implicit(MCART.Events.DependencyPropertyChangingEventArgs)~System.Windows.DependencyPropertyChangedEventArgs">
            <summary>
            Convierte implícitamente este
            <see cref="T:MCART.Events.DependencyPropertyChangingEventArgs"/> en un
            <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/>.
            </summary>
            <param name="x">Objeto a convertir.</param>
        </member>
        <member name="T:MCART.Events.DependencyPropertyChangingEventHandler">
            <summary>
            Delegado que controla un evento cancelable de cambio en el valor de una 
            propiedad de dependencia.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Events.LoggingEventArgs">
            <summary>
            Incluye información de evento para cualquier clase con eventos de
            logging (bitácora).
            </summary>
        </member>
        <member name="F:MCART.Events.LoggingEventArgs.Obj">
            <summary>
            Objeto relacionado a esta entrada de log.
            </summary>
        </member>
        <member name="M:MCART.Events.LoggingEventArgs.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Events.LoggingEventArgs"/>, sin definir un objeto relacionado.
            </summary>
            <param name="x">Mensaje de esta entrada de log.</param>
        </member>
        <member name="M:MCART.Events.LoggingEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Events.LoggingEventArgs"/>, definiendo un objeto relacionado.
            </summary>
            <param name="obj">Objeto relacionado a esta entrada de log.</param>
            <param name="x">Mensaje de esta entrada de log.</param>
        </member>
        <member name="T:MCART.Events.IncommingDataEventArgs">
            <summary>
            Incluye información de evento para cualquier clase con eventos de 
            recepción de datos.
            </summary>
        </member>
        <member name="M:MCART.Events.IncommingDataEventArgs.#ctor(System.Byte[])">
            <summary>
            Inicializa una nueva instancia de este objeto con los datos 
            recibidos.
            </summary>
            <param name="data">
            Colección de <see cref="T:System.Byte"/> con los datos recibidos.
            </param>
        </member>
        <member name="F:MCART.Events.IncommingDataEventArgs.Data">
            <summary>
            Obtiene un arreglo de <see cref="T:System.Byte"/> con los datos recibidos.
            </summary>
        </member>
        <member name="T:MCART.Events.ExceptionEventArgs">
            <summary>
            Incluye información de evento para cualquier clase con eventos de 
            excepción.
            </summary>
        </member>
        <member name="F:MCART.Events.ExceptionEventArgs.Exception">
            <summary>
            Obtiene la excepción generada en el código que invocó este evento.
            </summary>
        </member>
        <member name="M:MCART.Events.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de este objeto con la excepción 
            especificada.
            </summary>
            <param name="ex">
            <see cref="T:System.Exception"/> que se ha producido en el código.
            </param>
        </member>
        <member name="T:MCART.Events.ValueEventArgs`1">
            <summary>
            Incluye informaicón de evento para cualquier clase con eventos que 
            incluyan tipos de valor.
            </summary>
            <typeparam name="T">
            Tipo del valor almacenado por esta instancia.
            </typeparam>
        </member>
        <member name="F:MCART.Events.ValueEventArgs`1.Value">
            <summary>
            Devuelve el valor asociado a este evento.
            </summary>
            <returns>
            Un valor de tipo <typeparamref name="T"/> con el valor asociado a
            este evento.
            </returns>
        </member>
        <member name="M:MCART.Events.ValueEventArgs`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de este objeto con el valor provisto.
            </summary>
            <param name="x">Valor asociado al evento generado.</param>
        </member>
        <member name="T:MCART.Events.ValueChangingEventArgs`1">
            <summary>
            Incluye informaicón para cualquier evento que incluya tipos de valor y
            puedan ser cancelados.
            </summary>
            <typeparam name="T">
            Tipo del valor almacenado por esta instancia.
            </typeparam>
        </member>
        <member name="F:MCART.Events.ValueChangingEventArgs`1.OldValue">
            <summary>
            Devuelve el valor original asociado a este evento.
            </summary>
            <returns>
            Un valor de tipo <typeparamref name="T"/> con el valor asociado al
            evento.
            </returns>
        </member>
        <member name="F:MCART.Events.ValueChangingEventArgs`1.NewValue">
            <summary>
            Devuelve el nuevo valor asociado a este evento.
            </summary>
            <returns>
            Un valor de tipo <typeparamref name="T"/> con el valor asociado al
            evento.
            </returns>
        </member>
        <member name="M:MCART.Events.ValueChangingEventArgs`1.#ctor(`0,`0)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Events.ValueChangingEventArgs`1"/> con el valor provisto.
            </summary>
            <param name="oldValue">
            Valor original asociado al evento generado.
            </param>
            <param name="newValue">
            Nuevo valor asociado al evento generado.
            </param>
        </member>
        <member name="M:MCART.Events.ValueChangingEventArgs`1.op_Implicit(MCART.Events.ValueChangingEventArgs{`0})~MCART.Events.ValueEventArgs{`0}">
            <summary>
            Convierte implícitamente este 
            <see cref="T:MCART.Events.ValueChangingEventArgs`1"/> en un
            <see cref="T:MCART.Events.ValueEventArgs`1"/>.
            </summary>
            <param name="x">Objeto a convertir.</param>
        </member>
        <member name="T:MCART.Events.ProgressionEventArgs">
            <summary>
            Incluye informaicón de evento para cualquier clase con eventos que 
            reporten el progreso de una operación.
            </summary>
        </member>
        <member name="P:MCART.Events.ProgressionEventArgs.HelpText">
            <summary>
            Devuelve una descripción rápida del estado de progreso.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> con un mensaje que describe el estado de 
            progreso del evento.
            </returns>
        </member>
        <member name="M:MCART.Events.ProgressionEventArgs.#ctor(System.Double,System.String)">
            <summary>
            Inicializa una nueva instancia de este objeto con los datos
            provistos.
            </summary>
            <param name="x">
            Valor de progreso. Debe ser un <see cref="T:System.Double"/> entre 0.0 y 1.0 
            o los valores <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> o 
            <see cref="F:System.Double.NegativeInfinity"/>.
            </param>
            <param name="y">
            Parámetro opcional. Descripción del estado de progreso que generó el
            evento.
            </param>
        </member>
        <member name="T:MCART.Events.ItemSavingEventArgs">
            <summary>
            Contiene información de evento para cualquier clase con eventos donde 
            se guardará información.
            </summary>
        </member>
        <member name="M:MCART.Events.ItemSavingEventArgs.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de esta clase con la información de
            evento provista.
            </summary>
            <param name="Item">Objeto que ha sido guardado.</param>
            <param name="IsItemNew">
            Determina si el objeto es un nuevo objeto o si ha sido editado.
            </param>
            <param name="Cancelled">
            Determina si este evento se cancelará de forma predeterminada.
            </param>
        </member>
        <member name="F:MCART.Events.ItemSavingEventArgs.Item">
            <summary>
            Obtiene el elemento que ha sido creado/editado.
            </summary>
            <returns>
            Una referencia de instancia al objeto creado/editado.
            </returns>
        </member>
        <member name="F:MCART.Events.ItemSavingEventArgs.IsItemNew">
            <summary>
            Obtiene un valor que indica si el elemento es nuevo o ha sido 
            editado.
            </summary>
            <returns>
            <c>true</c> si el elemento es nuevo, <c>false</c> si el elemento fue
             editado.
            </returns>
        </member>
        <member name="M:MCART.Events.ItemSavingEventArgs.op_Implicit(MCART.Events.ItemSavingEventArgs)~MCART.Events.ItemSavedEventArgs">
            <summary>
            Convierte implícitamente un <see cref="T:MCART.Events.ItemSavingEventArgs"/> en un
            <see cref="T:MCART.Events.ItemSavedEventArgs"/>.
            </summary>
            <param name="x">Objeto a convertir.</param>
        </member>
        <member name="T:MCART.Events.ItemSavedEventArgs">
            <summary>
            Contiene información de evento para cualquier clase con eventos donde 
            se guardó información.
            </summary>
        </member>
        <member name="M:MCART.Events.ItemSavedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de esta clase con la información de
            evento provista.
            </summary>
            <param name="item">Objeto que ha sido guardado.</param>
            <param name="wasNewItem">
            Determina si el objeto es un nuevo objeto o si ha sido editado.
            </param>
        </member>
        <member name="F:MCART.Events.ItemSavedEventArgs.Item">
            <summary>
            Obtiene el elemento que ha sido creado/editado.
            </summary>
            <returns>
            Una referencia de instancia al objeto creado/editado.
            </returns>
        </member>
        <member name="F:MCART.Events.ItemSavedEventArgs.WasNewItem">
            <summary>
            Obtiene un valor que indica si el elemento es nuevo o ha sido
            editado.
            </summary>
            <returns>
            <c>true</c> si el elemento es nuevo, <c>false</c> si el elemento fue
            editado.
            </returns>
        </member>
        <member name="T:MCART.PluginSupport.InteractionItem">
            <summary>
            Esta clase define a un elemento de interacción.
            </summary>
            <summary>
            Esta clase define a un elemento de interacción.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.InteractionItem.Icon">
            <summary>
            Obtiene un ícono asociado a este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> con el ícono asociado a este objeto.
            Si no se ha establecido un ícono, se devuelve <c>null</c>.
            </returns>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler,System.String,System.String,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Crea una nueva entrada de interacción con el delegado
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Text">Nombre del comando.</param>
            <param name="Description">
            Descripción larga del comando. útil para aplicar a Tooltips.
            </param>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
            <param name="Icon">
            <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> con el ícono para este 
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler,System.String,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Crea una nueva entrada de interacción con el delegado 
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Text">Nombre del comando.</param>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la 
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
            <param name="Icon">
            <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> con el ícono para este 
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Crea una nueva entrada de interacción con el delegado 
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
            <param name="Icon">
            <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> con el ícono para este
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="P:MCART.PluginSupport.InteractionItem.RoutedAction">
            <summary>
            Encapsula el <see cref="F:MCART.PluginSupport.InteractionItem.Action"/> como un
            <see cref="T:System.Windows.RoutedEventHandler"/> compatible con Windows
            Presentation Framework.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.AsMenuItem">
            <summary>
            Devuelve este <see cref="T:MCART.PluginSupport.InteractionItem"/> como un
            <see cref="T:System.Windows.Controls.MenuItem"/>.
            </summary>
            <returns>Un <see cref="T:System.Windows.Controls.MenuItem"/> generado a partir de este
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.</returns>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.op_Implicit(MCART.PluginSupport.InteractionItem)~System.Windows.Controls.MenuItem">
            <summary>
            Convierte implícitamente este <see cref="T:MCART.PluginSupport.InteractionItem"/> en un
            <see cref="T:System.Windows.Controls.MenuItem"/>.
            </summary>
            <param name="j"><see cref="T:MCART.PluginSupport.InteractionItem"/> a convertir.</param>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.AsButton``1">
            <summary>
            Devuelve este <see cref="T:MCART.PluginSupport.InteractionItem"/> como un 
            <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> de tipo <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Tipo de control a generar.</typeparam>
            <returns>Un <typeparamref name="T"/> generado a partir de este
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.</returns>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.AsButton">
            <summary>
            Devuelve este <see cref="T:MCART.PluginSupport.InteractionItem"/> como un
            <see cref="T:System.Windows.Controls.Button"/>.
            </summary>
            <returns>Un <see cref="T:System.Windows.Controls.Button"/> generado a partir de este
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.</returns>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.op_Implicit(MCART.PluginSupport.InteractionItem)~System.Windows.Controls.Button">
            <summary>
            Convierte implícitamente este <see cref="T:MCART.PluginSupport.InteractionItem"/> en un
            <see cref="T:System.Windows.Controls.Button"/>.
            </summary>
            <param name="j"><see cref="T:MCART.PluginSupport.InteractionItem"/> a convertir.</param>
        </member>
        <member name="F:MCART.PluginSupport.InteractionItem.Text">
            <summary>
            Obtiene un texto asociado a este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.InteractionItem.Description">
            <summary>
            Obtiene una descripción larga de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> con el texto asociado a este 
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </returns>
            <remarks>
            Esta propiedad puede ser utilizada mostrándose en un Tooltip, o un 
            menú descriptivo.
            </remarks>
        </member>
        <member name="F:MCART.PluginSupport.InteractionItem.Action">
            <summary>
            Obtiene un delegado con la acción a realizar por este 
            <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </summary>
            <remarks>
            Es posible utilizar un delegado <see cref="T:System.EventHandler"/>, una 
            expresión Lambda, la referencia directa a un método (C#) o un método
            con la palabra clave <c>AddressOf</c> (VB).
            Además, diferentes implementaciones de MCART podrían requerir de
            encapsulamiento para esta acción, como es el caso en los proyectos 
            de Windows Presentation Framework, para el cual se incluye una
            función de conversión entre <see cref="T:System.EventHandler"/> y 
            RoutedEventHandler.
            </remarks>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler,System.String,System.String)">
            <summary>
            Crea una nueva entrada de interacción con el delegado 
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Text">Nombre del comando.</param>
            <param name="Description">
            Descripción larga del comando. Útil para aplicar a Tooltips.
            </param>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la 
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler,System.String)">
            <summary>
            Crea una nueva entrada de interacción con el delegado 
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Text">Nombre del comando.</param>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.InteractionItem.#ctor(System.EventHandler)">
            <summary>
            Crea una nueva entrada de interacción con el delegado 
            <see cref="T:System.EventHandler"/> especificado.
            </summary>
            <param name="Action">
            <see cref="T:System.EventHandler"/> que se utilizará para controlar la 
            activación de este <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </param>
        </member>
        <member name="T:MCART.PluginSupport.Plugin">
            <summary>
            Clase base para todos los plugins que puedan ser contruídos y
            administrador por MCART.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.GetUIMenu(MCART.PluginSupport.IPlugin)">
            <summary>
            Genera un <see cref="T:System.Windows.Controls.MenuItem"/> a partir de las interacciones del
            <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Windows.Controls.MenuItem"/> que contiene las interacciones contenidas
            por el <see cref="T:MCART.PluginSupport.IPlugin"/>, en la propiedad
            <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/>.
            </returns>
            <param name="plugin">
            <see cref="T:MCART.PluginSupport.IPlugin"/> a partir del cual se generará el
            <see cref="T:System.Windows.Controls.MenuItem"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.GetUIPanel``2(MCART.PluginSupport.IPlugin)">
            <summary>
            Obtiene la Interfaz de interacción de un <see cref="T:MCART.PluginSupport.IPlugin"/> como
            un <typeparamref name="PanelT"/> cuyas acciones son controles de
            tipo <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            Tipo de controles a generar. Se deben utilizar controles que se
            deriven de <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </typeparam>
            <typeparam name="PanelT">Tipo de panel a devolver.</typeparam>
            <param name="plugin">
            <see cref="T:MCART.PluginSupport.IPlugin"/> a partir del cual se generará el panel.
            </param>
            <returns>
            Un <typeparamref name="PanelT"/> que contiene las interacciones
            contenidas por el <see cref="T:MCART.PluginSupport.IPlugin"/>, en la propiedad
            <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.UIMenu">
            <summary>
            Convierte el <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/> en un
            <see cref="T:System.Windows.Controls.MenuItem"/>.
            </summary>
            <value>
            Un <see cref="T:System.Windows.Controls.MenuItem"/> que puede agregarse a un
            <see cref="T:System.Windows.Controls.Menu"/> de Windows Presentation Framework.
            </value>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.UIPanel``2">
            <summary>
            Convierte el <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/> en un
            <see cref="T:System.Windows.Controls.Panel"/>, especificando el tipo de controles a
            contener para cada <see cref="T:MCART.PluginSupport.InteractionItem"/>.
            </summary>
            <value>
            Un <see cref="T:System.Windows.Controls.Panel"/> que puede agregarse a un
            <see cref="T:System.Windows.Controls.Menu"/> de Windows Presentation Framework.
            </value>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.About(MCART.PluginSupport.IPlugin)">
            <summary>
            Muestra información del <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
            <param name="p">
            <see cref="T:MCART.PluginSupport.IPlugin"/> del cual se mostrará la información.
            </param>
        </member>
        <member name="F:MCART.PluginSupport.Plugin.MyMenu">
            <summary>
            Provee a este <see cref="T:MCART.PluginSupport.Plugin"/> de un menú de interacciones.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.Plugin.auMyMenu">
            <summary>
            Valor privado para la propiedad <see cref="P:MCART.PluginSupport.Plugin.AutoUpdateMyMenu"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.AutoUpdateMyMenu">
            <summary>
            Determina si <see cref="F:MCART.PluginSupport.Plugin.MyMenu"/> solicitará automáticamente la
            actualización de la interfaz gráfica a la aplicación.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.AutoUpdateEvtHandler(System.Object,System.EventArgs)">
            <summary>
            Maneja las llamadas de actualizacióón automática de la
            interfaz gráfica de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Name">
            <summary>
            Obtiene el nombre de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Version">
            <summary>
            Obtiene la versión de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Description">
            <summary>
            Obtiene la descripción de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Author">
            <summary>
            Obtiene el autor de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Copyright">
            <summary>
            Obtiene la cadena de Copyright de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.License">
            <summary>
            Obtiene el texto de la licencia de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.MinMCARTVersion">
            <summary>
            Determina la versión mínima de MCART necesaria para este 
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <remarks>
            Si no se encuentra el atributo 
            <see cref="T:MCART.Attributes.MinMCARTVersionAttribute"/> en la clase o en el 
            ensamblado, se devolverá <see cref="P:MCART.PluginSupport.Plugin.TargetMCARTVersion"/>.
            </remarks>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.MinRTVersion(System.Version@)">
            <summary>
            Determina la versión mínima de MCART necesaria para este 
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <param name="minVersion">Versión mínima de MCART.</param>
            <returns>
            <c>True</c> si fue posible obtener información sobre la versión 
            mínima de MCART; de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.TargetMCARTVersion">
            <summary>
            Determina la versión objetivo de MCART para este 
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.TargetRTVersion(System.Version@)">
            <summary>
            Determina la versión objetivo de MCART necesaria para este 
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <param name="tgtVersion">Versión objetivo de MCART.</param>
            <returns>
            <c>True</c> si fue posible obtener información sobre la versión 
            objetivo de MCART; de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.IsBeta">
            <summary>
            Determina si este <see cref="T:MCART.PluginSupport.Plugin"/> es una versión Beta.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.IsUnsafe">
            <summary>
            Determina si este <see cref="T:MCART.PluginSupport.Plugin"/> es considerado como 
            inseguro.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.IsUnstable">
            <summary>
            Determina si este <see cref="T:MCART.PluginSupport.Plugin"/> es considerado como 
            inestable.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.InterfaceNames">
            <summary>
            Obtiene una lista con los nombres de las interfaces implementadas
            por este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Interfaces">
            <summary>
            Obtiene una colección de las interfaces implementadas por este
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.MyAssembly">
            <summary>
            Obtiene la referencia al emsamblado que contiene a este 
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <value>
            Ensamblado en el cual se declara este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </value>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.PluginInteractions">
            <summary>
            Contiene una lista de interacciones que este <see cref="T:MCART.PluginSupport.Plugin"/>.
            provee para incluir en una interfaz gráfica.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.HasInteractions">
            <summary>
            Indica si este <see cref="T:MCART.PluginSupport.Plugin"/> contiene o no interacciones.
            </summary>        
        </member>
        <member name="F:MCART.PluginSupport.Plugin.rptr">
            <summary>
            Objeto privado de la propiedad <see cref="P:MCART.PluginSupport.Plugin.Reporter"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Reporter">
            <summary>
            Referencia al objeto <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> a utilizar por las
            funciones de este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.Plugin.tg">
            <summary>
            Objeto privado de la propiedad <see cref="P:MCART.PluginSupport.Plugin.Tag"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.Plugin.Tag">
            <summary>
            Contiene un objeto de libre uso para almacenamiento de cualquier
            inatancia que el usuario desee asociar a este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.Plugin.UIChangeRequested">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> solicita que se actualice
            su interfaz gráfica, en caso de contenerla.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.Plugin.PluginFinalizing">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> va a ser finalizado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.Plugin.PluginFinalized">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> ha sido finalizado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.Plugin.PluginLoaded">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> ha sido cargado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.Plugin.PluginLoadFailed">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> no pudo ser cargado.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.CType``1">
            <summary>
            Convierte el <see cref="T:MCART.PluginSupport.Plugin"/> en un objeto del tipo
            especificado, realizando pruebas sobre la validez del mismo.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            Un objeto de tipo <typeparamref name="T"/> que cumple con todas las
            restricciones de tipo aplicables a este <see cref="T:MCART.PluginSupport.Plugin"/>.
            </returns>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.RequestUIChange">
            <summary>
            Genera el evento <see cref="E:MCART.PluginSupport.Plugin.UIChangeRequested"/>.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.RaiseFailed(System.Exception)">
            <summary>
            Genera el evento <see cref="E:MCART.PluginSupport.Plugin.PluginLoadFailed"/>.
            </summary>
            <param name="ex">
            Parámetro opcional. <see cref="T:System.Exception"/> que ha causado que el
            <see cref="T:MCART.PluginSupport.Plugin"/> no pueda inicializarse.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.RaiseFinalizing(MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason)">
            <summary>
            Genera el evento <see cref="E:MCART.PluginSupport.Plugin.PluginFinalizing"/>.
            </summary>
            <param name="reason">
            Parámetro opcional. Razón por la que el plugin va a finalizar.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.RaisePlgLoad(System.DateTime)">
            <summary>
            Genera el evento <see cref="E:MCART.PluginSupport.Plugin.PluginLoaded"/>.
            </summary>
            <param name="tme">
            Instante de carga del <see cref="T:MCART.PluginSupport.Plugin"/>.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations 
            before the <see cref="T:MCART.PluginSupport.Plugin"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.Plugin.PluginExtension">
            <summary>
            Extensión predeterminada de los ensamblados que contienen plugins.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.IsVaild(System.Reflection.Assembly)">
            <summary>
            Comprueba si un ensamblado contiene clases cargables como
            <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
            <returns><c>true</c> si el ensamblado contiene clases cargables como
            <see cref="T:MCART.PluginSupport.IPlugin"/>; de no contrario, <c>false</c>.</returns>
            <param name="asmbly"><see cref="T:System.Reflection.Assembly"/> a comprobar.</param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Has``1(System.Reflection.Assembly)">
            <summary>
            Comprueba si un ensamblado contiene un plugin del tipo especificado.
            </summary>
            <returns>The has.</returns>
            <param name="asmbly">Asmbly.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.NewPlg(System.Type,System.DateTime)">
            <summary>
            Inicializa una nueva instancia del plugin.
            </summary>
            <returns>El plugin cargado.</returns>
            <param name="j">
            Tipo a instanciar. Debe heredar <see cref="T:MCART.PluginSupport.Plugin"/>, o en su
            defecto, implementar <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </param>
            <param name="tme">Momento de carga.</param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.IsValidType(System.Type,System.Boolean)">
            <summary>
            Determina si un tipo es válido para ser cargado como un
            <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
            <returns>
            <c>true</c>, si el tipo puede ser cagado como un 
            <see cref="T:MCART.PluginSupport.Plugin"/>, <c>false</c> en caso contrario.
            </returns>
            <param name="m">Tipo a comprobar.</param>
            <param name="chkVersion">
            Parámetro opcional. Si se omite o se establece en <c>true</c>, se
            verificará la compatibilidad con esta versión de MCART, si se
            establece en <c>false</c>, no se realizará la comprobación de
            compatibilidad con esta versión de MCART.
            </param>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.LoadAll``1(System.String,System.Boolean)">
            <summary>
            Carga todos los <see cref="T:MCART.PluginSupport.IPlugin"/> contenidos en el ensamblado.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.Generic.IEnumerable`1"/> con los <see cref="T:MCART.PluginSupport.IPlugin"/> 
            encontrados.
            </returns>
            <param name="asmPath">Ruta del ensamblado a cargar.</param>
            <param name="ignoreVersion">
            Si se establece en <c>true</c>, no se comprobará la versión de
            MCART antes de cargar los <see cref="T:MCART.PluginSupport.IPlugin"/>, lo cual puede ser
            muy peligroso, pero útil para obtener información.</param>
            <typeparam name="T">
            Tipo de <see cref="T:MCART.PluginSupport.IPlugin"/> a cargar. Si se utiliza
            <see cref="T:MCART.PluginSupport.IPlugin"/>, se cargaran absolutamente todos los plugins,
            sin importar de qué tipo sean.</typeparam>
            <exception cref="T:System.IO.FileNotFoundException">
            Se produce si el archivo del ensamblado no ha sido encontrado.
            </exception>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.LoadAll``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Carga todos los <see cref="T:MCART.PluginSupport.IPlugin"/> contenidos en el ensamblado.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.Generic.IEnumerable`1"/> con los <see cref="T:MCART.PluginSupport.IPlugin"/>
            encontrados.
            </returns>
            <param name="asmbly"><see cref="T:System.Reflection.Assembly"/> a cargar.</param>
            <param name="ignoreVersion">
            Si se establece en <c>true</c>, no se comprobará la versión de
            MCART antes de cargar los <see cref="T:MCART.PluginSupport.IPlugin"/>, lo cual puede ser
            muy peligroso, pero útil para obtener información.</param>
            <typeparam name="T">
            Tipo de <see cref="T:MCART.PluginSupport.IPlugin"/> a cargar. Si se utiliza
            <see cref="T:MCART.PluginSupport.IPlugin"/>, se cargaran absolutamente todos los plugins,
            sin importar de qué tipo sean.</typeparam>
            <exception cref="T:MCART.Exceptions.NotPluginException">
            Se produce si <paramref name="asmbly"/> no contiene clases cargables
            como <see cref="T:MCART.PluginSupport.IPlugin"/>. 
            </exception>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Load``1(System.String,System.Boolean)">
            <summary>
            Carga una clase de tipo <typeparamref name="T"/> contenida en el
            ensamblado especificado.
            </summary>
            <returns>
            Un <see cref="T:MCART.PluginSupport.IPlugin"/> de tipo <typeparamref name="T"/>.
            </returns>
            <param name="asmPath">Ruta del ensamblado a cargar.</param>
            <param name="ignoreVersion">
            Si se establece en <c>true</c>, se omitirá la comprobación de
            versión de MCART.</param>
            <typeparam name="T">Clase a cargar.</typeparam>
            <exception cref="T:System.IO.FileNotFoundException">
            Se produce si el archivo del ensamblado no ha sido encontrado.
            </exception>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Load``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Carga una clase de tipo <typeparamref name="T"/> contenida en el
            ensamblado especificado.
            </summary>
            <returns>
            Un <see cref="T:IPlugin"/> de tipo <typeparamref name="T"/>.
            </returns>
            <param name="asmbly"><see cref="T:System.Reflection.Assembly"/> a cargar.</param>
            <param name="ignoreVersion">
            Si se establece en <c>true</c>, se omitirá la comprobación de
            versión de MCART.</param>
            <typeparam name="T">Clase a cargar.</typeparam>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.LoadEverything``1(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Carga todos los plugins de todos los ensamblados en el directorio.
            </summary>
            <returns>The everything.</returns>
            <param name="ignoreVersion">If set to <c>true</c> ignore version.</param>
            <param name="pluginsPath">Plugins path.</param>
            <param name="search">Search.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.LoadWhatever``1(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Carga cualquier plugin disponible.
            </summary>
            <returns>The whatever.</returns>
            <param name="pluginsPath">Plugins path.</param>
            <param name="search">Search.</param>
            <param name="ignoreVersion">If set to <c>true</c> ignore version.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Dir``1(System.String,System.IO.SearchOption)">
            <summary>
            Obtiene una lista de los ensamblados que contienen la clase <typeparamref name="T"/>
            </summary>
            <returns>The dir.</returns>
            <param name="pluginsPath">Plugins path.</param>
            <param name="search">Search.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.PluginTree``1(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Carga todos los plugins de todos los ensamblados que coincidan con 
            el patrón como una estructura de árbol.
            </summary>
            <typeparam name="T">Tipos a cargar.</typeparam>
            <param name="pluginsPath">
            Ruta de búsqueda. Debe ser un directorio.
            </param>
            <param name="searchPattern">
            Patrón de búsqueda de ensamblados.
            </param>
            <param name="search">
            <see cref="T:System.IO.SearchOption"/> con las opciones de búsqueda.
            </param>
            <param name="ignoreVersion">
            Ignorar la comprobación de versión de MCART.
            </param>
            <returns>
            Un <see cref="T:System.Collections.Generic.Dictionary`2"/> con los ensamblados y 
            sus correspondientes plugins.
            </returns>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.PluginTree``1(System.Boolean)">
            <summary>
            Carga todos los plugins de todos los ensamblados en el directorio
            actual como una estructura de árbol.
            </summary>
            <typeparam name="T">Tipos a cargar.</typeparam>
            <param name="ignoreVersion">
            Ignorar la comprobación de versión de MCART.
            </param>
            <returns>
            Un <see cref="T:System.Collections.Generic.Dictionary`2"/> con los ensamblados y 
            sus correspondientes plugins.
            </returns>
        </member>
        <member name="M:MCART.PluginSupport.Plugin.Dir(System.String,System.IO.SearchOption)">
            <summary>
            Obtiene una lista de ensamblados que contienen plugins.
            </summary>
            <returns>The dir.</returns>
            <param name="pluginsPath">Plugins path.</param>
            <param name="search">Search.</param>
        </member>
        <member name="T:MCART.PluginSupport.IPlugin">
            <summary>
            Define una interfaz básica para crear Plugins administrados por MCART
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.UIMenu">
            <summary>
            Convierte el <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/> en un 
            <see cref="T:System.Windows.Controls.MenuItem"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Windows.Controls.MenuItem"/> que se puede agregar a la interfaz
            gráfica de la aplicación durante la ejecución.
            </returns>
        </member>
        <member name="M:MCART.PluginSupport.IPlugin.UIPanel``2">
            <summary>
            Convierte el <see cref="P:MCART.PluginSupport.IPlugin.PluginInteractions"/> en un 
            <see cref="T:System.Windows.Controls.Panel"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Windows.Controls.Panel"/> que se puede agregar a la interfaz gráfica
            de la aplicación durante la ejecución.
            </returns>
            <typeparam name="T">
            Tipo de controles a incluir dentro del panel. Debe heredar
            <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.</typeparam>
            <typeparam name="PanelT">
            Tipo de panel a generar. Debe heredar <see cref="T:System.Windows.Controls.Panel"/>.
            </typeparam>
        </member>
        <member name="E:MCART.PluginSupport.IPlugin.UIChangeRequested">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.IPlugin"/> solicita la actualización
            de su interfaz gráfica.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.IPlugin.PluginFinalizing">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.IPlugin"/> está por ser deshechado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.IPlugin.PluginFinalized">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.IPlugin"/> ha sido desechado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.IPlugin.PluginLoaded">
            <summary>
            Se produce cuando un <see cref="T:MCART.PluginSupport.IPlugin"/> ha sido cargado.
            </summary>
        </member>
        <member name="E:MCART.PluginSupport.IPlugin.PluginLoadFailed">
            <summary>
            Se produce cuando la carga de un <see cref="T:MCART.PluginSupport.IPlugin"/> ha fallado.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Name">
            <summary>
            Devuelve el nombre del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Version">
            <summary>
            Devuelve la versión del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Description">
            <summary>
            Devuelve una descripción del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Author">
            <summary>
            Devuelve el autor del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Copyright">
            <summary>
            Devuelve el Copyright del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.License">
            <summary>
            Devuelve la licencia del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.MinMCARTVersion">
            <summary>
            Determina la versión mínima de MCART necesaria para este <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.IPlugin.MinRTVersion(System.Version@)">
            <summary>
            Determina la versión mínima de MCART necesaria para este <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
            <param name="minVersion">Versión mínima de MCART.</param>
            <returns>
            <c>True</c> si fue posible obtener información sobre la versión 
            mínima de MCART; de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.TargetMCARTVersion">
            <summary>
            Determina la versión objetivo de MCART para este <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.IPlugin.TargetRTVersion(System.Version@)">
            <summary>
            Determina la versión objetivo de MCART necesaria para este <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
            <param name="tgtVersion">Versión objetivo de MCART.</param>
            <returns>
            <c>True</c> si fue posible obtener información sobre la versión 
            objetivo de MCART; de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.IsBeta">
            <summary>
            Devuelve <c>True</c> si el plugin es Beta
            </summary>
            <returns><c>True</c> si el plugin ha sido marcado como versión Beta; de lo contrario, <c>False</c></returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.IsUnsafe">
            <summary>
            Determina si el plugin es inseguro
            </summary>
            <returns><c>True</c> si el plugin ha sido marcado como inseguro; de lo contrario, <c>False</c></returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.IsUnstable">
            <summary>
            Determina si el plugin es inseguro
            </summary>
            <returns><c>True</c> si el plugin ha sido marcado como inseguro; de lo contrario, <c>False</c></returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.InterfaceNames">
            <summary>
            Devuelve el nombre de las interfaces implementadas por este
            <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> con los nombre de las
            interfaces implementadas dentro de este <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Interfaces">
            <summary>
            Devuelve la lista de interfaces que este <see cref="T:MCART.PluginSupport.IPlugin"/>
            implementa.
            </summary>
            <returns>Una lista de las interfaces implementadas por este
            <see cref="T:MCART.PluginSupport.IPlugin"/>.</returns>
            <remarks>
            Para que este <see cref="T:MCART.PluginSupport.IPlugin"/> sea útil de alguna forma, se
            debe implementar una interfaz para la cual desee desarrollar un
            <see cref="T:MCART.PluginSupport.Plugin"/>. Además, se ignoran las interfaces
            <see cref="T:MCART.PluginSupport.IPlugin"/> y <see cref="T:System.IDisposable"/>.
            </remarks>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.MyAssembly">
            <summary>
            Devuelve la referencia al ensamblado que contiene a este <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.PluginInteractions">
            <summary>
            Devuelve una colección de opciones de interacción.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> con los
            elementos de interacción del <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </returns>
            <remarks>
            Si utiliza la implementación predeterminada de la interfaz 
            <see cref="T:MCART.PluginSupport.IPlugin"/> incluída en MCART (<see cref="T:MCART.PluginSupport.Plugin"/>),
            puede agregar nuevos elementos <see cref="T:MCART.PluginSupport.InteractionItem"/> a la
            colección <see cref="F:MCART.PluginSupport.Plugin.MyMenu"/>.
            </remarks>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.HasInteractions">
            <summary>
            Devuelve <c>true</c> si el <see cref="T:MCART.PluginSupport.Plugin"/> contiene interacciones
            </summary>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Reporter">
            <summary>
            Obtiene o establece el objeto <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/>
            asociado a este <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
            <returns>
            El <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> asociado a este
            <see cref="T:MCART.PluginSupport.IPlugin"/>. Si no se ha asociado ningún objeto, se
            devolverá <see cref="T:MCART.Types.TaskReporter.DummyTaskReporter"/>.
            </returns>
        </member>
        <member name="P:MCART.PluginSupport.IPlugin.Tag">
            <summary>
            Contiene información adicional de este plugin
            </summary>
            <returns>Información determinada por el usuario relacionada a este plugin</returns>
        </member>
        <member name="M:MCART.PluginSupport.IPlugin.CType``1">
            <summary>
            Devuelve la instancia de este <see cref="T:MCART.PluginSupport.IPlugin"/> como un objeto de tipo <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            Interfaz a la cual se debe convertir esta instancia. El <see cref="T:MCART.PluginSupport.IPlugin"/> debe implementar dicha 
            interfaz.
            </typeparam>
            <returns>Un objeto de tipo <typeparamref name="T"/>.</returns>
            <remarks>
            En Visual Basic, esta función puede considerarse como una variante más segura de <c>CType</c>, ya que 
            realiza múltiples comprobaciones de tipo antes de intentar la conversión.
            <list type="bullet">
            <item><description>
            Es conveniente utilizar esta función en conjunto con la propiedad <see cref="P:MCART.PluginSupport.IPlugin.Interfaces"/>.
            </description></item>
            <item><description>
            Si necesita una referencia de tipo <see cref="T:MCART.PluginSupport.IPlugin"/>, no haga <c>Plugin.CType(Of IPlugin)</c>, en su 
            lugar utilice <c>Itself</c>.</description></item>
            </list>
            </remarks>
            <exception cref="T:MCART.Exceptions.InterfaceExpectedException">
            Se produce si <typeparamref name="T"/> no es una interfaz.</exception>
            <exception cref="T:MCART.Exceptions.InterfaceNotImplementedException">
            Se produce si el <see cref="T:MCART.PluginSupport.IPlugin"/> no implementa la interfaz especificada.</exception>
        </member>
        <member name="M:MCART.PluginSupport.IPlugin.RequestUIChange">
            <summary>
            Solicita a la aplicación que se actualize la interfaz de interacción del <see cref="T:MCART.PluginSupport.IPlugin"/>
            </summary>
        </member>
        <member name="T:MCART.PluginSupport.PluginLoadFailedEventHandler">
            <summary>
            Maneja el evento <see cref="E:MCART.PluginSupport.IPlugin.PluginLoadFailed"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.PluginSupport.PluginLoadedEventHandler">
            <summary>
            Maneja el evento <see cref="E:MCART.PluginSupport.IPlugin.PluginLoaded"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.PluginSupport.PluginFinalizedEventHandler">
            <summary>
            Maneja el evento <see cref="E:MCART.PluginSupport.IPlugin.PluginFinalized"/>.
            </summary>
            <param name="sender">
            Este argumento siempre devolverá <c>null</c>.
            </param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.PluginSupport.PluginFinalizingEventHandler">
            <summary>
            Maneja el evento <see cref="E:MCART.PluginSupport.IPlugin.PluginFinalizing"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.PluginSupport.UIChangeRequestedEventHandler">
            <summary>
            Maneja el evento <see cref="E:MCART.PluginSupport.IPlugin.UIChangeRequested"/>.
            </summary>
            <param name="sender">Objeto que generó el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.PluginSupport.PluginFinalizingEventArgs">
            <summary>
            Incluye información adicional del evento 
            <see cref="E:MCART.PluginSupport.IPlugin.PluginFinalizing"/>.
            </summary>
        </member>
        <member name="T:MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason">
            <summary>
            Determina el motivo de finalización del <see cref="T:MCART.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason.Shutdown">
            <summary>
            Cierre normal.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason.Error">
            <summary>
            Cierre debido a un error.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason.Disposal">
            <summary>
            Cierre por liberación de recursos.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason.AppClosing">
            <summary>
            La aplicación se está cerrando.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizingEventArgs.Reason">
            <summary>
            Indica la razón por la cual se está finalizando el 
            <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.PluginFinalizingEventArgs.#ctor(MCART.PluginSupport.PluginFinalizingEventArgs.FinalizingReason)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.PluginSupport.PluginFinalizingEventArgs"/>.
            </summary>
            <param name="reason">Parámetro opcional. Permite establecer una
            razón por la cual se está finalizando este plugin.</param>
        </member>
        <member name="T:MCART.PluginSupport.PluginFinalizedEventArgs">
            <summary>
            Incluye información adicional del evento
            <see cref="E:MCART.PluginSupport.IPlugin.PluginFinalized"/>.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginFinalizedEventArgs.Exception">
            <summary>
            Obtiene la excepción que causó la finalización del Plugin.
            </summary>
            <remarks>Se devolverá <c>null</c> si el <see cref="T:MCART.PluginSupport.Plugin"/> ha
            finalizado correctamente, en caso contrario se devuelve la excepción
            que causó la finalización del <see cref="T:MCART.PluginSupport.Plugin"/>.</remarks>
        </member>
        <member name="P:MCART.PluginSupport.PluginFinalizedEventArgs.OK">
            <summary>
            Obtiene un valor que indica si el <see cref="T:MCART.PluginSupport.Plugin"/> finalizó
            correctamente.
            </summary>
            <value><c>true</c> si el <see cref="T:MCART.PluginSupport.Plugin"/> finalizó
            correctamente; de lo contrario, <c>false</c>.</value>
        </member>
        <member name="M:MCART.PluginSupport.PluginFinalizedEventArgs.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.PluginSupport.PluginFinalizedEventArgs"/>.
            </summary>
            <param name="exception">Opcional. Excepción de finalización del
            <see cref="T:MCART.PluginSupport.Plugin"/>. Si se omite o se establece en <c>null</c>,
            significa que el <see cref="T:MCART.PluginSupport.Plugin"/> ha finalizado correctamente.
            </param>
        </member>
        <member name="T:MCART.PluginSupport.PluginLoadedEventArgs">
            <summary>
            Incluye información adicional del evento 
            <see cref="E:MCART.PluginSupport.IPlugin.PluginLoaded"/>.
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.PluginLoadedEventArgs.LoadTime">
            <summary>
            Obtiene el tiempo que le ha tomado al <see cref="T:MCART.PluginSupport.Plugin"/> ser
            cargado.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.PluginLoadedEventArgs.#ctor(System.TimeSpan)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.PluginSupport.PluginLoadedEventArgs"/>.
            </summary>
            <param name="t"><see cref="T:System.TimeSpan"/> que le ha tomado al
            <see cref="T:MCART.PluginSupport.Plugin"/> ser cargado.</param>
        </member>
        <member name="M:MCART.PluginSupport.PluginLoadedEventArgs.#ctor(System.Int64)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.PluginSupport.PluginLoadedEventArgs"/>.
            </summary>
            <param name="ticks">Tiempo en ticks que le ha tomado al
            <see cref="T:MCART.PluginSupport.Plugin"/> ser cargado.</param>
        </member>
        <member name="M:MCART.PluginSupport.PluginLoadedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.PluginSupport.PluginLoadedEventArgs"/>.
            </summary>
            <param name="milliseconds">Milisegundos que le ha tomado al
            <see cref="T:MCART.PluginSupport.Plugin"/> ser cargado.</param>
            <param name="seconds">Opcional. Segundos que le ha tomado al
            <see cref="T:MCART.PluginSupport.Plugin"/> ser cargado.</param>
        </member>
        <member name="T:MCART.PluginSupport.UIChangeEventArgs">
            <summary>
            Incluye información adicional del evento 
            <see cref="E:MCART.PluginSupport.IPlugin.UIChangeRequested"/>
            </summary>
        </member>
        <member name="F:MCART.PluginSupport.UIChangeEventArgs.NewUI">
            <summary>
            Obtiene la nueva interfaz que el <see cref="T:MCART.PluginSupport.IPlugin"/> ha 
            solicitado.
            </summary>
        </member>
        <member name="M:MCART.PluginSupport.UIChangeEventArgs.#ctor(System.Collections.Generic.IList{MCART.PluginSupport.InteractionItem})">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.PluginSupport.UIChangeEventArgs"/>.
            </summary>
            <param name="NewUI">Nueva interfaz de usuario solicitada.</param>
        </member>
        <member name="T:MCART.Resources.Icons">
            <summary>
            Contiene íconos y otras imágenes para utilizar en aplicaciones de
            Windows Presentation Framework.
            </summary>
            <summary>
            Contiene íconos y otras imágenes para utilizar en cualquier aplicación.
            </summary>
        </member>
        <member name="M:MCART.Resources.Icons.GetIcon(MCART.Resources.Icons.IconID)">
            <summary>
            Obtiene un ícono de los recursos incrustados.
            </summary>
            <param name="icon">Ícono que se desea obtener.</param>
            <returns>El ícono de recurso incrustado solicitado.</returns>
        </member>
        <member name="T:MCART.Resources.Icons.IconID">
            <summary>
            Determina el ícono a obtener.
            </summary>
        </member>
        <member name="F:MCART.Resources.Icons.IconID.MCART">
            <summary>
            Ícono principal de MCART.
            </summary>
        </member>
        <member name="F:MCART.Resources.Icons.IconID.MCARTBadge">
            <summary>
            Etiqueta de MCART.
            </summary>
        </member>
        <member name="F:MCART.Resources.Icons.IconID.MCARTPlugin">
            <summary>
            Ícono de plugin de MCART.
            </summary>
        </member>
        <member name="T:MCART.Resources.Colors">
            <summary>
            Incluye una colección de colores adicionales.
            </summary>
        </member>
        <member name="P:MCART.Resources.Colors.ProgressBar">
            <summary>
            Obtiene un <see cref="T:MCART.Types.Color"/> correspondiente a las barras de
            progreso de Microsoft® Windows®.
            </summary>
        </member>
        <member name="M:MCART.Resources.Colors.Pick">
            <summary>
            Devuelve un color aleatorio.
            </summary>
            <returns>
            Un <see cref="T:MCART.Types.Color"/> seleccionado aleatoriamente.
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.About(System.String)">
            <summary>
            Devuelve una cadena con el texto "Acerca de
            {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "Acerca de {<paramref name="text"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.Ok(System.String)">
            <summary>
            Devuelve una cadena con el texto "✓ {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "✓ {<paramref name="text"/>}".
            </returns>
            <remarks>
            El texto generado por esta función podría no verse correctamente en
            un programa, consola o terminal que no sea Unicode.
            </remarks>
        </member>
        <member name="M:MCART.Resources.Strings.Warn(System.String)">
            <summary>
            Devuelve una cadena con el texto "/!\ {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "/!\ {<paramref name="text"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.Includes(System.String)">
            <summary>
            Devuelve una cadena con el texto "Incluye {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "Incluye {<paramref name="text"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.Include(System.String)">
            <summary>
            Devuelve una cadena con el texto "Incluya {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "Incluya {<paramref name="text"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.PluginHasNoInters(System.String)">
            <summary>
            Devuelve una cadena con el texto "El plugin {<paramref name="plg"/>} no contiene interacciones.".
            </summary>
            <param name="plg">Nombre del plugin.</param>
            <returns>
            Una cadena con el formato "El plugin {<paramref name="plg"/>} no contiene interacciones.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.SetX(System.String)">
            <summary>
            Devuelve una cadena con el texto "Establecer {<paramref name="text"/>}".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "Establecer {<paramref name="text"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XAccepted(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} ha sido aceptado.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} ha sido aceptado.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XAlreadyStarted(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} ya se ha iniciado.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} ya se ha iniciado.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XCannotBeY(System.String,System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="x"/>} no puede 
            ser {<paramref name="y"/>}".
            </summary>
            <param name="x">Elemento x.</param>
            <param name="y">Elemento y.</param>
            <returns>
            Una cadena con el texto "{<paramref name="x"/>} no puede ser
            {<paramref name="y"/>}".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XDisconnected(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} se ha desconectado.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} se ha desconectado.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XIsBeta(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} se encuentra en fase beta.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} se encuentra en fase beta.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XRejected(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} ha sido rechazado.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} ha sido rechazado.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XStarted(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} se ha iniciado.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} se ha iniciado.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XStopped(System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="text"/>} se ha detenido.".
            </summary>
            <param name="text">Texto a formatear.</param>
            <returns>
            Una cadena con el formato "{<paramref name="text"/>} se ha detenido.".
            </returns>
        </member>
        <member name="M:MCART.Resources.Strings.XYQuotes(System.String,System.String)">
            <summary>
            Devuelve una cadena con el texto "{<paramref name="unquoted"/>}
            '{<paramref name="quoted"/>}'".
            </summary>
            <param name="unquoted">Elemento x.</param>
            <param name="quoted">Elemento y.</param>
            <returns>
            Una cadena con el formato "{<paramref name="unquoted"/>}
            '{<paramref name="quoted"/>}'".
            </returns>
        </member>
        <member name="F:MCART.Resources.Strings.about">
            <summary>
            Una cadena con el texto "Acerca de..."
            </summary>
        </member>
        <member name="T:MCART.Resources.SpecificStrings">
            <summary>
            Contiene cadenas específicas para uso interno de MCART.
            </summary>
        </member>
        <member name="T:MCART.Resources.RTInfo">
            <summary>
            Contiene métodos con funciones de identificación en información del 
            ensamblado de MCART.
            </summary>
        </member>
        <member name="P:MCART.Resources.RTInfo.RTVersion">
            <summary>
            Obtiene la versión del ensamblado de MCART.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MCART.Resources.RTInfo.RTAssembly">
            <summary>
            Obtiene la referencia del ensamblado de MCART
            </summary>
            <returns>The ssembly.</returns>
        </member>
        <member name="M:MCART.Resources.RTInfo.RTSupport(System.Reflection.Assembly)">
            <summary>
            Comprueba si el ensamblado es compatible con esta versión de MCART
            </summary>
            <returns>
            <c>true</c> si el ensamblado es compatible con esta versión de
            MCART, <c>false</c> si no lo es, y <c>null</c> si no se ha podido
            determinar la compatibilidad.
            </returns>
            <param name="asmbly">Ensamblado a comprobar.</param>
        </member>
        <member name="M:MCART.Resources.RTInfo.RTSupport``1">
            <summary>
            Comprueba si el plugin es compatible con esta versión de MCART
            </summary>
            <returns>
            <c>true</c> si el plugin es compatible con esta versión de MCART,
            <c>false</c> si no lo es, y <c>null</c> si no se ha podido
            determinar la compatibilidad.
            </returns>
            <typeparam name="T">
            Clase del <see cref="T:MCART.PluginSupport.IPlugin"/> a comprobar.
            </typeparam>
        </member>
        <member name="P:MCART.Resources.RTInfo.HelpPath">
            <summary>
            Obtiene la ruta de los archivos de ayuda.
            </summary>
            <value>La ruta de los archivos de ayuda.</value>
        </member>
        <member name="P:MCART.Resources.RTInfo.VersionString">
            <summary>
            Obtiene la versión de MCART como una cadena.
            </summary>
            <value>La versión de MCART como una cadena.</value>
        </member>
        <member name="T:MCART.Security.Password.PwDialogResult">
            <summary>
            Representa el resultado de un cuadro de diálogo
            <see cref="T:MCART.Forms.PasswordDialog"/>.
            </summary>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Result">
            <summary>
            Obtiene el resultado del cuadro de diálogo.
            </summary>
            <returns>
            Un <see cref="T:System.Windows.MessageBoxResult"/> que indica la acción realizada
            por el usuario.
            </returns>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Null">
            <summary>
            Constante. Resultado de evaluación nulo.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.PwDialogResult.#ctor(System.String,System.String,System.String,System.Windows.MessageBoxResult,MCART.Security.Password.PwEvalResult)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Security.Password.PwDialogResult"/>.
            </summary>
            <param name="us">
            Usuario del cuadro de diálogo.
            </param>
            <param name="pw">
            Contraseña introducida por el usuario.
            </param>
            <param name="hn">
            Indicio de contraseña introducida por el usuario.
            </param>
            <param name="re">
            Resultado del cuadro de diálogo.
            </param>
            <param name="ev">
            Resultado de la evaluación.
            </param>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Usr">
            <summary>
            Obtiene el usuario introducido en el 
            <see cref="T:MCART.Forms.PasswordDialog"/>.
            </summary>
            <returns>
            Si se muestra este diálogo con <see cref="F:MCART.Security.Password.PwMode.Usr"/>, se 
            devuelve el usuario introducido en el 
            <see cref="T:MCART.Forms.PasswordDialog"/>; de lo contrario se devuelve
            <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Pwd">
            <summary>
            Obtiene la contraseña que el usuario ha introducido.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> con la contraseña que el usuario ha 
            introducido.
            </returns>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Hint">
            <summary>
            Obtiene el indicio de contraseña introducido por el usuario.
            </summary>
            <returns>
            <see cref="F:System.String.Empty"/> si el cuadro se inicia con 
            <see cref="M:MCART.Forms.PasswordDialog.GetPassword(System.String,System.String,System.Boolean)"/>.
            Si se inicia con 
            <see cref="M:MCART.Forms.PasswordDialog.ChoosePassword(MCART.Security.Password.PwMode,MCART.Security.Password.PwEvaluator)"/>,
            se devuelve un <see cref="T:System.String"/> con el indicio de contraseña 
            que el usuario ha introducido.
            </returns>
        </member>
        <member name="P:MCART.Security.Password.PwDialogResult.Evaluation">
            <summary>
            Obtiene el resultado de la evaluación de la contraseña.
            </summary>
            <returns>
            Si se muestra este diálogo con <see cref="F:MCART.Security.Password.PwMode.Secur"/>, se
            devuelve el resultado de la evaluación de las reglas especificadas;
            de lo contrario se devuelve <see cref="P:MCART.Security.Password.PwEvalResult.Null"/>.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.PwDialogResult.Equals(System.Object)">
            <summary>
            Evalúa si esta instancia y <paramref name="obj"/> son 
            iguales.
            </summary>
            <param name="obj">Valor a comparar.</param>
            <returns>
            <c>true</c> si ambos objetos son iguales, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.PwDialogResult.GetHashCode">
            <summary>
            Obtiene el código hash de esta instancia.
            </summary>
            <returns>El código Hash que representa a esta instancia.</returns>
        </member>
        <member name="M:MCART.Security.Password.PwDialogResult.op_Equality(MCART.Security.Password.PwDialogResult,MCART.Security.Password.PwDialogResult)">
            <summary>
            Evalúa si <paramref name="left"/> y <paramref name="right"/> son 
            iguales.
            </summary>
            <param name="left">Valor a comparar.</param>
            <param name="right">Valor a comparar.</param>
            <returns>
            <c>true</c> si ambos objetos son iguales, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.PwDialogResult.op_Inequality(MCART.Security.Password.PwDialogResult,MCART.Security.Password.PwDialogResult)">
            <summary>
            Evalúa si <paramref name="left"/> y <paramref name="right"/> son 
            diferentes.
            </summary>
            <param name="left">Valor a comparar.</param>
            <param name="right">Valor a comparar.</param>
            <returns>
            <c>true</c> si los objetos son diferentes, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="T:MCART.Security.Password.PwMode">
            <summary>
            Configura el cuadro de contraseña al utilizar la función 
            <see cref="M:MCART.Forms.PasswordDialog.ChoosePassword(MCART.Security.Password.PwMode,MCART.Security.Password.PwEvaluator)"/>.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.JustConfirm">
            <summary>
            Únicamente confirmar
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.Hint">
            <summary>
            Mostrar cuadro de indicio
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.Secur">
            <summary>
            Mostrar indicador de seguridad
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.Both">
            <summary>
            Mostrar cuadro de indicio e indicador de seguridad
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.Usr">
            <summary>
            Mostrar cuadro de usuario
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.UsrHint">
            <summary>
            Mostrar cuadro de usuario y cuadro de indicio
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.UsrSecur">
            <summary>
            Mostrar cuadro de usuario e indicador de seguridad
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwMode.UsrBoth">
            <summary>
            Mostrar cuadro de usuario, cuadro de indicio e indicador de seguridad
            </summary>
        </member>
        <member name="T:MCART.Security.Password.PwEvalResult">
            <summary>
            Contiene información sobre el resultado de la evaluación de una
            contraseña.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalResult.Result">
            <summary>
            Resultado de la evaluación de la contraseña
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalResult.Critical">
            <summary>
            Si es <c>true</c>, la contraseña no continuará siendo evaluada, ya
            que es inválida.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalResult.Details">
            <summary>
            Detalles que el <see cref="T:MCART.Security.Password.PwEvaluator"/> ha colocado sobre la
            evaluación de la contraseña.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.PwEvalResult.#ctor(System.Single,System.String,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la estructura
            <see cref="T:MCART.Security.Password.PwEvalResult"/>.
            </summary>
            <param name="r">Resultado de la evaluación.</param>
            <param name="d">Detalles de la evaluación.</param>
            <param name="c">
            Criticalidad de la evaluación. Si se establece en <c>true</c>, la
            contraseña no seguirá siendo evaluada, ya que es inválida.
            </param>
        </member>
        <member name="P:MCART.Security.Password.PwEvalResult.Null">
            <summary>
            Obtiene un <see cref="T:MCART.Security.Password.PwEvalResult"/> nulo. Este campo es de sólo 
            lectura.
            </summary>
        </member>
        <member name="P:MCART.Security.Password.PwEvalResult.Fail">
            <summary>
            Obtiene un <see cref="T:MCART.Security.Password.PwEvalResult"/> fallido. Este campo es de
            sólo lectura.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.PwEvalResult.Equals(System.Object)">
            <summary>
            Evalúa si esta instancia y <paramref name="obj"/> son 
            iguales.
            </summary>
            <param name="obj">Valor a comparar.</param>
            <returns>
            <c>true</c> si ambos objetos son iguales, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.PwEvalResult.GetHashCode">
            <summary>
            Devuelve el código Hash para esta instancia.
            </summary>
            <returns>El código Hash que representa a esta instancia.</returns>
        </member>
        <member name="M:MCART.Security.Password.PwEvalResult.op_Equality(MCART.Security.Password.PwEvalResult,MCART.Security.Password.PwEvalResult)">
            <summary>
            Evalúa si <paramref name="left"/> y <paramref name="right"/> son 
            iguales.
            </summary>
            <param name="left">Valor a comparar.</param>
            <param name="right">Valor a comparar.</param>
            <returns>
            <c>true</c> si ambos objetos son iguales, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.PwEvalResult.op_Inequality(MCART.Security.Password.PwEvalResult,MCART.Security.Password.PwEvalResult)">
            <summary>
            Evalúa si <paramref name="left"/> y <paramref name="right"/> son 
            diferentes.
            </summary>
            <param name="left">Valor a comparar.</param>
            <param name="right">Valor a comparar.</param>
            <returns>
            <c>true</c> si los objetos son diferentes, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="T:MCART.Security.Password.Generators">
            <summary>
            Contiene funciones que generan contraseñas.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.Generators.GenPw(System.String,System.Int32)">
            <summary>
            Genera una contraseña.
            </summary>
            <returns>La contraseña.</returns>
            <param name="chars">Caracteres a utilizar.</param>
            <param name="l">Longitud de la contraseña.</param>
        </member>
        <member name="M:MCART.Security.Password.Generators.Safe(System.Int32)">
            <summary>
            Genera una contraseña segura.
            </summary>
            <returns>
            Una contraseña que incluye mayúsculas, minúsculas, números y
            símbolos, todos disponibles en el teclado inglés.
            </returns>
            <param name="length">
            Opcional. Longitud de la contraseña a generar. Si se omite, se
            generará una contraseña de 16 caracteres.
            </param>
        </member>
        <member name="M:MCART.Security.Password.Generators.VeryComplex(System.Int32)">
            <summary>
            Genera una contraseña muy compleja.
            </summary>
            <returns>
            Una contraseña que incluye mayúsculas, minúsculas, números y
            símbolos, todos disponibles en el teclado inglés internacional.
            </returns>
            <param name="length">
            Opcional. Longitud de la contraseña a generar. Si se omite, se
            generará una contraseña de 128 caracteres.
            </param>
        </member>
        <member name="M:MCART.Security.Password.Generators.Pin(System.Int32)">
            <summary>
            Genera un número de pin.
            </summary>
            <returns>Un número de pin de la longitud especificada.</returns>
            <param name="length">
            Opcional. Longitud del número de pin a generar. Si se omite, se
            generará un número de pin de 4 dígitos.
            </param>
        </member>
        <member name="T:MCART.Security.Password.PonderationLevel">
            <summary>
            Determina el nivel de ponderación a aplicar a un objeto <see cref="T:MCART.Security.Password.PwEvalRule"/>
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseLowest">
            <summary>
            Puntuación adversa más baja.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseLower">
            <summary>
            Puntuación adversa muy baja.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseLow">
            <summary>
            Puntuación adversa baja
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseNormal">
            <summary>
            Puntuación adversa normal.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseHigh">
            <summary>
            Puntuación adversa alta.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseHigher">
            <summary>
            Puntuación adversa muy alta.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.AdverseHighest">
            <summary>
            Puntuación adversa más alta.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.None">
            <summary>
            puntuación sin valor.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Lowest">
            <summary>
            Puntuación más baja.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Lower">
            <summary>
            Puntuación muy baja.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Low">
            <summary>
            Puntuación baja
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Normal">
            <summary>
            Puntuación normal.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.High">
            <summary>
            Puntuación alta.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Higher">
            <summary>
            Puntuación muy alta.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PonderationLevel.Highest">
            <summary>
            Puntuación más alta.
            </summary>
        </member>
        <member name="T:MCART.Security.Password.PwGenerator">
            <summary>
            Delegado que define una función que genera contraseñas.
            </summary>
        </member>
        <member name="T:MCART.Security.Password.PwEvalFunc">
            <summary>
            Delegado que define una función que evalúa contraseñas.
            </summary>
        </member>
        <member name="T:MCART.Security.Password.PwEvalRule">
            <summary>
            Define una regla de evaluación de contraseñas. Esta clase no puede heredarse.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalRule.Enable">
            <summary>
            Activa o desactiva esta regla de evaluación.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalRule.IsExtraPoints">
            <summary>
            Obtiene o establece un valor que determina si los puntos otorgados
            por esta regla serán parte del total, o si son puntos extra.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalRule.Name">
            <summary>
            Obtiene el nombre de esta regla de evaluación.
            </summary>
        </member>
        <member name="F:MCART.Security.Password.PwEvalRule.Description">
            <summary>
            Obtiene una descripción de esta regla de evaluación.
            </summary>
        </member>
        <member name="P:MCART.Security.Password.PwEvalRule.Ponderation">
            <summary>
            Obtiene o establece el valor de ponderación de la regla.
            </summary>
            <value>Valor de ponderación de la regla.</value>
        </member>
        <member name="M:MCART.Security.Password.PwEvalRule.Eval(System.String)">
            <summary>
            Ejecuta la evaluación de este <see cref="T:MCART.Security.Password.PwEvalRule"/>.
            </summary>
            <param name="pwToEval">Contraseña a evaluar.</param>
            <returns></returns>
        </member>
        <member name="M:MCART.Security.Password.PwEvalRule.#ctor(MCART.Security.Password.PwEvalFunc,System.String,MCART.Security.Password.PonderationLevel,System.String,System.Boolean,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Security.Password.PwEvalRule"/>.
            </summary>
            <param name="evalFunc">Función de evaluación.</param>
            <param name="name">Nombre de la regla.</param>
            <param name="ponderation">Ponderación a aplicar.</param>
            <param name="description">Descripción de la regla.</param>
            <param name="defaultEnable">
            Si se establece en <c>true</c>, la regla estará activa de forma
            predeterminada.
            </param>
            <param name="isExtra">
            Si se establece en <c>true</c>, el resultado de esta regla se
            tomará en cuenta como puntos extra.
            </param>
        </member>
        <member name="M:MCART.Security.Password.PwEvalRule.#ctor(MCART.Security.Password.PwEvalFunc,MCART.Attributes.NameAttribute,MCART.Security.Password.PonderationAttribute,MCART.Attributes.DescriptionAttribute,MCART.Security.Password.DefaultEnableAttribute,MCART.Security.Password.ExtraPointsAttribute)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Security.Password.PwEvalRule"/>.
            </summary>
            <param name="evalFunc">Función de evaluación.</param>
            <param name="name">Nombre de la regla.</param>
            <param name="ponderation">Ponderación a aplicar.</param>
            <param name="description">Descripción de la regla.</param>
            <param name="defaultEnable">
            Si se establece en <c>true</c>, la regla estará activa de forma
            predeterminada.
            </param>
            <param name="isExtra">
            Si se establece en <c>true</c>, el resultado de esta regla se
            tomará en cuenta como puntos extra.
            </param>
        </member>
        <member name="M:MCART.Security.Password.PwEvalRule.#ctor(MCART.Security.Password.PwEvalFunc)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Security.Password.PwEvalRule"/>.
            </summary>
            <param name="evalFunc">
            Función de evaluación. Debería contener todas sus propiedades
            indicadas como atributos.
            </param>
        </member>
        <member name="T:MCART.Security.Password.PonderationAttribute">
            <summary>
            Describe un nivel de ponderación.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.PonderationAttribute.#ctor(MCART.Security.Password.PonderationLevel)">
            <summary>
            Crea un nuevo atributo de <see cref="T:MCART.Security.Password.PonderationAttribute"/>.
            </summary>
            <param name="ponderation">
            Nivel de ponderación a aplicar al elemento.
            </param>
        </member>
        <member name="T:MCART.Security.Password.DefaultEnableAttribute">
            <summary>
            Indica si un elemento se acitva o no de forma predeterminada.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.DefaultEnableAttribute.#ctor(System.Boolean)">
            <summary>
            Crea un nuevo atributo de <see cref="T:MCART.Security.Password.DefaultEnableAttribute"/>.
            </summary>
            <param name="attrValue">Valor predeterminado de activación.</param>
        </member>
        <member name="T:MCART.Security.Password.ExtraPointsAttribute">
            <summary>
            Indica que un elemento representará un puntaje extra en la evaluación.
            </summary>
        </member>
        <member name="T:MCART.Security.Password.IPwEvaluator">
            <summary>
            Describe los métodos a implementar para crear clases que evalúen la
            seguridad de una contraseña.
            </summary>
        </member>
        <member name="P:MCART.Security.Password.IPwEvaluator.Rules">
            <summary>
            Obtiene una lista de las reglas a aplicar a este
            <see cref="T:MCART.Security.Password.IPwEvaluator"/> .
            </summary>
            <value>The rules.</value>
        </member>
        <member name="M:MCART.Security.Password.IPwEvaluator.Evaluate(System.String)">
            <summary>
            Evalúa una contraseña.
            </summary>
            <returns>
            La evaluación de la contraseña utilizando todas las reglas activas
            en <see cref="P:MCART.Security.Password.IPwEvaluator.Rules"/>.
            </returns>
            <param name="Pwd">Contraseña a evaluar.</param>
        </member>
        <member name="T:MCART.Security.Password.PwEvaluator">
            <summary>
            Define un evaluador de contraseñas. Esta clase no puede heredarse.
            </summary>
        </member>
        <member name="P:MCART.Security.Password.PwEvaluator.Rules">
            <summary>
            Obtiene un <see cref="T:System.Collections.Generic.List`1"/> con las reglas de
            evaluación activas en este objeto.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="M:MCART.Security.Password.PwEvaluator.Evaluate(System.String)">
            <summary>
            Evalúa la contraseña
            </summary>
            <returns>La evaluación de la contraseña.</returns>
            <param name="Pwd">Contraseña a evaluar.</param>
        </member>
        <member name="M:MCART.Security.Password.PwEvaluator.#ctor(MCART.Security.Password.PwEvalRule[])">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Security.Password.PwEvaluator"/>.
            </summary>
            <param name="evalRules">Reglas de evaluacióna incluir.</param>
        </member>
        <member name="T:MCART.Security.Password.RuleSets">
            <summary>
            Contiene un conjunto de reglas de evaluación de contraseñas.
            </summary>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.ContentionRuleFactory(System.String,System.String,System.String,MCART.Security.Password.PonderationLevel,System.Boolean,System.Boolean)">
            <summary>
            Fábrica de reglas de contención de caracteres.
            </summary>
            <returns>
            Un <see cref="T:MCART.Security.Password.PwEvalRule"/> fabricado con los parámetros deseados.
            </returns>
            <param name="a">Charset contenido.</param>
            <param name="b">Nombre de regla.</param>
            <param name="c">
            Opcional. Descripción. Si se omite, la regla tendrá una descripción
            predeterminada.
            </param>
            <param name="pn">
            Opcional. Ponderación. Si se omite, se asume 
            <see cref="F:MCART.Security.Password.PonderationLevel.Normal"/>.
            </param>
            <param name="de">
            Opcional. Si se establece en <c>true</c>, la regla se activa de
            forma predeterminada.
            </param>
            <param name="ie">
            Opcional. Si se establece en <c>true</c>, la regla se marcará como
            puntos adicionales.
            </param>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.CommonComplexityRuleSet">
            <summary>
            Establece un conjunto de reglas comunes de complejidad.
            </summary>
            <returns>
            Un arreglo de <see cref="T:MCART.Security.Password.PwEvalRule"/> con métodos comunes de
            evaluación de complejidad.
            </returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.NullEvalRule(MCART.Security.Password.PonderationLevel)">
            <summary>
            Crea una regla nula especial para ayudar a balancear los puntajes de evaluación.
            </summary>
            <returns>Regla de evaluación que devuelve valores constantes.</returns>
            <param name="ponderation">Ponderation.</param>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwLengthEvalRule(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Crea una regla de longitud de contraseña.
            </summary>
            <returns>Regla de evaluación que verifica la longitud de una contraseña.</returns>
            <param name="minLength">Minimum length.</param>
            <param name="idealLength">Ideal length.</param>
            <param name="excessiveLength">Excessive length.</param>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwUcaseEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene mayúsculas.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwLcaseEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene minúsculas.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwNumbersEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene números.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwSymbolsEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene símbolos.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwLatinEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene caracteres latinos.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwOtherSymbsEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene caracteres latinos.
            </summary>
            <returns>The ucase eval rule.</returns>
        </member>
        <member name="M:MCART.Security.Password.RuleSets.PwOtherUTFEvalRule">
            <summary>
            Crea una nueva regla que comprueba si la contraseña contiene otros
            caracteres Unicode que no están disponibles en el teclado Inglés
            Internacional, y en teoría en ningún otro teclado estándar.
            </summary>
            <returns>The other UTFE value rule.</returns>
        </member>
        <member name="T:MCART.Security.Encryption.IEasyCrypto">
            <summary>
            Describe lso métodos básicos para implementar un mecanismo simple de
            encriptado.
            </summary>
        </member>
        <member name="M:MCART.Security.Encryption.IEasyCrypto.Encrypt(System.String)">
            <summary>
            Encripta el texto especificado.
            </summary>
            <returns>
            Un arreglo de <see cref="T:System.Byte"/> que corresponde a 
            <paramref name="txt"/> luego de ser encriptado.
            </returns>
            <param name="txt">Texto a encriptar.</param>
        </member>
        <member name="M:MCART.Security.Encryption.IEasyCrypto.Decrypt(System.Byte[])">
            <summary>
            Descifra el mensaje encriptado especificado.
            </summary>
            <returns>
            Un <see cref="T:System.String"/> que corresponde al resultado de descifrar
            <paramref name="enc"/>.</returns>
            <param name="enc">Bytes de información encriptada.</param>
        </member>
        <member name="M:MCART.Security.Encryption.IEasyCrypto.Init(System.String,System.Byte[])">
            <summary>
            Inicializa la instancia del motor de encriptado utilizando la
            contraseña y el vector de inicialización especificados.
            </summary>
            <param name="pwd">Contraseña a utilizar.</param>
            <param name="IV">Vector de inicialización a utilizar.</param>
        </member>
        <member name="T:MCART.Security.Encryption.IEasyCryptoPlugin">
            <summary>
            Relaciona las interfaces de <see cref="T:MCART.Security.Encryption.IEasyCrypto"/> y 
            <see cref="T:MCART.PluginSupport.IPlugin"/> para crear un plugin compatible con MCART.
            </summary>
        </member>
        <member name="T:MCART.Security.Encryption.ICryptTransformPlugin">
            <summary>
            Relaciona las interfaces de <see cref="T:System.Security.Cryptography.ICryptoTransform"/> y 
            <see cref="T:MCART.PluginSupport.IPlugin"/> para crear un plugin compatible con MCART.
            </summary>
        </member>
        <member name="T:MCART.Security.Encryption.ICspAsymmetricAlgorithmPlugin">
            <summary>
            Relaciona las interfaces de <see cref="T:System.Security.Cryptography.ICspAsymmetricAlgorithm"/> y 
            <see cref="T:MCART.PluginSupport.IPlugin"/> para crear un plugin compatible con MCART.
            </summary>
        </member>
        <member name="T:MCART.Security.Encryption.EasyCrypto">
            <summary>
            Permite una implementación más sencilla de un
            <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> evitando algunas capas de abstracción.
            </summary>
        </member>
        <member name="M:MCART.Security.Encryption.EasyCrypto.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Security.Encryption.EasyCrypto"/>.
            </summary>
            <param name="algorithm">
            <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> a utilizar.
            </param>
        </member>
        <member name="M:MCART.Security.Encryption.EasyCrypto.Init(System.String,System.Byte[])">
            <summary>
            Inicializa esta instancia de la clase <see cref="T:MCART.Security.Encryption.EasyCrypto"/>.
            </summary>
            <param name="Pwd">Contraseña a utilizar.</param>
            <param name="IV">Vector de inicialización a utilizar.</param>
        </member>
        <member name="M:MCART.Security.Encryption.EasyCrypto.Decrypt(System.Byte[])">
            <summary>
            Descrifra un arreglo de <see cref="T:System.Byte"/>.
            </summary>
            <param name="CryptBytes">Bytes a descrifrar.</param>
            <returns>Una cadena con el texto descifrado.</returns>
        </member>
        <member name="M:MCART.Security.Encryption.EasyCrypto.Encrypt(System.String)">
            <summary>
            Encripta una cadena.
            </summary>
            <param name="TextToEncrypt">Cadena a encriptar.</param>
            <returns>Un arreglo de <see cref="T:System.Byte"/> con el mensaje cifrado.</returns>
        </member>
        <member name="T:MCART.Security.Checksum.IEasyChecksum">
            <summary>
            Describe los métodos básicos a implementar por un mecanismo de cálculo
            de checksum.
            </summary>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.Compute(System.String)">
            <summary>
            Ejecuta la transformación del algoritmo y devuelve el Checksum/Hash
            de los datos como una colección de <see cref="T:System.Byte"/>.
            </summary>
            <param name="X">Cadena de entrada.</param>
            <returns>
            Una colección de <see cref="T:System.Byte"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.ComputeAsync(System.String)">
            <summary>
            Ejecuta la transformación del algoritmo de forma asíncrona y
            devuelve el Checksum/Hash de los datos como una colección de
            <see cref="T:System.Byte"/>.
            </summary>
            <param name="X">Cadena de entrada.</param>
            <returns>Un <see cref="T:System.Threading.Tasks.Task`1"/> correspondiente al resultado
            de ejecutar el algoritmo con la información provista.</returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.Compute(System.IO.TextReader)">
            <summary>
            Ejecuta la transformación del algoritmo y devuelve el Checksum/Hash
            de los datos como una colección de <see cref="T:System.Byte"/>.
            </summary>
            <param name="X"><see cref="T:System.IO.TextReader"/> de entrada.</param>
            <returns>
            Una colección de <see cref="T:System.Byte"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.ComputeAsync(System.IO.TextReader)">
            <summary>
            Ejecuta la transformación del algoritmo de forma asíncrona y
            devuelve el Checksum/Hash de los datos como una colección de
            <see cref="T:System.Byte"/>.
            </summary>
            <param name="X"><see cref="T:System.IO.TextReader"/> de entrada.</param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task`1"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.Compute(System.Byte[])">
            <summary>
            Ejecuta la transformación del algoritmo y devuelve el Checksum/Hash
            de los datos como una colección de <see cref="T:System.Byte"/>.
            </summary>
            <param name="X">Arreglo de <see cref="T:System.Byte"/> de entrada.</param>
            <returns>
            Una colección de <see cref="T:System.Byte"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.ComputeAsync(System.Byte[])">
            <summary>
            Ejecuta la transformación del algoritmo de forma asíncrona y
            devuelve el Checksum / Hash de los datos como una colección de
            <see cref="T:System.Byte"/>.
            </summary>
            <param name="X">Arreglo de <see cref="T:System.Byte"/> de entrada.</param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task`1"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.Compute(System.IO.Stream)">
            <summary>
            Ejecuta la transformación del algoritmo y devuelve el Checksum/Hash
            de los datos como una colección de <see cref="T:System.Byte"/>.
            </summary>
            <param name="X"><see cref="T:System.IO.Stream"/> de entrada.</param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task`1"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="M:MCART.Security.Checksum.IEasyChecksum.ComputeAsync(System.IO.Stream)">
            <summary>
            Ejecuta la transformación del algoritmo de forma asíncrona y
            devuelve el Checksum / Hash de los datos como una colección de
            <see cref="T:System.Byte"/>.
            </summary>
            <param name="X"><see cref="T:System.IO.Stream"/> de entrada.</param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task`1"/> correspondiente al resultado de
            ejecutar el algoritmo con la información provista.
            </returns>
        </member>
        <member name="T:MCART.Security.Checksum.ChecksumPlugin">
            <summary>
            Define un <see cref="T:MCART.PluginSupport.Plugin"/> que implementa la interfaz
            <see cref="T:MCART.Security.Checksum.IEasyChecksum"/>.
            </summary>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.Compute(System.Byte[])">
            <summary>
            Calcula una suma de verificación sobre un arreglo de bytes.
            </summary>
            <param name="X">Arreglo de bytes a computar.</param>
            <returns>Un arreglo de bytes con la suma de verificación.</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.Compute(System.IO.Stream)">
            <summary>
            Calcula una suma de verificación sobre un <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="X">
            <see cref="T:System.IO.Stream"/> con la información a computar.
            </param>
            <returns>Un arreglo de bytes con la suma de verificación.</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.Compute(System.IO.TextReader)">
            <summary>
            Calcula una suma de verificación sobre un <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="X">
            <see cref="T:System.IO.TextReader"/> con la información a computar.
            </param>
            <returns>Un arreglo de bytes con la suma de verificación.</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.Compute(System.String)">
            <summary>
            Calcula una suma de verificación sobre una cadena
            </summary>
            <param name="X">Cadena a computar</param>
            <returns>Un arreglo de bytes con la suma de verificación</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.ComputeAsync(System.Byte[])">
            <summary>
            Calcula una suma de verificación de forma asíncrona sobre un arreglo de bytes
            </summary>
            <param name="X">Arreglo de bytes a computar</param>
            <returns>Un arreglo de bytes con la suma de verificación</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.ComputeAsync(System.IO.Stream)">
            <summary>
            Calcula una suma de verificación de forma asíncrona sobre un <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="X"><see cref="T:System.IO.Stream"/> con la información a computar</param>
            <returns>Un arreglo de bytes con la suma de verificación</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.ComputeAsync(System.IO.TextReader)">
            <summary>
            Calcula una suma de verificación de forma asíncrona sobre un <see cref="T:System.IO.TextReader"/>
            </summary>
            <param name="X"><see cref="T:System.IO.TextReader"/> con la información a computar</param>
            <returns>Un arreglo de bytes con la suma de verificación</returns>
        </member>
        <member name="M:MCART.Security.Checksum.ChecksumPlugin.ComputeAsync(System.String)">
            <summary>
            Calcula una suma de verificación de forma asíncrona sobre una cadena
            </summary>
            <param name="X">Cadena a computar</param>
            <returns>Un arreglo de bytes con la suma de verificación</returns>
        </member>
        <member name="T:MCART.Types.Color">
            <summary>
            Estructura universal que describe un color en sus componentes alfa,
            rojo, verde y azul.
            </summary>
            <summary>
            Estructura universal que describe un color en sus componentes alfa,
            rojo, verde y azul.
            </summary>
        </member>
        <member name="M:MCART.Types.Color.op_Implicit(MCART.Types.Color)~System.Windows.Media.Color">
            <summary>
            Convierte implícitamente una estructura <see cref="T:MCART.Types.Color"/> en un
            <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="c"><see cref="T:MCART.Types.Color"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Color.op_Implicit(System.Windows.Media.Color)~MCART.Types.Color">
            <summary>
            Convierte implícitamente una estructura
            <see cref="T:System.Windows.Media.Color"/> en un <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="c">
            <see cref="T:System.Windows.Media.Color"/> a convertir.
            </param>
        </member>
        <member name="M:MCART.Types.Color.op_Implicit(MCART.Types.Color)~System.Windows.Media.Brush">
            <summary>
            Convierte implícitamente una estructura <see cref="T:MCART.Types.Color"/> en un
            <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
            <param name="c"><see cref="T:MCART.Types.Color"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Color.op_Implicit(MCART.Types.Color)~System.Drawing.Color">
            <summary>
            Convierte implícitamente una estructura <see cref="T:MCART.Types.Color"/> en un
            un <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="c"><see cref="T:MCART.Types.Color"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Color.op_Implicit(System.Drawing.Color)~MCART.Types.Color">
            <summary>
            Convierte implícitamente una estructura
            <see cref="T:System.Drawing.Color"/> en un <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="c">
            <see cref="T:System.Drawing.Color"/> a convertir.
            </param>
        </member>
        <member name="M:MCART.Types.Color.BlendHeat(System.Single)">
            <summary>
            Mezcla un color de temperatura basado en el porcentaje.
            </summary>
            <returns>
            El color qaue representa la temperatura del porcentaje.
            </returns>
            <param name="x">
            Valor porcentual utilizado para calcular la temperatura.
            </param>
        </member>
        <member name="M:MCART.Types.Color.BlendHealth(System.Single)">
            <summary>
            Mezcla un color de salud basado en el porcentaje.
            </summary>
            <returns>El color qaue representa la salud del porcentaje.</returns>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:MCART.Types.Color.op_Addition(MCART.Types.Color,MCART.Types.Color)">
            <summary>
            Adds a <see cref="T:MCART.Types.Color"/> to a <see cref="T:MCART.Types.Color"/>, yielding a new
            <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="left">The first <see cref="T:MCART.Types.Color"/> to add.</param>
            <param name="right">The second <see cref="T:MCART.Types.Color"/> to add.</param>
            <returns>The <see cref="T:MCART.Types.Color"/> that is the sum of the values of 
            <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:MCART.Types.Color.op_Subtraction(MCART.Types.Color,MCART.Types.Color)">
            <summary>
            Sustrae un <see cref="T:MCART.Types.Color"/> de un <see cref="T:MCART.Types.Color"/>, dando
            como resultado un <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="left">
            The <see cref="T:MCART.Types.Color"/> to subtract from (the minuend).
            </param>
            <param name="right">
            The <see cref="T:MCART.Types.Color"/> to subtract (the subtrahend).
            </param>
            <returns>
            The <see cref="T:MCART.Types.Color"/> that is <paramref name="left"/> minus
            <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.op_Multiply(MCART.Types.Color,System.Single)">
            <summary>
            Computes the product of <paramref name="left"/> and 
            <paramref name="right"/>, yielding a new <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="left">The <see cref="T:MCART.Types.Color"/> to multiply.</param>
            <param name="right">The <see cref="T:System.Single"/> to multiply by.</param>
            <returns>
            The <see cref="T:MCART.Types.Color"/> that is <paramref name="left"/> * 
            <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.op_Division(MCART.Types.Color,MCART.Types.Color)">
            <summary>
            Realiza una mezcla entre los colores especificados.
            </summary>
            <param name="left">El primer <see cref="T:MCART.Types.Color"/> a mezclar.</param>
            <param name="right">
            El segundo <see cref="T:MCART.Types.Color"/> a mezclar.
            </param>
            <returns>Una mezcla entre los colores <paramref name="left"/> y 
            <paramref name="right"/>.</returns>
        </member>
        <member name="M:MCART.Types.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Inicializa una nueva instancia de la esctructura 
            <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="R">Canal rojo.</param>
            <param name="G">Canal verde.</param>
            <param name="B">Canal azul.</param>
            <param name="A">
            Parámetro opcional. Canal alfa. Si se omite, el color tendrá una 
            opacidad de 100%.
            </param>
        </member>
        <member name="M:MCART.Types.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Inicializa una nueva instancia de la esctructura 
            <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="R">Canal rojo.</param>
            <param name="G">Canal verde.</param>
            <param name="B">Canal azul.</param>
            <param name="A">
            Parámetro opcional. Canal alfa. Si se omite, el color tendrá una 
            opacidad de 100%.
            </param>
        </member>
        <member name="P:MCART.Types.Color.R">
            <summary>
            Obtiene o establece el valor RGB del canal rojo del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.G">
            <summary>
            Obtiene o establece el valor RGB del canal verde del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.B">
            <summary>
            Obtiene o establece el valor RGB del canal azul del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.A">
            <summary>
            Obtiene o establece el valor RGB del canal alfa del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.ScR">
            <summary>
            Obtiene o establece el valor ScRGB del canal rojo del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.ScG">
            <summary>
            Obtiene o establece el valor ScRGB del canal verde del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.ScB">
            <summary>
            Obtiene o establece el valor ScRGB del canal azul del color.
            </summary>
        </member>
        <member name="P:MCART.Types.Color.ScA">
            <summary>
            Obtiene o establece el valor ScRGB del canal alfa del color.
            </summary>
        </member>
        <member name="M:MCART.Types.Color.Equals(MCART.Types.Color)">
            <summary>
            Determines whether the specified <see cref="T:MCART.Types.Color"/> is equal to the
            current <see cref="T:MCART.Types.Color"/>.
            </summary>
            <param name="other">
            The <see cref="T:MCART.Types.Color"/> to compare with the current 
            <see cref="T:MCART.Types.Color"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:MCART.Types.Color"/> is equal to the
            current <see cref="T:MCART.Types.Color"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current 
            <see cref="T:MCART.Types.Color"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current 
            <see cref="T:MCART.Types.Color"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current 
            <see cref="T:MCART.Types.Color"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current 
            <see cref="T:MCART.Types.Color"/>.
            </returns>
            <param name="format">Format.</param>
            <param name="formatProvider">Format provider.</param>
        </member>
        <member name="M:MCART.Types.Color.ToInt24">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Int32"/>, sin el canal alfa.
            </summary>
            <returns>
            Un <see cref="T:System.Int32"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGB de 24 bits.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToInt32">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Int32"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Int32"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGBA de 32 bits.
            </returns>
        </member>
        <member name="F:MCART.Types.Color.ep">
            <summary>
            constante auxiliar de redondeo para las funciones de conversión.
            </summary>
        </member>
        <member name="M:MCART.Types.Color.ToShort">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Int16"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Int16"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGBA de 16 bits.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToShort565">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Int16"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Int16"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGB 5-6-5 de 16 bits.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToByte">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Byte"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Byte"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGBA de 8 bits.
            </returns>
        </member>
        <member name="M:MCART.Types.Color.ToVGAByte">
            <summary>
            Convierte este <see cref="T:MCART.Types.Color"/> en su representación como un
            <see cref="T:System.Byte"/> de atributo VGA.
            </summary>
            <returns>
            Un <see cref="T:System.Byte"/> con la representación binaria de este
            <see cref="T:MCART.Types.Color"/>, en formato RGB de 4 bits.
            </returns>
        </member>
        <member name="T:MCART.Types.Point">
            <summary>
            Tipo universal para un conjunto de coordenadas bidimensionales.
            </summary>
            <remarks>
            Esta estructura se declara como parcial, para permitir a cada
            implementación de MCART definir métodos para convertir a la clase
            correspondiente para los diferentes tipos de UI disponibles.
            </remarks>
            <summary>
            Tipo universal para un conjunto de coordenadas bidimensionales.
            </summary>
            <remarks>
            Esta estructura se declara como parcial, para permitir a cada
            implementación de MCART definir métodos para convertir a la clase
            correspondiente para los diferentes tipos de UI disponibles.
            </remarks>
        </member>
        <member name="M:MCART.Types.Point.op_Implicit(MCART.Types.Point)~System.Windows.Point">
            <summary>
            Convierte implícitamente un <see cref="T:MCART.Types.Point"/> en un
            <see cref="T:System.Windows.Point"/>.
            </summary>
            <param name="x"><see cref="T:MCART.Types.Point"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Point.op_Implicit(System.Windows.Point)~MCART.Types.Point">
            <summary>
            Convierte implícitamente un <see cref="T:System.Windows.Point"/> en 
            un <see cref="T:MCART.Types.Point"/>.
            </summary>
            <param name="x"><see cref="T:System.Windows.Point"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Point.op_Implicit(MCART.Types.Point)~System.Drawing.Point">
            <summary>
            Convierte implícitamente un <see cref="T:MCART.Types.Point"/> en un
            <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="x"><see cref="T:MCART.Types.Point"/> a convertir.</param>
        </member>
        <member name="M:MCART.Types.Point.op_Implicit(System.Drawing.Point)~MCART.Types.Point">
            <summary>
            Convierte implícitamente un <see cref="T:System.Drawing.Point"/> en
            un <see cref="T:MCART.Types.Point"/>.
            </summary>
            <param name="x">
            <see cref="T:System.Drawing.Point"/> a convertir.
            </param>
        </member>
        <member name="F:MCART.Types.Point.X">
            <summary>
            Coordenada X.
            </summary>
        </member>
        <member name="F:MCART.Types.Point.Y">
            <summary>
            Coordenada Y.
            </summary>
        </member>
        <member name="M:MCART.Types.Point.#ctor(System.Double,System.Double)">
            <summary>
            Inicializa una nueva instancia de la estructura <see cref="T:MCART.Math.Functions.Point"/>.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:MCART.Types.Point.FitsInBox(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Determina si el punto se encuentra dentro del rectángulo formado por
            los puntos especificados.
            </summary>
            <returns>
            <c>true</c> si el punto se encuentra dentro del rectángulo
            formado; de lo contrario, <c>false</c>.
            </returns>
            <param name="p1">Punto 1.</param>
            <param name="p2">Punto 2.</param>
        </member>
        <member name="M:MCART.Types.Point.FitsInBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determina si el punto se encuentra dentro del rectángulo formado por
            las coordenadas especificadas.
            </summary>
            <returns>
            <c>true</c> si el punto se encuentra dentro del rectángulo
            formado; de lo contrario, <c>false</c>.
            </returns>
            <param name="x1">La primer coordenada x.</param>
            <param name="y1">La primer coordenada y.</param>
            <param name="x2">La segunda coordenada x.</param>
            <param name="y2">La segunda coordenada y.</param>
        </member>
        <member name="M:MCART.Types.Point.Magnitude">
            <summary>
            Calcula la magnitud de las coordenadas.
            </summary>
            <returns>
            La magnitud resultante entre el punto y el orígen.
            </returns>
        </member>
        <member name="M:MCART.Types.Point.Magnitude(MCART.Types.Point)">
            <summary>
            Calcula la magnitud de las coordenadas desde el punto
            especificado.
            </summary>
            <returns>La magnitud resultante entre ambos puntos.</returns>
            <param name="fromPoint">Punto de referencia para calcular la
            magnitud.</param>
        </member>
        <member name="M:MCART.Types.Point.Magnitude(System.Double,System.Double)">
            <summary>
            Calcula la magnitud de las coordenadas desde el punto
            especificado.
            </summary>
            <returns>
            La magnitud resultante entre el punto y las coordenadas
            especificadas.
            </returns>
            <param name="fromX">Coordenada X de orígen.</param>
            <param name="fromY">Coordenada Y de orígen.</param>
        </member>
        <member name="M:MCART.Types.Point.Angle">
            <summary>
            Calcula el ángulo formado por la línea que intersecta el orígen y
            este <see cref="T:MCART.Types.Point"/> contra el eje horizontal X.
            </summary>
            <returns>El ángulo calculado.</returns>
        </member>
        <member name="P:MCART.Types.Point.Origin">
            <summary>
            Obtiene un punto en el orígen. Este campo es de solo lectura.
            </summary>
            <value>
            Un <see cref="T:MCART.Types.Point"/> con sus coordenadas en el orígen.
            </value>
        </member>
        <member name="P:MCART.Types.Point.Nowhere">
            <summary>
            Obtiene un punto que no representa ninguna posición. Este campo es
            de solo lectura.
            </summary>
            <value>The nowhere.</value>
        </member>
        <member name="M:MCART.Types.Point.op_Addition(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Realiza una operación de suma sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La suma de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Addition(MCART.Types.Point,System.Double)">
            <summary>
            Realiza una operación de suma sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de suma.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point"/> cuyos vectores son la suma de los
            vectores originales + <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Subtraction(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Realiza una operación de resta sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La resta de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Subtraction(MCART.Types.Point,System.Double)">
            <summary>
            Realiza una operación de resta sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de resta.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point"/> cuyos vectores son la resta de los
            vectores originales - <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Multiply(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Realiza una operación de multiplicación sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La multiplicación de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Multiply(MCART.Types.Point,System.Double)">
            <summary>
            Realiza una operación de multiplicación sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de multiplicación.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point"/> cuyos vectores son la multiplicación
            de los vectores originales * <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Division(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Realiza una operación de división sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La división de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Division(MCART.Types.Point,System.Double)">
            <summary>
            Realiza una operación de división sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de división.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point"/> cuyos vectores son la división de los
            vectores originales / <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Modulus(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Realiza una operación de resíduo sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>El resíduo de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Modulus(MCART.Types.Point,System.Double)">
            <summary>
            Realiza una operación de resíduo sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de resíduo.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point"/> cuyos vectores son el resíduo de los
            vectores originales % <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Increment(MCART.Types.Point)">
            <summary>
            Incrementa en 1 los vectores del punto.
            </summary>
            <param name="p">Punto a incrementar.</param>
            <returns>Un punto con sus vectores incrementados en 1.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Decrement(MCART.Types.Point)">
            <summary>
            Decrementa en 1 los vectores del punto.
            </summary>
            <param name="p">Punto a decrementar.</param>
            <returns>Un punto con sus vectores decrementados en 1.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_UnaryPlus(MCART.Types.Point)">
            <summary>
            Convierte a positivos los vectores del punto.
            </summary>
            <param name="p">Punto a operar.</param>
            <returns>Un punto con sus vectores positivos.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_UnaryNegation(MCART.Types.Point)">
            <summary>
            Invierte el signo de los vectores del punto.
            </summary>
            <param name="p">Punto a operar.</param>
            <returns>Un punto con el signo de sus vectores invertido.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Equality(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Compara la igualdad de los vectores de los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>
            <c>true</c> si todos los vectores de ambos puntos son iguales;
            de lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Types.Point.op_Inequality(MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Compara la diferencia de los vectores de los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>
            <c>true</c> si los vectores de ambos puntos son diferentes;  de lo
            contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Types.Point.Equals(System.Object)">
            <summary>
            Indica si esta instancia y un objeto especificado son iguales.
            </summary>
            <param name="obj">
            Objeto que se va a compara con la instancia actual.
            </param>
            <returns>
            <c>true</c> si esta instancia y <paramref name="obj"/> son iguales;
            de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.Point.GetHashCode">
            <summary>
            Devuelve el código Hash de esta instancia.
            </summary>
            <returns>El código Hash de esta instancia.</returns>
        </member>
        <member name="M:MCART.Types.Point.ToString">
            <summary>
            Convierte este objeto en su representación como una cadena.
            </summary>
            <returns>
            Una representación en forma de <see cref="T:System.String"/> de este objeto.
            </returns>
        </member>
        <member name="M:MCART.Types.Point.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convierte este objeto en su representación como una cadena.
            </summary>
            <param name="format">Formato a utilizar.</param>
            <param name="formatProvider">Parámetro opcional.
            Proveedor de formato de la cultura a utilizar para dar formato a
            la representación como una cadena de este objeto. Si se omite,
            se utilizará <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>
            Una representación en forma de <see cref="T:System.String"/> de este objeto.
            </returns>
        </member>
        <member name="T:MCART.Types.TaskReporter.TaskReporterControl">
            <summary>
            Clase base para los controles de Windows Presentation Framework
            que pueden utilizarse para mostrar el progreso de una tarea por medio
            de la interfaz <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/>.
            </summary>
            <summary>
            Definición parcial de una clase base que permite crear controles,
            Widgets o componentes para las distintas plataformas de MCART, que
            permite reportar visualmente el progreso de una tarea.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.CancelPendingPropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.CancelPending"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.OnDutyPropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.OnDuty"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.StoppablePropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.Stoppable"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.TStartPropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.TStart"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.TimedOutPropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.TimedOut"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.CurrentProgressPropertyKey">
            <summary>
            Llave de lectura/escritura para la propiedad de dependencia de sólo
            lectura <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.CurrentProgress"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.CancelPendingProperty">
            <summary>
            Identifica a la propiedad de dependencia de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.CancelPending"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.CurrentProgressProperty">
            <summary>
            Identifica a la propiedad de dependencia de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.CurrentProgress"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.OnDutyProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.OnDuty"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.StoppableProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.Stoppable"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.TStartProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura 
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.TStart"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.TaskReporterControl.TimedOutProperty">
            <summary>
            Identifica la propiedad de dependencia de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.TimedOut"/>.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.CancelPending">
            <summary>
            Indica si hay pendiente una solicitud para cancelar la tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.CurrentProgress">
            <summary>
            Indica el progreso actual de una tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.OnDuty">
            <summary>
            Indica si se está ejecutando una tarea actualmente.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.Stoppable">
            <summary>
            Indica si la tarea puede ser detenida.
            </summary>
            <returns>
            <c>true</c> si la tarea puede ser detenida, <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.TimedOut">
            <summary>
            Indica si ya se ha agotado el tiempo de espera de la tarea.
            </summary>
            <returns>
            <c>true</c> si ya se ha agotado el tiempo de espera, <c>false</c>
            en caso contrario.
            </returns>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.TStart">
            <summary>
            Obtiene el momento de inicio de la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.RaiseCancelPending">
            <summary>
            Registra una solicitud para cancelar la tarea actual.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.TimeLeft">
            <summary>
            Indica el tiempo de espera disponible.
            </summary>
            <returns>
            El tiempo de espera disponible.
            </returns>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterControl.Timeout">
            <summary>
            Obtiene o establece el tiempo de espera total para la tarea actual.
            </summary>
            <returns>
            El tiempo de espera total establecido para la tarea actual.
            </returns>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.CancelRequested">
            <summary>
            Se produce cuando se ha solicitado la detención de la tarea.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.Begun">
            <summary>
            Se produce cuando una tarea se ha iniciado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.Reporting">
            <summary>
            Se produce cuando la tarea desea reportar su estado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.Ended">
            <summary>
            Se produce cuando una tarea finalizó correctamente.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.Stopped">
            <summary>
            Se produce cuando una tarea es cancelada.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.Error">
            <summary>
            Se produce cuando una tarea indica que finalizó con error.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterControl.TaskTimeout">
            <summary>
            Se produce cuando una tarea ha alcanzado el límite del tiempo de
            espera establecido.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.OnBegin(System.Boolean)">
            <summary>
            Modifica al control para pasar a un estado de 'Ocupado'
            </summary>
            <param name="stoppable">
            Indica si la tarea es detenible.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.OnBusy(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Actualiza el estado del control basado en el estado de una tarea.
            </summary>
            <param name="e">
            Estado reportado por la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.OnReady(System.String)">
            <summary>
            Modifica al control para pasar a un estado de 'Listo'
            </summary>
            <param name="msg">
            Parámetro opcional. Mensaje a mostrar en el control. Es posible que
            algunos controles no implementen estados textuales, en cuyo caso el
            argumento será ignorado.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Begin">
            <summary>
            Indica que una tarea se ha iniciado. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Begin(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea se ha iniciado. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Begun"/>.
            </summary>
            <param name="timeout">
            Indica el tiempo total de espera antes de generar el evento
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.TaskTimeout"/>.
            </param>
            <param name="genTOutEx">
            Parámetro opcional. Si es <c>true</c>, se generará un 
            <see cref="T:System.TimeoutException"/> al agotarse el tiempo de espera 
            especificado durante una tarea. Si se omite, o se establece en
            <c>false</c>, no se generará la excepción. El evento
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.TaskTimeout"/> se genera indistintamente de este valor.
            </param>
            <remarks>
            Para que una tarea pueda detenerse, ésta debe monitorear el valor
            de <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.CancelPending"/> por cada vuelta del ciclo, y tomar
            las acciones necesarias para finalizar. Opcionalmente puede
            manejarse la detención de la tarea por medio del evento
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.CancelRequested"/>.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.BeginNonStop">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado. Genera el
            evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.BeginNonStop(System.TimeSpan,System.Boolean)">
            <summary>
            Marca el inicio de una tarea que no se puede detener. Genera el
            evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Begun"/>.
            </summary>
            <param name="timeout">
            Indica el tiempo total de espera antes de generar el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.TaskTimeout"/>.
            </param>
            <param name="genTOutEx">Parámetro opcional. un valor <c>true</c> provocará una excepción
            <see cref="T:System.TimeoutException"/> además del evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.TaskTimeout"/>. Si se omite, o se establece en
            <c>false</c>, no se generará la excepción.</param>
            <remarks>
            Al iniciar una tarea con este método, la tarea no se podrá
            detener ni se mostrará la interfaz para detenerla.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.End">
            <summary>
            Marca el final de una tarea. Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Ended"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.EndWithError(System.Exception)">
            <summary>
            Indica que la tarea finalizó con un error. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Error"/>.
            </summary>
            <param name="ex">
            <see cref="T:System.Exception"/> que causó la finalización de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.For(System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo iniciará el contador en 0, y
            realizará incrementos de 1 por cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.For(System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo realizará incrementos de 1 por
            cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado 
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incrmento del contador por cada paso.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo <c>For Each</c> determinado por el delegado
            <paramref name="forEachAct"/>.
            </summary>
            <typeparam name="T">Tipo de la colección del ciclo.</typeparam>
            <param name="collection">Colección del ciclo.</param>
            <param name="forEachAct">Acción a ejecutar.</param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Reporta el estado de la tarea actual. Genera el evento
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Reporting"/> con la información provista sobre el
            progreso de la tarea.
            </summary>
            <param name="e">Información adicional del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Report(System.String)">
            <summary>
            Reporta el estado de la tarea actual. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Reporting"/> con la información provista sobre el
            progreso de la tarea.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Reporta el estado de la tarea actual. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Reporting"/> con la información provista sobre el
            progreso de la tarea.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.ResetTimeout">
            <summary>
            Reinicia el contador de tiempo de espera durante una tarea.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce cuando no se está ejecutando una tarea (el valor de
            <see cref="P:MCART.Types.TaskReporter.TaskReporterControl.OnDuty"/> es <c>false</c>).</exception>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Stopped"/>.
            </summary>
            <param name="e">
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/> con información del progreso de la
            tarea al momento de la detención.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Stopped"/>.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterControl.Stop(System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterControl.Stopped"/>.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ForAction">
            <summary>
            Define un delegado que ejecutará una acción cíclica con la estructura
            de un ciclo <c>for</c>.
            </summary>
            <param name="counter">Contador de iteración actual.</param>
            <param name="tskReporter">
            Objeto <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> por medio del cual una tarea podrá
            reportar su progreso.
            </param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ForEachAction`1">
            <summary>
            Define un delegado que ejecutará una acción cíclica con la estructura
            de un ciclo <c>foreach</c>.
            </summary>
            <param name="item">Objeto de iteración actual.</param>
            <param name="tskReporter">
            Objeto <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> por medio del cual una tarea podrá
            reportar su progreso.
            </param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ProgressEventArgs">
            <summary>
            Contiene información del evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.ProgressEventArgs.Progress">
            <summary>
            Porcentaje de progreso actual de la tarea.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.ProgressEventArgs.HelpText">
            <summary>
            Texto descriptivo del estado actual de la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ProgressEventArgs.#ctor(System.Nullable{System.Single},System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/>.
            </summary>
            <param name="progress">
            Porecentaje de progreso actual de la tarea.
            </param>
            <param name="helpText">
            Texto descriptivo del estado actual de la tarea.
            </param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ProgressEventArgs`1">
            <summary>
            Contiene información del evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/>.
            </summary>
            <typeparam name="T">Tipo de objeto relacionado a la tarea.</typeparam>
        </member>
        <member name="F:MCART.Types.TaskReporter.ProgressEventArgs`1.Obj">
            <summary>
            Objeto para el cual se está reportando el progreso de la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ProgressEventArgs`1.#ctor(System.Nullable{System.Single},System.String,`0)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs`1"/>.
            </summary>
            <param name="progress">
            Porcentaje de progreso actual de la tarea.
            </param>
            <param name="helpText">
            Texto descriptivo del estado actual de la tarea.
            </param>
            <param name="obj">
            Objeto relacionado al estado actual de la tarea.
            </param>
        </member>
        <member name="T:MCART.Types.TaskReporter.BegunEventArgs">
            <summary>
            Contiene información del evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.BegunEventArgs.IsStoppable">
            <summary>
            Indica si la tarea podrá ser detenida.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.BegunEventArgs.StartTime">
            <summary>
            Indica el momento de inicio de la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.BegunEventArgs.#ctor(System.Boolean,System.DateTime)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Types.TaskReporter.BegunEventArgs"/>.
            </summary>
            <param name="stoppable">
            Indica si la tarea podrá ser detenida.
            </param>
            <param name="startTime">
            Indica el momento de inicio de la tarea.
            </param>
        </member>
        <member name="T:MCART.Types.TaskReporter.CancelRequestedEventHandler">
            <summary>
            Indica a la tarea que se ha solicitado que se detenga
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
            <remarks>Este evento debe ser implementado por la clase que contiene a la tarea</remarks>
        </member>
        <member name="T:MCART.Types.TaskReporter.BegunEventHandler">
            <summary>
            Se produce cuando una tarea se ha iniciado
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ReportingEventHandler">
            <summary>
            Se produce cuando la tarea desea reportar su estado
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.TaskTimeoutEventHandler">
            <summary>
            Se produce cuando se ha agotado el tiempo de espera para una tarea
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.StoppedEventHandler">
            <summary>
            Se produce cuando una tarea es cancelada
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.EndedEventHandler">
            <summary>
            Se produce cuando una tarea finalizó correctamente
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ErrorEventHandler">
            <summary>
            Se produce cuando una tarea indica que finalizó con error
            </summary>
            <param name="sender">Objeto que ha iniciado el evento</param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ITaskReporter">
            <summary>
            Define una serie de métodos a implementar por una clase que permita a
            una tarea reportar el progreso de una operación, generalmente cíclica.
            </summary>
            <summary>
            Define una serie de métodos a implementar por una clase que permita a
            una tarea reportar el progreso de una operación, generalmente cíclica.
            </summary>
            <summary>
            Define una serie de métodos a implementar por una clase que permita a
            una tarea reportar el progreso de una operación, generalmente cíclica.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.CancelRequested">
            <summary>
            Indica a la tarea que se ha solicitado que se detenga
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.Begun">
            <summary>
            Se produce cuando una tarea se ha iniciado
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.Reporting">
            <summary>
            Se produce cuando la tarea desea reportar su estado
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.Ended">
            <summary>
            Se produce cuando una tarea finalizó correctamente
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.Stopped">
            <summary>
            Se produce cuando una tarea es cancelada
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.Error">
            <summary>
            Se produce cuando una tarea indica que finalizó con error
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.ITaskReporter.TaskTimeout">
            <summary>
            Se produce cuando se ha agotado el tiempo de espera para una tarea
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.For(System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Controla automáticamente una tarea en una estructura similar a un
            ciclo <c>For</c> de Visual Basic.
            </summary>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">Mensaje genérico de estado.</param>
            <param name="nonStop">
            Si se establece en <c>true</c>, la tarea no podrá ser detenida.
            </param>
            <param name="onCancel">
            Acción en caso de que la tarea se cancele.
            </param>
            <param name="onError">
            Acción en caso de error.
            </param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/>que puede ser esperado por la palabra clave
            <c>await</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.For(System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Controla automáticamente una tarea en una estructura similar a un
            ciclo <c>For</c> de Visual Basic.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">Mensaje genérico de estado.</param>
            <param name="nonStop">
            Si se establece en <c>true</c>, la tarea no podrá ser detenida.
            </param>
            <param name="onCancel">
            Acción en caso de que la tarea se cancele.
            </param>
            <param name="onError">
            Acción en caso de error.
            </param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/>que puede ser esperado por la palabra clave
            <c>await</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Controla automáticamente una tarea en una estructura similar a un
            ciclo <c>For</c> de Visual Basic.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incremento por iteración del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">Mensaje genérico de estado.</param>
            <param name="nonStop">
            Si se establece en <c>true</c>, la tarea no podrá ser detenida.
            </param>
            <param name="onCancel">
            Acción en caso de que la tarea se cancele.
            </param>
            <param name="onError">
            Acción en caso de error.
            </param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/>que puede ser esperado por la palabra clave
            <c>await</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Controla automáticamente una tarea en una estructura similar a un
            ciclo <c>foreach</c>.
            </summary>
            <typeparam name="T">Tipo de elementos a iterar.</typeparam>
            <param name="coll">Colección a iterar.</param>
            <param name="FEachAct">
            Acción a ejecutar sobre cada uno de los elementos.
            </param>
            <param name="message">Mensaje genérico de estado.</param>
            <param name="nonStop">
            Si se establece en <c>true</c>, la tarea no podrá ser detenida.
            </param>
            <param name="onCancel">
            Acción en caso de que la tarea se cancele.
            </param>
            <param name="onError">
            Acción en caso de error.
            </param>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/>que puede ser esperado por la palabra clave
            <c>await</c>.
            </returns>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.CurrentProgress">
            <summary>
            Indica el progreso actual de la tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.CancelPending">
            <summary>
            Indica si hay una cancelación de tarea pendiente.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.TimedOut">
            <summary>
            Indica si la tarea ha excedido el tiempo de espera concedido.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.OnDuty">
            <summary>
            Indica si la tarea está en ejecución.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.TStart">
            <summary>
            Momento de inicio de la tarea,
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.TimeLeft">
            <summary>
            Indica la cantidad de tiempo restante para la tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ITaskReporter.Timeout">
            <summary>
            Indica la cantidad de tiempo concedida a la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Reporta el estado actual de esta tarea.
            </summary>
            <param name="e">
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/> con la información del estado de
            esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Report(System.String)">
            <summary>
            Reporta el estado actual de esta tarea.
            </summary>
            <param name="helpText">
            Texto descriptivo del estado actual de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Reporta el estado actual de esta tarea.
            </summary>
            <param name="progress">Progreso actual de esta tarea.</param>
            <param name="helpText">
            Texto descriptivo del estado actual de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Begin">
            <summary>
            Indica que una tarea ha dado inicio.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Begin(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea ha dado inicio.
            </summary>
            <param name="timeout">Tiempo concedido a la tarea.</param>
            <param name="genTOutEx">
            Indica si se generará una excepción al terminarse el tiempo de 
            espera.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.BeginNonStop">
            <summary>
            Indica que una tarea que no se puede interrumpir ha dado inicio.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.BeginNonStop(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea que no se puede interrumpir ha dado inicio.
            </summary>
            <param name="timeout">Tiempo concedido a la tarea.</param>
            <param name="genTOutEx">
            Indica si se generará una excepción al terminarse el tiempo de 
            espera.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.End">
            <summary>
            Indica que una tarea ha finalizado.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.EndWithError(System.Exception)">
            <summary>
            Indica que esta tarea ha finalizado debido a un error.
            </summary>
            <param name="ex">
            <see cref="T:System.Exception"/> generada que ha causado la finalización de
            la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Indica que esta tarea ha sido detenida antes de finalizar.
            </summary>
            <param name="e">
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/> con la información del estado de
            esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Indica que esta tarea ha sido detenida antes de finalizar.
            </summary>
            <param name="progress">Progreso actual de esta tarea.</param>
            <param name="helpText">
            Texto descriptivo del estado actual de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.Stop(System.String)">
            <summary>
            Indica que esta tarea ha sido detenida antes de finalizar.
            </summary>
            <param name="helpText">
            Texto descriptivo del estado actual de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ITaskReporter.ResetTimeout">
            <summary>
            Reinicia el contador de tiempo de espera.
            </summary>
        </member>
        <member name="T:MCART.Types.TaskReporter.TaskReporter">
            <summary>
            Clase base para objetos que puedan utilizarse para reportar el progreso
            de una operación o tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.CancelPending">
            <summary>
            Obtiene un valor que indica si existe una solicitud para deterner la
            tarea actualmente en ejecución.
            </summary>
            <value>
            <c>true</c> si existe una solicitud de cancelación pendiente; de lo
            contrario, <c>false</c>.
            </value>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.TimedOut">
            <summary>
            Obtiene un valor que indica si la operación debe detenerse debido a
            que se ha agotado el tiempo de espera de la misma.
            </summary>
            <value>
            <c>true</c> si se ha agotado el tiempo de espera para finalizar la
            operación; de lo contrario, <c>false</c>.
            </value>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.OnDuty">
            <summary>
            Obtiene un valor que indica si se está ejecutando una tarea 
            actualmente.
            </summary>
            <value>
            <c>true</c> si hay una tarea en ejecución; de lo contrario, 
            <c>false</c>.
            </value>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.TStart">
            <summary>
            Obtiene el instante en el que dio inicio la tarea en ejecución.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.TimeLeft">
            <summary>
            Obtiene la cantidad de tiempo disponible para finalizar la tarea.
            </summary>
            <value>El tiempo disponible para finalizar la tarea, o <c>null</c>
            en caso que no exista una restricción de tiempo.</value>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.Timeout">
            <summary>
            Obtiene la cantidad de tiempo asignado para ejecutar la tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporter.CurrentProgress">
            <summary>
            Obtiene un valor que indica el progreso actual reportardo por la
            tarea.
            </summary>
            <value>Un <see cref="T:System.Single"/> que indica el progreso de la tarea, o
            <c>null</c> en caso que el progreso sea indeterminado.</value>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.CancelRequested">
            <summary>
            Se genera cuando este <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> ha solicifado la
            detención de la tarea en ejecucion.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.Begun">
            <summary>
            Se genera cuando se ha iniciado una tarea.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.Reporting">
            <summary>
            Se genera cuando una tarea desea reportar su estado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.Ended">
            <summary>
            Se genera cuando una tarea ha finalizado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.Stopped">
            <summary>
            Se genera cuando una tarea ha sido cancelada.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.Error">
            <summary>
            Se genera cuando ocurre una excepción durante la ejecución de la
            tarea.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporter.TaskTimeout">
            <summary>
            Se genera cuando se ha agotado el tiempo de espera establecido para
            ejecutar la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Begin">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/>. 
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.BeginNonStop">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/> para una tarea que no puede
            detenerse.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.End">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Ended"/> 
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.EndWithError(System.Exception)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Error"/> 
            </summary>
            <param name="ex">
            Parámetro opcional. <see cref="T:System.Exception"/> que ha causado la 
            finalización de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/> desde una tarea. 
            </summary>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Report(System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/> desde una tarea. 
            </summary>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/> desde una tarea. 
            </summary>
            <param name="progress">Porcentaje de progreso de la tarea.</param>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="progress">Porcentaje de progreso de la tarea.</param>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Stop(System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.Begin(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea se ha iniciado. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.BeginNonStop(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado. Genera el
            evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.For(System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo iniciará el contador en 0, y
            realizará incrementos de 1 por cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.For(System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo realizará incrementos de 1 por 
            cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado 
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incrmento del contador por cada paso.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo <c>For Each</c> determinado por el delegado
            <paramref name="forEachAct"/>.
            </summary>
            <typeparam name="T">Tipo de la colección del ciclo.</typeparam>
            <param name="collection">Colección del ciclo.</param>
            <param name="forEachAct">Acción a ejecutar.</param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.ResetTimeout">
            <summary>
            Reinicia el contador de tiempo de espera durante una tarea.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce cuando no se está ejecutando una tarea (el valor de
            <see cref="P:MCART.Types.TaskReporter.TaskReporter.OnDuty"/> es <c>false</c>).</exception>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action,MCART.Types.TaskReporter.ITaskReporter)">
            <summary>
            Ejecuta un ciclo determinado por el delegado 
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incrmento del contador por cada paso.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="instance">
            Instancia de <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> a utilizar para reportar
            el estado de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action,MCART.Types.TaskReporter.ITaskReporter)">
            <summary>
            Ejecuta un ciclo <c>For Each</c> determinado por el delegado
            <paramref name="forEachAct"/>.
            </summary>
            <typeparam name="T">Tipo de la colección del ciclo.</typeparam>
            <param name="collection">Colección del ciclo.</param>
            <param name="forEachAct">Acción a ejecutar.</param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="instance">
            Instancia de <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> a utilizar para reportar
            el estado de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.SetCancelPending(System.Boolean)">
            <summary>
            Establece el valor de la propiedad de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporter.CancelPending"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor a establecer en la propiedad <see cref="P:MCART.Types.TaskReporter.TaskReporter.CancelPending"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.SetOnDuty(System.Boolean)">
            <summary>
            Establece el valor de la propiedad de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporter.OnDuty"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor a establecer en la propiedad <see cref="P:MCART.Types.TaskReporter.TaskReporter.OnDuty"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.SetCurrentProgress(System.Nullable{System.Single})">
            <summary>
            Establece el valor de la propiedad de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporter.CurrentProgress"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor a establecer en la propiedad <see cref="P:MCART.Types.TaskReporter.TaskReporter.CurrentProgress"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.SetTimeStart(System.Nullable{System.DateTime})">
            <summary>
            Establece el valor de la propiedad de sólo lectura
            <see cref="P:MCART.Types.TaskReporter.TaskReporter.TStart"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor a establecer en la propiedad <see cref="P:MCART.Types.TaskReporter.TaskReporter.TStart"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseBegun(System.Object,MCART.Types.TaskReporter.BegunEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Begun"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseCancelRequested(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.CancelRequested"/> desde una clase 
            derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseEnded(System.Object)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Ended"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseError(System.Object,MCART.Events.ExceptionEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Error"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseReporting(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Reporting"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseStopped(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.Stopped"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.RaiseTimeout(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporter.TaskTimeout"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.TaskReporter.TaskReporter"/>.
            </summary>
        </member>
        <member name="T:MCART.Types.TaskReporter.TaskReporterPlugin">
            <summary>
            Implementa la interfaz <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> para crear plugins
            compatibles con MCART que permitan reportar el progreso de una
            operación o tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.CancelPending">
            <summary>
            Obtiene un valor que indica si hay pendiente una solicitud para 
            cancelar la tarea en ejecución.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.TimedOut">
            <summary>
            Obtiene un valor que indica si se ha agotado el tiempo de espera
            para ejecutar la tarea.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.OnDuty">
            <summary>
            Obtiene un valor que indica si actualmente hay una tarea en
            ejecución supervisada por este <see cref="T:MCART.Types.TaskReporter.TaskReporterPlugin"/>.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.TStart">
            <summary>
            Obtiene el instante en el cual se inició la tarea actualmente en
            ejecución.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce si actualmenteno hay una tarea en ejecución.
            </exception>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.TimeLeft">
            <summary>
            Obtiene la cantidad de tiempo restante antes de que se agote el
            tiempo de espera.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.Timeout">
            <summary>
            Obtiene o establece el tiempo de espera de este 
            <see cref="T:MCART.Types.TaskReporter.TaskReporterPlugin"/>.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.TaskReporterPlugin.CurrentProgress">
            <summary>
            Obtiene un valor que indica el progreso actual de la tarea
            actualmente en ejecución.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce si actualmenteno hay una tarea en ejecución.
            </exception>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.CancelRequested">
            <summary>
            Se genera cuando este <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> ha solicifado la
            detención de la tarea en ejecucion.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun">
            <summary>
            Se genera cuando se ha iniciado una tarea.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.Reporting">
            <summary>
            Se genera cuando una tarea desea reportar su estado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.Ended">
            <summary>
            Se genera cuando una tarea ha finalizado.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.Stopped">
            <summary>
            Se genera cuando una tarea ha sido cancelada.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.Error">
            <summary>
            Se genera cuando ocurre una excepción durante la ejecución de la
            tarea.
            </summary>
        </member>
        <member name="E:MCART.Types.TaskReporter.TaskReporterPlugin.TaskTimeout">
            <summary>
            Se genera cuando se ha agotado el tiempo de espera establecido para
            ejecutar la tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Begin">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun"/>. 
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.BeginNonStop">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun"/> para una tarea que no puede
            detenerse.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.End">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Ended"/> 
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.EndWithError(System.Exception)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Error"/> 
            </summary>
            <param name="ex">
            Parámetro opcional. <see cref="T:System.Exception"/> que ha causado la 
            finalización de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Reporting"/> desde una tarea. 
            </summary>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Report(System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Reporting"/> desde una tarea. 
            </summary>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Reporting"/> desde una tarea. 
            </summary>
            <param name="progress">Porcentaje de progreso de la tarea.</param>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="progress">Porcentaje de progreso de la tarea.</param>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Stop(System.String)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Stopped"/> al interrumpir una tarea.
            </summary>
            <param name="helpText">
            Texto de ayuda sobre el progreso de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.Begin(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea se ha iniciado. Genera el evento 
            <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.BeginNonStop(System.TimeSpan,System.Boolean)">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado. Genera el
            evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.For(System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo iniciará el contador en 0, y
            realizará incrementos de 1 por cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.For(System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <remarks>
            De forma predeterminada, el ciclo realizará incrementos de 1 por 
            cada paso.
            </remarks>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo determinado por el delegado 
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incrmento del contador por cada paso.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Ejecuta un ciclo <c>For Each</c> determinado por el delegado
            <paramref name="forEachAct"/>.
            </summary>
            <typeparam name="T">Tipo de la colección del ciclo.</typeparam>
            <param name="collection">Colección del ciclo.</param>
            <param name="forEachAct">Acción a ejecutar.</param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.ResetTimeout">
            <summary>
            Reinicia el contador de tiempo de espera durante una tarea.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce cuando no se está ejecutando una tarea (el valor de
            <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.OnDuty"/> es <c>false</c>).</exception>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.For(System.Int32,System.Int32,System.Int32,MCART.Types.TaskReporter.ForAction,System.String,System.Boolean,System.Action,System.Action,MCART.Types.TaskReporter.ITaskReporter)">
            <summary>
            Ejecuta un ciclo determinado por el delegado 
            <paramref name="forAct"/>.
            </summary>
            <param name="cStart">Valor inicial del contador.</param>
            <param name="cEnd">Valor final del contador.</param>
            <param name="cStep">Incrmento del contador por cada paso.</param>
            <param name="forAct">Acción a ejecutar.</param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="instance">
            Instancia de <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> a utilizar para reportar
            el estado de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.ForEach``1(System.Collections.Generic.IEnumerable{``0},MCART.Types.TaskReporter.ForEachAction{``0},System.String,System.Boolean,System.Action,System.Action,MCART.Types.TaskReporter.ITaskReporter)">
            <summary>
            Ejecuta un ciclo <c>For Each</c> determinado por el delegado
            <paramref name="forEachAct"/>.
            </summary>
            <typeparam name="T">Tipo de la colección del ciclo.</typeparam>
            <param name="collection">Colección del ciclo.</param>
            <param name="forEachAct">Acción a ejecutar.</param>
            <param name="nonStop">
            Parámetro opcional. Si es <c>true</c>, el ciclo no podrá ser
            interrumpido. De forma predeterminada, se asume <c>false</c>.
            </param>
            <param name="onCancel">
            Parámetro opcional. Acción a ejecutar en caso de cancelar el ciclo.
            </param>
            <param name="onError">
            Parámetro opcional. Acción a ejecutar en caso de generarse un error
            durante la ejecución del ciclo.
            </param>
            <param name="message">
            Parámetro opcional. Mensaje a mostrar.
            </param>
            <param name="instance">
            Instancia de <see cref="T:MCART.Types.TaskReporter.ITaskReporter"/> a utilizar para reportar
            el estado de la tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.SetCancelPending(System.Boolean)">
            <summary>
            Establece el valor de la propiedad de sólo lectura 
            <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.CancelPending"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor que se desea establecer en <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.CancelPending"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.SetOnDuty(System.Boolean)">
            <summary>
            Establece el valor de la propiedad de sólo lectura 
            <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.OnDuty"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor que se desea establecer en <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.OnDuty"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.SetTimeStart(System.Nullable{System.DateTime})">
            <summary>
            Establece el valor de la propiedad de sólo lectura 
            <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.TStart"/> desde una clase derivada.
            </summary>
            <param name="t">
            Valor que se desea establecer en <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.TStart"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.SetCurrentProgress(System.Nullable{System.Single})">
            <summary>
            Establece el valor de la propiedad de sólo lectura 
            <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.CurrentProgress"/> desde una clase derivada.
            </summary>
            <param name="Value">
            Valor que se desea establecer en <see cref="P:MCART.Types.TaskReporter.TaskReporterPlugin.CurrentProgress"/>.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseBegun(System.Object,MCART.Types.TaskReporter.BegunEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Begun"/> desde una clase
            derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseCancelRequested(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.CancelRequested"/> desde una clase
            derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseEnded(System.Object)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Ended"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseError(System.Object,MCART.Events.ExceptionEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Error"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseReporting(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Reporting"/> desde una clase derivada.
            </summary>
            <param name="sender">Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseStopped(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.Stopped"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.RaiseTimeout(System.Object,MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Genera el evento <see cref="E:MCART.Types.TaskReporter.TaskReporterPlugin.TaskTimeout"/> desde una clase derivada.
            </summary>
            <param name="sender">
            Instancia del objeto que generará el evento.
            </param>
            <param name="e">Parámetros del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.TaskReporterPlugin.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Types.TaskReporter.TaskReporterPlugin"/>.
            </summary>
        </member>
        <member name="T:MCART.Types.TaskReporter.DummyTaskReporter">
            <summary>
            <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> que no implementa ningún medio de 
            interacción con el usuario.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.DummyTaskReporter.CancelPending">
            <summary>
            Esta propiedad siempre devolverá <c>false</c>.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Begin">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.BeginNonStop">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.End">
            <summary>
            Marca el final de una tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.EndWithError(System.Exception)">
            <summary>
            Indica que la tarea finalizó con un error.
            </summary>
            <param name="ex">
            <see cref="T:System.Exception"/> que causó la finalización de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="e">Información adicional del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Report(System.String)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="e">
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/> con información del progreso de la
            tarea al momento de la detención.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.DummyTaskReporter.Stop(System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="T:MCART.Types.TaskReporter.ConsoleTaskReporter">
            <summary>
            Implementación de <see cref="T:MCART.Types.TaskReporter.TaskReporter"/> que muestra el progreso de
            una tarea en la consola del sistema.
            </summary>
        </member>
        <member name="P:MCART.Types.TaskReporter.ConsoleTaskReporter.ProgressSize">
            <summary>
            Obtiene o establece el tamaño a utilizar para la barra de progreso.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se produce si se intenta establecer un tamaño mayor al ancho del
            búffer de la consola/terminal.
            </exception>
        </member>
        <member name="P:MCART.Types.TaskReporter.ConsoleTaskReporter.PBarLocation">
            <summary>
            Obtiene o establece la ubicación de la barra de progreso en la
            ventana de la consola/terminal.
            </summary>
        </member>
        <member name="F:MCART.Types.TaskReporter.ConsoleTaskReporter.Verbose">
            <summary>
            Obtiene o establece un valor que indica si se mostrará información
            detallada sobre la tarea al mostrar el progreso.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Begin">
            <summary>
            Indica que una tarea se ha iniciado.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.BeginNonStop">
            <summary>
            Indica que una tarea que no se puede detener ha iniciado.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.End">
            <summary>
            Marca el final de una tarea.
            </summary>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.EndWithError(System.Exception)">
            <summary>
            Indica que la tarea finalizó con un error.
            </summary>
            <param name="ex">
            <see cref="T:System.Exception"/> que causó la finalización de esta tarea.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Report(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="e">Información adicional del evento.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Report(System.String)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Report(System.Nullable{System.Single},System.String)">
            <summary>
            Reporta el estado de la tarea actual.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Stop(MCART.Types.TaskReporter.ProgressEventArgs)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="e">
            <see cref="T:MCART.Types.TaskReporter.ProgressEventArgs"/> con información del progreso de la
            tarea al momento de la detención.
            </param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Stop(System.Nullable{System.Single},System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="progress">
            <see cref="T:System.Nullable`1"/> que representa el progreso actual de la
            tarea.
            </param>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="M:MCART.Types.TaskReporter.ConsoleTaskReporter.Stop(System.String)">
            <summary>
            Indica que la tarea actual ha sido detenida antes de finalizar.
            </summary>
            <param name="helpText">Texto de ayuda sobre la tarea.</param>
        </member>
        <member name="T:MCART.Types.Extensions.StreamExtensions">
            <summary>
            Extensiones de la clase <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.Destroy(System.IO.Stream)">
            <summary>
            Destruye el contenido del <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.Skip(System.IO.Stream,System.Int32)">
            <summary>
            Salta la cantidad especificada de bytes en la secuencia desde la
            posición actual.
            </summary>
            <param name="fs"><see cref="T:System.IO.Stream"/> del cual este método es
            una extensión.</param>
            <param name="bytesToSkip">Bytes a saltar.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se produce si <paramref name="bytesToSkip"/> es menor a cero, o si
            se extiende fuera de la secuencia.
            </exception>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadString(System.IO.Stream,System.Int32,System.Text.Encoding)">
            <summary>
            Lee una cadena desde la secuencia y avanza la posición de lectura
            hasta después del último carácter leído.
            </summary>
            <returns>La cadena que ha sido leída.</returns>
            <param name="fs"><see cref="T:System.IO.Stream"/> del cual este método es
            una extensión.</param>
            <param name="count">Cantidad de caracteres a leer.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> a utilizar.</param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.RemainingBytes(System.IO.Stream)">
            <summary>
            Obtiene la cantidad de bytes restantes desde la posición actual.
            </summary>
            <param name="fs"><see cref="T:System.IO.Stream"/> del cual este método es
            una extensión.</param>
            <returns>
            La cantidad de bytes restantes desde la posición actual.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadString(System.IO.Stream,System.Int32)">
            <summary>
            Lee una cadena desde la secuencia y avanza la posición de lectura
            hasta después del último carácter Unicode leído.
            </summary>
            <returns>La cadena que ha sido leída.</returns>
            <param name="fs"><see cref="T:System.IO.Stream"/> del cual este método es
            una extensión.</param>
            <param name="count">Cantidad de caracteres a leer.</param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadStringAsync(System.IO.Stream,System.Int32)">
            <summary>
            Lee asíncronamente una cadena desde la secuencia y avanza la posición
            de lectura hasta después del último carácter Unicode leído.
            </summary>
            <returns>La cadena que ha sido leída.</returns>
            <param name="fs"><see cref="T:System.IO.Stream"/> del cual este método es
            una extensión.</param>
            <param name="count">Cantidad de caracteres a leer.</param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadStringAsync(System.IO.Stream,System.Int32,System.Text.Encoding)">
            <summary>
            Lee asíncronamente una cadena desde la secuencia y avanza la posición
            de lectura hasta después del último carácter leído.
            </summary>
            <returns>La cadena que ha sido leída.</returns>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
            <param name="count">Cantidad de caracteres a leer.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> a utilizar.</param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadStringToEndAsync(System.IO.Stream)">
            <summary>
            Lee asíncronamente una cadena desde la posición actual hasta el
            final de la secuencia.
            </summary>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
            <returns>La cadena que ha sido leída.</returns>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.ReadStringToAsync(System.IO.Stream,System.Int64)">
            <summary>
            Lee asíncronamente una cadena desde la posición actual hasta 
            alcanzar la posición especificada.
            </summary>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
            <param name="pos">
            Posición hasta la cual se leerá la cadena.
            </param>
            <returns>La cadena que ha sido leída.</returns>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Escribe un conjunto de objetos <see cref="T:System.Byte"/> en el 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
            <param name="bytes">Colección de objetos <see cref="T:System.Byte"/> a
            escribir en el <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:MCART.Types.Extensions.StreamExtensions.WriteSeveralBytes(System.IO.Stream,System.Byte[][])">
            <summary>
            Escribe un conjunto de colecciones <see cref="T:System.Byte"/> en el 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="fs">
            <see cref="T:System.IO.Stream"/> del cual este método es una extensión.
            </param>
            <param name="bytes">Colecciones de <see cref="T:System.Byte"/> a escribir en
            el <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="T:MCART.Types.Extensions.IEnumerableExtensions">
            <summary>
            Extensiones para todos los elementos de tipo <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Copy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ontiene una copia de los elementos de este <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            </summary>
            <returns>
            Copia de esta lista. Los elementos de la copia representan la misma
            instancia del objeto original.
            </returns>
            <param name="c">Colección a copiar.</param>
            <typeparam name="T">Tipo de elementos de esta lista.</typeparam>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Desordena los elementos de un <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            Tipo de elementos contenidos en el <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="c"><see cref="T:System.Collections.Generic.IEnumerable`1"/> a desordenar.</param>
            <param name="deepness">Profundidad del desorden. 1 es el más alto.</param>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Desordena los elementos del intervalo especificado de un
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            Tipo de elementos contenidos en el <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="c"><see cref="T:System.Collections.Generic.IEnumerable`1"/> a desordenar.</param>
            <param name="deepness">Profundidad del desorden. 1 es el más alto.</param>
            <param name="firstIdx">Índice inicial del intervalo.</param>
            <param name="lastIdx">Índice inicial del intervalo.</param>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Shuffled``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Devuelve una versión desordenada del <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            sin alterar la colección original.
            </summary>
            <typeparam name="T">
            Tipo de elementos contenidos en el <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="c"><see cref="T:System.Collections.Generic.IEnumerable`1"/> a desordenar.</param>
            <param name="deepness">
            Profundidad del desorden. 1 es el más alto.
            </param>
            <returns>
            Una versión desordenada del <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Shuffled``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Devuelve una versión desordenada del intervalo especificado de
            elementos del <see cref="T:System.Collections.Generic.IEnumerable`1"/> sin alterar la colección
            original.
            </summary>
            <typeparam name="T">
            Tipo de elementos contenidos en el <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="c"><see cref="T:System.Collections.Generic.IEnumerable`1"/> a desordenar.</param>
            <param name="firstIdx">Índice inicial del intervalo.</param>
            <param name="lastIdx">Índice inicial del intervalo.</param>
            <param name="deepness">
            Profundidad del desorden. 1 es el más alto.
            </param>
            <returns>
            Una versión desordenada del intervalo especificado de elementos del
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Pick``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selecciona un elemento aleatorio de esta lista.
            </summary>
            <returns>The pick.</returns>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.ToExtendedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convierte una colección a <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
            <param name="c">Colección a convertir</param>
            <returns>
            Un <see cref="T:MCART.Types.Extensions.List`1"/> extendido del espacio de nombres 
            <c>MCART.TypeExtensions</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Rotate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Rota los elementos de un arreglo, lista o colección.</summary>
            <param name="a">Arreglo a rotar</param>
            <param name="steps">Dirección y unidades de rotación.</param>
            <remarks>
            Si <paramref name="steps"/> es positivo, la rotación ocurre de forma
            ascendente; en caso contrario, descendente.
            </remarks>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Shift``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Desplaza los elementos de un arreglo, lista o colección.</summary>
            <param name="a">Arreglo a desplazar</param>
            <param name="steps">Dirección y unidades de desplazamiento.</param>
            <remarks>
            Si <paramref name="steps"/> es positivo, la rotación ocurre de forma
            ascendente; en caso contrario, descendente.
            </remarks>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.Pop``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Devuelve el último elemento en la lista, quitándolo.
            </summary>
            <returns>El último elemento en la lista.</returns>
            <param name="a">Lista de la cual obtener el elemento.</param>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="M:MCART.Types.Extensions.IEnumerableExtensions.PopFirst``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Devuelve el primer elemento en la lista, quitándolo.
            </summary>
            <returns>El primer elemento en la lista.</returns>
            <param name="a">Lista de la cual obtener el elemento.</param>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="T:MCART.Types.Extensions.ListUpdateType">
            <summary>
            Tipo de actualización de la lista
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ListCleared">
            <summary>
            La lista ha sido vaciada.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ItemsAdded">
            <summary>
            Se añadieron los elementos.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ItemsInserted">
            <summary>
            Se insertaron los elementos.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ItemsModified">
            <summary>
            Se modificaron los elementos.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ItemsRemoved">
            <summary>
            Se removieron los elementos.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdateType.ItemsMoved">
            <summary>
            Se movieron los elementos.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.AddingItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.AddingItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.AddingItemEventArgs`1.NewItem">
            <summary>
            Obtiene el objeto que se agregará al <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.AddingItemEventArgs`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.Extensions.AddingItemEventArgs`1"/>.
            </summary>
            <param name="newItem">
            Objeto a ser agregado al <see cref="T:MCART.Types.Extensions.List`1"/> que generó el 
            evento.
            </param>
        </member>
        <member name="T:MCART.Types.Extensions.InsertingItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.InsertingItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.InsertingItemEventArgs`1.InsertedItem">
            <summary>
            Obtiene el objeto que se insertará en el <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.InsertingItemEventArgs`1.Index">
            <summary>
            Obtiene el índice en el cual el objeto será insertado.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.InsertingItemEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.Extensions.InsertingItemEventArgs`1"/>.
            </summary>
            <param name="Index">
            Índice en el cual se insertará el objeto.
            </param>
            <param name="InsertedItem">
            Objeto que se insertará en el <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </param>
        </member>
        <member name="T:MCART.Types.Extensions.ModifyingItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.ModifyingItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.ModifyingItemEventArgs`1.NewValue">
            <summary>
            Obtiene el nuevo valor del objeto.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ModifyingItemEventArgs`1.OldValue">
            <summary>
            Obtiene el valor actual del objeto.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ModifyingItemEventArgs`1.Index">
            <summary>
            Obtiene el índice del objeto dentro del <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.ModifyingItemEventArgs`1.#ctor(System.Int32,`0,`0)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Types.Extensions.ModifyingItemEventArgs`1"/>.
            </summary>
            <param name="index">
            Índice del objeto en el <see cref="T:MCART.Types.Extensions.List`1"/> que generó el evento.
            </param>
            <param name="oldv">Valor original del objeto.</param>
            <param name="newv">Nuevo valor del objeto.</param>
        </member>
        <member name="T:MCART.Types.Extensions.RemovingItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.RemovingItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.RemovingItemEventArgs`1.RemovedItem">
            <summary>
            Objeto que será removido del <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.RemovingItemEventArgs`1.Index">
            <summary>
            Índice del elemento que será removido del <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.RemovingItemEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Types.Extensions.RemovingItemEventArgs`1"/>.
            </summary>
            <param name="RemItm">
            Objeto que será removido del <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </param>
            <param name="Index">
            Índice del elemento que será removido del <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </param>
        </member>
        <member name="T:MCART.Types.Extensions.ListUpdatingEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.ListUpdating"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdatingEventArgs`1.Items">
            <summary>
            Elementos afectados por la actualización.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdatingEventArgs`1.UpdateType">
            <summary>
            TIpo de actualización a realizar en el <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.AddedItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.AddedItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.AddedItemEventArgs`1.NewItem">
            <summary>
            Elemento que fue agregado al <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.InsertedItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.InsertedItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.InsertedItemEventArgs`1.InsertedItem">
            <summary>
            Elemento que fue insertado en el <see cref="T:MCART.Types.Extensions.List`1"/> que generó
            el evento.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.InsertedItemEventArgs`1.Index">
            <summary>
            Índice del objeto dentro del <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.ItemModifiedEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.ModifiedItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.ItemModifiedEventArgs`1.Item">
            <summary>
            Objeto que ha sido modificado dentro del <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ItemModifiedEventArgs`1.Index">
            <summary>
            Índice del objeto modificado dentro del <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.RemovedItemEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.RemovedItem"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.RemovedItemEventArgs`1.RemovedItem">
            <summary>
            Objeto que fue quitado del <see cref="T:MCART.Types.Extensions.List`1"/> que generó el
            evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.ListUpdatedEventArgs`1">
            <summary>
            Contiene información para el evento <see cref="E:MCART.Types.Extensions.List`1.ListUpdated"/>.
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdatedEventArgs`1.Items">
            <summary>
            Elementos que fueron afectados por la actualización del 
            <see cref="T:MCART.Types.Extensions.List`1"/> que generó el evento.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.ListUpdatedEventArgs`1.UpdateType">
            <summary>
            Tipo de actualización ocurrida en el <see cref="T:MCART.Types.Extensions.List`1"/> que
            generó el evento.
            </summary>
        </member>
        <member name="T:MCART.Types.Extensions.AddingItemEventHandler`1">
            <summary>
            Se produce cuando se agregará un elemento a la lista.
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.InsertingItemEventHandler`1">
            <summary>
            Se produce cuando se insertará un elemento en la lista.
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.RemovingItemEventHandler`1">
            <summary>
            Se produce cuando se eliminará un elemento de la lista
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ModifyingItemEventHandler`1">
            <summary>
            Se produce cuando se modificará un elemento de la lista
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ClearingListEventHandler`1">
            <summary>
            Se produce cuando la lista será vaciada por <see cref="M:MCART.Types.Extensions.List`1.Clear"/>
            </summary>
            <typeparam name="T">Tipo de elementos de la lista.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ItemAddedEventHandler`1">
            <summary>
            Se produce cuando se ha agregado un elemento a la lista
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ItemInsertedEventHandler`1">
            <summary>
            Se produce cuando se ha insertado un elemento en la lista.
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ItemModifiedEventHandler`1">
            <summary>
            Se produce cuando se ha modificado un elemento de la lista
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ItemRemovedEventHandler`1">
            <summary>
            Se produce cuando se ha quitado un elemento de la lista
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ListClearedEventHandler`1">
            <summary>
            Se produce cuando la lista ha sido vaciada por medio de <see cref="M:MCART.Types.Extensions.List`1.Clear"/>
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ListUpdatedEventHandler`1">
            <summary>
            Se produce cuando la lista ha sido actualizada
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.ListUpdatingEventHandler`1">
            <summary>
            Se produce cuando la lista será actualizada
            </summary>
            <typeparam name="T">Tipo de elemento.</typeparam>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="T:MCART.Types.Extensions.List`1">
            <summary>
            Extensión observable de la clase 
            <see cref="T:System.Collections.Generic.List`1"/>. Provee de toda la
            funcionalidad previamente disponible, e incluye algunas extensiones
            útiles.
            </summary>
            <typeparam name="T">
            Tipo de los elementos que contendrá esta lista.
            </typeparam>
            <remarks>
            Esta clase puede considerarse como una alternativa más completa a 
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            con numerosos eventos adicionales y otras extensiones.
            </remarks>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.AddingItem">
            <summary>
            Se produce cuando se agregará un elemento a la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.InsertingItem">
            <summary>
            Se produce cuando se insertará un elemento en la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ModifyingItem">
            <summary>
            Se produce cuando se modificará un elemento de la lista
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.RemovingItem">
            <summary>
            Se produce cuando se eliminará un elemento de la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ListUpdating">
            <summary>
            Se produce cuando la lista será actualizada.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ClearingList">
            <summary>
            Se produce cuando la lista será vaciada por medio de 
            <see cref="M:MCART.Types.Extensions.List`1.Clear"/>.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.AddedItem">
            <summary>
            Se produce cuando se ha agregado un elemento a la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.InsertedItem">
            <summary>
            Se produce cuando se ha insertado un elemento en la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ModifiedItem">
            <summary>
            Se produce cuando se ha modificado un elemento de la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.RemovedItem">
            <summary>
            Se produce cuando se ha quitado un elemento de la lista.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ListCleared">
            <summary>
            Se produce cuando la lista ha sido vaciada por medio de 
            <see cref="M:MCART.Types.Extensions.List`1.Clear"/>.
            </summary>
        </member>
        <member name="E:MCART.Types.Extensions.List`1.ListUpdated">
            <summary>
            Se produce cuando la lista ha sido actualizada.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.List`1.GlobalTriggerEvents">
            <summary>
            Activa o desactiva la generación global de eventos de todos los
            <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
        </member>
        <member name="F:MCART.Types.Extensions.List`1.TriggerEvents">
            <summary>
            Activa o desactiva la generación de eventos.
            </summary>
        </member>
        <member name="P:MCART.Types.Extensions.List`1.Item(System.Int32)">
            <summary>
            Obtiene o establece el elemento ubicado en el íncide especificado.
            </summary>
            <param name="index">Índice del elemento.</param>
            <returns>El elemento en la posición especificada.</returns>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Add(`0)">
            <summary>
            Añade un objeto al final de la <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
            <param name="item">
            El objeto a ser añadido al final de la <see cref="T:MCART.Types.Extensions.List`1"/>. El
            valor puede ser <c>null</c> para tipos de referencia.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Agrega todos los elementos de una colección al final de la 
            <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
            <param name="collection">Colección a añadir.</param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Insert(System.Int32,`0)">
            <summary>
            Inserta un elemento en el índice especificado
            </summary>
            <param name="index">Índice de destino del nuevo elemento</param>
            <param name="item">Elemento a insertar</param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserta una colección de elementos a partir del índice especificado
            </summary>
            <param name="index">Índice de destino para la inserción</param>
            <param name="collection">Colección de elementos a insertar</param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Remove(`0)">
            <summary>
            Quita la primera aparición de un objeto específico del 
            <see cref="T:MCART.Types.Extensions.List`1"/>.
            </summary>
            <param name="item">
            Objeto de tipo <typeparamref name="T"/> a remover de la colección.
            </param>
            <exception cref="T:MCART.Exceptions.EmptyCollectionException`1">
            se produce si esta lista está vacía.
            </exception>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.RemoveAt(System.Int32)">
            <summary>
            Quita el elemento situado en el índice especificado del <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
            <param name="index">Índice del elemento a remover</param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Quita todos los elementos que cumplen con las condiciones definidas
            por el predicado especificado.
            </summary>
            <param name="match">
            Delegado <see cref="T:System.Predicate`1"/> que define las condiciones de
            los elementos que se van a quitar.
            </param>
            <exception cref="T:MCART.Exceptions.EmptyCollectionException`1">
            se produce si esta lista está vacía.
            </exception>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Reverse">
            <summary>
            Invierte el orden de los elementos en este <see cref="T:MCART.Types.Extensions.List`1"/> completo.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Invierte el orden de los elementos en el intervalo especificado.
            </summary>
            <param name="index">
            Índice inicial de base cero del intervalo que se va a invertir.
            </param>
            <param name="count">
            Número de elementos del intervalo que se va a invertir.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Reversed">
            <summary>
            Devuelve una versión inversa del orden de los elementos de este 
            <see cref="T:MCART.Types.Extensions.List`1"/> sin alterar la colección original.
            </summary>
            <returns>
            Una versión inversa del orden de los elementos de este 
            <see cref="T:MCART.Types.Extensions.List`1"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Reversed(System.Int32,System.Int32)">
            <summary>
            Devuelve una versión inversa del orden de los elementos de este 
            <see cref="T:MCART.Types.Extensions.List`1"/> sin alterar la colección original.
            </summary>
            <param name="index">
            Índice inicial de base cero del intervalo que se va a invertir.
            </param>
            <param name="count">
            Número de elementos del intervalo que se va a invertir.
            </param>
            <returns>
            Una versión inversa del orden de los elementos de este 
            <see cref="T:MCART.Types.Extensions.List`1"/>.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.RemoveLast">
            <summary>
            Quita el último elemento de la <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.RemoveFirst">
            <summary>
            Quita el primer elemento de la <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Clear">
            <summary>
            Remueve todos los elementos de la <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Sort">
            <summary>
            Ordena los elementos de todo el <see cref="T:MCART.Types.Extensions.List`1"/> utilizando el
            comparador predeterminado.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Sort(System.Comparison{`0})">
            <summary>
            Ordena los elementos de todo el <see cref="T:MCART.Types.Extensions.List`1"/> utilizando el
            <see cref="T:System.Comparison`1"/> especificado.
            </summary>
            <param name="comparsion">
            <see cref="T:System.Comparison`1"/> que se va a utilizar al comparar 
            elementos.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Ordena los elementos de todo el <see cref="T:MCART.Types.Extensions.List`1"/> utilizando el
            <see cref="T:System.Collections.Generic.IComparer`1"/> especificado.
            </summary>
            <param name="comparer">
            Implementación de <see cref="T:System.Collections.Generic.IComparer`1"/> que se va a utilizar
            al comparar elementos, o <c>null</c> para utilizar el comparador
            predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Ordena los elementos en un intevalo especificado del 
            <see cref="T:MCART.Types.Extensions.List`1"/> utilizando el comparador especificado.
            </summary>
            <param name="index">
            Índice inicial de base cero del intervalo que se va a ordenar.
            </param>
            <param name="count">
            Longitud del intervalo que se va a ordernar.
            </param>
            <param name="comparer">
            Implementación de <see cref="T:System.Collections.Generic.IComparer`1"/> que se va a utilizar
            al comparar elementos, o <c>null</c> para utilizar el comparador
            predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.List`1.Clone">
            <summary>
            Implementa la interfaz <see cref="T:System.ICloneable"/>
            </summary>
            <returns>Una copia de esta instancia.</returns>
        </member>
        <member name="P:MCART.Types.Extensions.List`1.GetListType">
            <summary>
            Devuelve el tipo de elementos de <see cref="T:MCART.Types.Extensions.List`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MCART.Types.Extensions.RandomExtensions">
            <summary>
            Extensiones para la clase <see cref="T:System.Random"/>
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.RandomExtensions.RndText(System.Random,System.UInt32)">
            <summary>
            Obtiene una cadena de texto aleatorio.
            </summary>
            <param name="r">
            Instancia del objeto <see cref="T:System.Random"/> a utilizar.
            </param>
            <param name="length">Longitud de la cadena a generar.</param>
            <returns>
            Una cadena de texto aleatorio con la longitud especificada.
            </returns>
        </member>
        <member name="M:MCART.Types.Extensions.RandomExtensions.RndFileName(System.Random,System.Byte)">
            <summary>
            Genera un nombre de archivo aleatorio que no se encuentre en uso en
            el directorio actual.
            </summary>
            <param name="r">
            Instancia del objeto <see cref="T:System.Random"/> a utilizar.
            </param>
            <param name="length">Longitud del nombre de archivo.</param>
            <returns>
            Un nombre de archivo aleatorio que no corresponde a ningún archivo
            en el directorio actual.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se produce si <paramref name="length"/> es inferior a 0, o superior
            a el máximo admitido por el sistema operativo.
            </exception>
        </member>
        <member name="T:MCART.Types.Extensions.Timer">
            <summary>
            Extensión de la clase <see cref="T:System.Timers.Timer"/>. provee de toda
            la funcionalidad previamente disponible, e incluye algunas extensiones
            útiles.
            </summary>
        </member>
        <member name="P:MCART.Types.Extensions.Timer.StartTime">
            <summary>
            Indica el momento de inicio de este <see cref="T:MCART.Types.Extensions.Timer"/>.
            </summary>
        </member>
        <member name="P:MCART.Types.Extensions.Timer.TimeLeft">
            <summary>
            Indica la cantidad de tiempo disponible antes de cumplir con el 
            intervalo establecido en 
            <see cref="P:System.Timers.Timer.Interval"/>.
            </summary>
        </member>
        <member name="P:MCART.Types.Extensions.Timer.Enabled">
            <summary>
            Obtiene o establece un valor que indica si este <see cref="T:MCART.Types.Extensions.Timer"/>
            debe generar el evento <see cref="E:System.Timers.Timer.Elapsed"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.Timer.Start">
            <summary>
            Empieza a generar el evento 
            <see cref="E:System.Timers.Timer.Elapsed"/> al establecer 
            <see cref="P:MCART.Types.Extensions.Timer.Enabled"/> en <c>true</c>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.Timer.Stop">
            <summary>
            Deja de generar el evento <see cref="E:System.Timers.Timer.Elapsed"/>
            al establecer <see cref="P:MCART.Types.Extensions.Timer.Enabled"/> en <c>false</c>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.Timer.Reset">
            <summary>
            Reinicia este <see cref="T:MCART.Types.Extensions.Timer"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.Timer.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Types.Extensions.Timer"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.Timer.#ctor(System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Types.Extensions.Timer"/> y 
            establece la propiedad <see cref="P:System.Timers.Timer.Interval"/>
            en el número de milisegundos especificado.
            </summary>
            <param name="interval">
            Tiempo, en milisegundos, entre eventos. Este valor debe ser mayor
            que cero y menor que <see cref="F:System.Int32.MaxValue"/>.
            </param>
        </member>
        <member name="T:MCART.Types.Extensions.ColorExtensions">
            <summary>
            Extensiones de la estructura <see cref="T:MCART.Types.Color"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Extensions.ColorExtensions.AreClose(MCART.Types.Color,MCART.Types.Color,System.Single)">
            <summary>
            Determina si los colores son lo suficientemente similares.
            </summary>
            <returns>
            <c>true</c> si los colores son suficientemente similares, 
            <c>false</c> en caso contrario.</returns>
            <param name="c1">Primer <see cref="T:MCART.Types.Color"/> a comparar.</param>
            <param name="c2">Segundo Color a comparar.</param>
            <param name="margin">
            Margen de similitud. de forma predeterminada, se establece en  99%.
            </param>
        </member>
        <member name="M:MCART.Types.Extensions.ColorExtensions.Similarity(MCART.Types.Color,MCART.Types.Color)">
            <summary>
            Determina el porcentaje de similitud entre dos colores.
            </summary>
            <returns>
            Un <see cref="T:System.Single"/> que representa el porcentaje de similitud
            entre ambos colores.
            </returns>
            <param name="c1">Primer <see cref="T:MCART.Types.Color"/> a comparar.</param>
            <param name="c2">Segundo Color a comparar.</param>
        </member>
        <member name="M:MCART.Types.Extensions.ColorExtensions.Blend(MCART.Types.Color,MCART.Types.Color)">
            <summary>
            Realiza una mezcla entre los colores especificados.
            </summary>
            <param name="c1">El primer <see cref="T:MCART.Types.Color"/> a mezclar.</param>
            <param name="c2">El segundo <see cref="T:MCART.Types.Color"/> a mezclar.</param>
            <returns>Una mezcla entre los colores <paramref name="c1"/> y 
            <paramref name="c2"/>.
            </returns>
        </member>
        <member name="T:MCART.Types.Point3D">
            <summary>
            Tipo universal para un conjunto de coordenadas tridimensionales.
            </summary>
            <remarks>
            Esta estructura se declara como parcial, para permitir a cada
            implementación de MCART definir métodos para convertir a la clase
            correspondiente para los diferentes tipos de UI disponibles.
            </remarks>
        </member>
        <member name="F:MCART.Types.Point3D.X">
            <summary>
            Coordenada X.
            </summary>
        </member>
        <member name="F:MCART.Types.Point3D.Y">
            <summary>
            Coordenada Y.
            </summary>
        </member>
        <member name="F:MCART.Types.Point3D.Z">
            <summary>
            Coordenada Z.
            </summary>
        </member>
        <member name="M:MCART.Types.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Inicializa una nueva instancia de la estructura
            <see cref="T:MCART.Types.Point3D"/>.
            </summary>
        </member>
        <member name="M:MCART.Types.Point3D.FitsInCube(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Determina si el punto se encuentra dentro del cubo formado por los
            puntos tridimensionales especificados.
            </summary>
            <returns>
            <c>true</c> si el punto se encuentra dentro del cubo formado,
            <c>false</c> en caso contrario.
            </returns>
            <param name="p1">Punto 1.</param>
            <param name="p2">Punto 2.</param>
        </member>
        <member name="M:MCART.Types.Point3D.FitsInCube(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determina si el punto se encuentra dentro del cubo formado por los
            puntos tridimensionales especificados.
            </summary>
            <returns>
            <c>true</c> si el punto se encuentra dentro del cubo formado,
            <c>false</c> en caso contrario.
            </returns>
            <param name="x1">La primer coordenada x.</param>
            <param name="y1">La primer coordenada y.</param>
            <param name="z1">La primer coordenada z.</param>
            <param name="x2">La segunda coordenada x.</param>
            <param name="y2">La segunda coordenada y.</param>
            <param name="z2">La segunda coordenada z.</param>
        </member>
        <member name="M:MCART.Types.Point3D.Magnitude">
            <summary>
            Calcula la magnitud de las coordenadas.
            </summary>
            <returns>
            La magnitud resultante entre el punto y el orígen.
            </returns>
        </member>
        <member name="M:MCART.Types.Point3D.Magnitude(MCART.Types.Point3D)">
            <summary>
            Calcula la magnitud de las coordenadas desde el punto
            especificado.
            </summary>
            <returns>La magnitud resultante entre ambos puntos.</returns>
            <param name="fromPoint">Punto de referencia para calcular la
            magnitud.</param>
        </member>
        <member name="M:MCART.Types.Point3D.Magnitude(System.Double,System.Double,System.Double)">
            <summary>
            Calcula la magnitud de las coordenadas desde el punto
            especificado.
            </summary>
            <returns>
            La magnitud resultante entre el punto y las coordenadas
            especificadas.
            </returns>
            <param name="fromX">Coordenada X de orígen.</param>
            <param name="fromY">Coordenada Y de orígen.</param>
            <param name="fromZ">Coordenada Z de orígen.</param>
        </member>
        <member name="P:MCART.Types.Point3D.Origin">
            <summary>
            Obtiene un punto en el orígen. Este campo es de solo lectura.
            </summary>
            <value>
            Un <see cref="T:MCART.Types.Point3D"/> con sus coordenadas en el orígen.
            </value>
        </member>
        <member name="P:MCART.Types.Point3D.Nowhere">
            <summary>
            Obtiene un punto que no representa ninguna posición. Este campo es
            de solo lectura.
            </summary>
            <value>The nowhere.</value>
        </member>
        <member name="M:MCART.Types.Point3D.op_Addition(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Realiza una operación de suma sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La suma de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Addition(MCART.Types.Point3D,System.Double)">
            <summary>
            Realiza una operación de suma sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de suma.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point3D"/> cuyos vectores son la suma de los
            vectores originales + <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Subtraction(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Realiza una operación de resta sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La resta de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Subtraction(MCART.Types.Point3D,System.Double)">
            <summary>
            Realiza una operación de resta sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de resta.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point3D"/> cuyos vectores son la resta de los
            vectores originales - <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Multiply(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Realiza una operación de multiplicación sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La multiplicación de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Multiply(MCART.Types.Point3D,System.Double)">
            <summary>
            Realiza una operación de multiplicación sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de multiplicación.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point3D"/> cuyos vectores son la multiplicación
            de los vectores originales * <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Division(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Realiza una operación de división sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>La división de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Division(MCART.Types.Point3D,System.Double)">
            <summary>
            Realiza una operación de división sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de división.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point3D"/> cuyos vectores son la división de
            los vectores originales / <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Modulus(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Realiza una operación de resíduo sobre los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>El resíduo de los vectores de los puntos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Modulus(MCART.Types.Point3D,System.Double)">
            <summary>
            Realiza una operación de resíduo sobre el punto.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Operando de resíduo.</param>
            <returns>
            Un nuevo <see cref="T:MCART.Types.Point3D"/> cuyos vectores son el resíduo de los
            vectores originales % <paramref name="r"/>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Increment(MCART.Types.Point3D)">
            <summary>
            Incrementa en 1 los vectores del punto.
            </summary>
            <param name="p">Punto a incrementar.</param>
            <returns>Un punto con sus vectores incrementados en 1.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Decrement(MCART.Types.Point3D)">
            <summary>
            Decrementa en 1 los vectores del punto.
            </summary>
            <param name="p">Punto a decrementar.</param>
            <returns>Un punto con sus vectores decrementados en 1.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_UnaryPlus(MCART.Types.Point3D)">
            <summary>
            Convierte a positivos los vectores del punto.
            </summary>
            <param name="p">Punto a operar.</param>
            <returns>Un punto con sus vectores positivos.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_UnaryNegation(MCART.Types.Point3D)">
            <summary>
            Invierte el signo de los vectores del punto.
            </summary>
            <param name="p">Punto a operar.</param>
            <returns>Un punto con el signo de sus vectores invertido.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Equality(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Compara la igualdad de los vectores de los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>
            <c>true</c> si todos los vectores de ambos puntos son iguales;
            de lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.op_Inequality(MCART.Types.Point3D,MCART.Types.Point3D)">
            <summary>
            Compara la diferencia de los vectores de los puntos.
            </summary>
            <param name="l">Punto 1.</param>
            <param name="r">Punto 2.</param>
            <returns>
            <c>true</c> si los vectores de ambos puntos son diferentes;  de lo
            contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.Equals(System.Object)">
            <summary>
            Indica si esta instancia y un objeto especificado son iguales.
            </summary>
            <param name="obj">
            Objeto que se va a compara con la instancia actual.
            </param>
            <returns>
            <c>true</c> si esta instancia y <paramref name="obj"/> son iguales;
            de lo contrario, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Types.Point3D.GetHashCode">
            <summary>
            Devuelve el código Hash de esta instancia.
            </summary>
            <returns>El código Hash de esta instancia.</returns>
        </member>
        <member name="M:MCART.Types.Point3D.ToString">
            <summary>
            Convierte este objeto en su representación como una cadena.
            </summary>
            <returns>
            Una representación en forma de <see cref="T:System.String"/> de este objeto.
            </returns>
        </member>
        <member name="M:MCART.Types.Point3D.ToString(System.String,System.IFormatProvider)">
            <summary>
            Convierte este objeto en su representación como una cadena.
            </summary>
            <param name="format">Formato a utilizar.</param>
            <param name="formatProvider">Parámetro opcional.
            Proveedor de formato de la cultura a utilizar para dar formato a
            la representación como una cadena de este objeto. Si se omite,
            se utilizará <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </param>
            <returns>
            Una representación en forma de <see cref="T:System.String"/> de este objeto.
            </returns>
        </member>
        <member name="T:MCART.UI">
            <summary>
            Contiene varias herramientas de UI para utilizar en proyectos de
            Windows Presentation Framework.
            </summary>
            <summary>
            Módulo de funciones universales de UI.
            </summary>
            <summary>
            Módulo de funciones universales de UI para sistemas operativos
            Microsoft® Windows®.
            </summary>
        </member>
        <member name="T:MCART.UI.OrigControlColor">
            <summary>
            Contiene información de los controles modificados por la función
            <see cref="M:MCART.UI.Warn(System.Windows.Controls.Control,System.String)"/>.
            </summary>
        </member>
        <member name="F:MCART.UI.OrigControlColor.fore">
            <summary>
            Color primario original.
            </summary>
        </member>
        <member name="F:MCART.UI.OrigControlColor.bacg">
            <summary>
            Color de fondo original.
            </summary>
        </member>
        <member name="F:MCART.UI.OrigControlColor.rf">
            <summary>
            Referencia del control al cual se aplica.
            </summary>
        </member>
        <member name="F:MCART.UI.OrigControlColor.ttip">
            <summary>
            <see cref="T:System.Windows.Controls.ToolTip"/> original del control.
            </summary>
        </member>
        <member name="F:MCART.UI.origctrls">
            <summary>
            Lista privada de estados de los controles modificados por la función
            <see cref="M:MCART.UI.Warn(System.Windows.Controls.Control,System.String)"/>
            </summary>
        </member>
        <member name="F:MCART.UI.bEncLst">
            <summary>
            Lista privada de <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"/> cargados en el
            <see cref="T:System.AppDomain"/> actual.
            </summary>
        </member>
        <member name="M:MCART.UI.GetBitmapEncoders">
            <summary>
            Devuelve una colección de los códecs de mapas de bits disponibles.
            Soporta cargar códecs desde cualquier ensamblado cargado.
            </summary>
            <returns>
            Una lista con una nueva instancia de todos los códecs de mapa de
            bits disponibles.
            </returns>
        </member>
        <member name="M:MCART.UI.FlushBitmapEncoders">
            <summary>
            Limpia la lista en caché de los <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"/>
            cargados desde el <see cref="T:System.AppDomain"/> actual.
            </summary>
        </member>
        <member name="M:MCART.UI.Render(System.Windows.FrameworkElement)">
            <summary>
            Crea un mapa de bits de un <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="f">
            <see cref="T:System.Windows.FrameworkElement"/> a renderizar.
            </param>
            <returns>
            Un objeto <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"/> que contiene una imagen
            renderizada de <paramref name="f"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.Render(System.Windows.FrameworkElement,System.Int32)">
            <summary>
            Crea un mapa de bits de un <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="f">
            <see cref="T:System.Windows.FrameworkElement"/> a renderizar.
            </param>
            <param name="dpi">
            Valor de puntos por pulgada a utilizar para crear el mapa de bits.
            </param>
            <returns>
            Un objeto <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"/> que contiene una imagen
            renderizada de <paramref name="f"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.Render(System.Windows.FrameworkElement,System.Windows.Size,System.Int32)">
            <summary>
            Crea un mapa de bits de un <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="f">
            <see cref="T:System.Windows.FrameworkElement"/> a renderizar.
            </param>
            <param name="size">
            Tamaño del canvas en donde se renderizará el control.
            </param>
            <param name="dpi">
            Valor de puntos por pulgada a utilizar para crear el mapa de bits.
            </param>
            <returns>
            Un objeto <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"/> que contiene una imagen
            renderizada de <paramref name="f"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.Render(System.Windows.FrameworkElement,System.Windows.Size,System.Windows.Size,System.Int32)">
            <summary>
            Crea un mapa de bits de un <see cref="T:System.Windows.FrameworkElement"/>
            estableciendo el tamaño en el cual se dibujará el control, por lo
            que no necesita haberse mostrado en la interfaz de usuario.
            </summary>
            <param name="f">
            <see cref="T:System.Windows.FrameworkElement"/> a renderizar.
            </param>
            <param name="inSize">
            Tamaño del control a renderizar.
            </param>
            <param name="outSize">
            Tamaño del canvas en donde se renderizará el control.
            </param>
            <param name="dpi">
            Valor de puntos por pulgada a utilizar para crear el mapa de bits.
            </param>
            <returns>
            Un objeto <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"/> que contiene una imagen
            renderizada de <paramref name="f"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.GetCircleArc(System.Double,System.Double,System.Double)">
            <summary>
            Genera un arco de círculo que puede usarse en Windows Presentation
            Framework.
            </summary>
            <param name="radius">Radio del arco a generar.</param>
            <param name="angle">Ángulo, o tamaño del arco.</param>
            <param name="thickness">
            Grosor del trazo del arco. Ayuda a balancear el grosor del trazo y
            el radio para lograr un tamaño más consistente.
            </param>
            <returns>
            Un <see cref="T:System.Windows.Media.PathGeometry"/> que contiene el arco generado por
            esta función.
            </returns>
        </member>
        <member name="M:MCART.UI.GetCircleArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Genera un arco de círculo que puede usarse en Windows Presentation
            Framework.
            </summary>
            <param name="radius">Radio del arco a generar.</param>
            <param name="startAngle">Ángulo inicial del arco.</param>
            <param name="endAngle">Ángulo final del arco.</param>
            <param name="thickness">
            Grosor del trazo del arco. Ayuda a balancear el grosor del trazo y
            el radio para lograr un tamaño más consistente.
            </param>
            <returns>
            Un <see cref="T:System.Windows.Media.PathGeometry"/> que contiene el arco generado por
            esta función.
            </returns>
        </member>
        <member name="M:MCART.UI.Warn(System.Windows.Controls.Control,System.String)">
            <summary>
            Establece un estado de error para un control.
            </summary>
            <param name="c">Control a advertir.</param>
            <param name="ttip">
            <see cref="T:System.Windows.Controls.ToolTip"/> con un mensaje de error para mostrar.
            </param>
        </member>
        <member name="M:MCART.UI.ClearWarn(System.Windows.Controls.Control)">
            <summary>
            Quita el estado de error de un control.
            </summary>
            <param name="c">Control a limpiar.</param>
        </member>
        <member name="M:MCART.UI.IsWarned(System.Windows.Controls.Control)">
            <summary>
            Obtiene un valor que determina si el control está advertido.
            </summary>
            <param name="c">Control a comprobar.</param>
            <returns><c>true</c> si el control está mostrando una advertencia;
            de lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.UI.CollapseControls(System.Windows.UIElement[])">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Collapsed"/> a una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a colapsar.
            </param>
        </member>
        <member name="M:MCART.UI.CollapseControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Collapsed"/> a una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a colapsar.
            </param>
        </member>
        <member name="M:MCART.UI.HideControls(System.Windows.UIElement[])">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Hidden"/> a una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a ocultar.
            </param>
        </member>
        <member name="M:MCART.UI.HideControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Hidden"/> a una lista de controles.
            </summary>
            <param name="ctrls"
            >Arreglo de <see cref="T:System.Windows.UIElement"/> a ocultar.
            </param>
        </member>
        <member name="M:MCART.UI.ShowControls(System.Windows.UIElement[])">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Visible"/> a una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a mostrar.
            </param>
        </member>
        <member name="M:MCART.UI.ShowControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Establece la propiedad <see cref="P:System.Windows.UIElement.Visibility"/> a
            <see cref="F:System.Windows.Visibility.Visible"/> a una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a mostrar.
            </param>
        </member>
        <member name="M:MCART.UI.DisableControls(System.Windows.UIElement[])">
            <summary>
            Deshabilita una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a deshabilitar.
            </param>
        </member>
        <member name="M:MCART.UI.DisableControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Deshabilita una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a deshabilitar.
            </param>
        </member>
        <member name="M:MCART.UI.EnableControls(System.Windows.UIElement[])">
            <summary>
            Habilita una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a habilitar.
            </param>
        </member>
        <member name="M:MCART.UI.EnableControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Habilita una lista de controles.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a habilitar.
            </param>
        </member>
        <member name="M:MCART.UI.ToggleControls(System.Windows.UIElement[])">
            <summary>
            Habilita o deshabilita una lista de controles según su estado
            previo.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a habilitar/deshabilitar.
            </param>
        </member>
        <member name="M:MCART.UI.ToggleControls(System.Collections.Generic.IEnumerable{System.Windows.UIElement})">
            <summary>
            Habilita o deshabilita una lista de controles según su estado
            previo.
            </summary>
            <param name="ctrls">
            Arreglo de <see cref="T:System.Windows.UIElement"/> a habilitar/deshabilitar.
            </param>
        </member>
        <member name="M:MCART.UI.Clear(System.Windows.Controls.TextBox)">
            <summary>
            Limpia el texto del control.
            </summary>
            <param name="control">Control a limpiar.</param>
        </member>
        <member name="M:MCART.UI.ToImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Convierte un <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> en un 
            <see cref="T:System.Windows.Media.Imaging.BitmapImage"/>.
            </summary>
            <param name="bs"><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> a convertir.</param>
            <returns>
            Un <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> que contiene la imagen obtenida desde
            un <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.PickBrush">
            <summary>
            Devuelve un <see cref="T:System.Drawing.Brush"/> aleatorio.
            </summary>
            <returns>
            Un <see cref="T:System.Drawing.Brush"/> seleccionado aleatoriamente.
            </returns>
        </member>
        <member name="M:MCART.UI.AllocConsole">
            <summary>
            Abre una consola para la aplicación.
            </summary>
            <returns><c>true</c> si la llamada obtuvo correctamente una consola; de lo contrario, <c>false</c>.</returns>
            <remarks>
            Esta función es exclusiva para sistemas operativos Microsoft
            Windows®.
            </remarks>
        </member>
        <member name="M:MCART.UI.FreeConsole">
            <summary>
            Libera la consola de la aplicación.
            </summary>
            <returns><c>true</c> si la llamada liberó correctamente la consola; de lo contrario, <c>false</c>.</returns>
            <remarks>
            Esta función es exclusiva para sistemas operativos Microsoft
            Windows®.
            </remarks>
        </member>
        <member name="M:MCART.UI.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            Obtiene la información física del contexto del dispositivo gráfico
            especificado.
            </summary>
            <param name="hdc">Identificador de contexto a verificar.</param>
            <param name="nIndex">Propiedad a obtener.</param>
            <returns>
            Un <see cref="T:System.Int32"/> que representa el valor obtenido.
            </returns>
            <remarks>
            Esta función es exclusiva para sistemas operativos Microsoft
            Windows®.
            </remarks>
        </member>
        <member name="M:MCART.UI.GetScalingFactor">
            <summary>
            Obtiene el factor de escala de la interfaz gráfica.
            </summary>
            <returns>
            Un valor <see cref="T:System.Single"/> que representa el factor de escala
            utilizado para dibujar la interfaz gráfica del sistema.
            </returns>
        </member>
        <member name="M:MCART.UI.GetScalingFactor(System.IntPtr)">
            <summary>
            Obtiene el factor de escala de la ventana especificada por
            el <see cref="T:System.IntPtr"/> <paramref name="Hwnd"/>.
            </summary>
            <param name="Hwnd">Identificador de ventana a verificar.</param>
            <returns>
            Un valor <see cref="T:System.Single"/> que representa el factor de escala
            utilizado para dibujar la ventana especificada por 
            <paramref name="Hwnd"/>.
            </returns>
        </member>
        <member name="M:MCART.UI.GetXDpi">
            <summary>
            Obtiene la resolución horizontal de la pantalla en DPI.
            </summary>
            <returns>
            Un valor entero que indica la resolución horizontal de la pantalla 
            en Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="M:MCART.UI.GetYDpi">
            <summary>
            Obtiene la resolución vertical de la pantalla en DPI.
            </summary>
            <returns>
            Un valor entero que indica la resolución vertical de la pantalla en
            Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="M:MCART.UI.GetXDpi(System.IntPtr)">
            <summary>
            Obtiene la resolución horizontal de la ventana en DPI.
            </summary>
            <param name="Hwnd">Identificador de ventana a verificar.</param>
            <returns>
            Un valor entero que indica la resolución horizontal de la ventana 
            en Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="M:MCART.UI.GetYDpi(System.IntPtr)">
            <summary>
            Obtiene la resolución vertical de la ventana en DPI.
            </summary>
            <param name="Hwnd">Identificador de ventana a verificar.</param>
            <returns>
            Un valor entero que indica la resolución vertical de la ventana en
            Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="M:MCART.UI.GetDpi(System.IntPtr)">
            <summary>
            Obtiene las resolución horizontal y vertical de la ventana en DPI.
            </summary>
            <param name="Hwnd">Identificador de ventana a verificar.</param>
            <returns>
            Un <see cref="T:System.Drawing.Point"/> que indica la resolución de
            la ventana en Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="M:MCART.UI.GetDpi">
            <summary>
            Obtiene las resolución horizontal y vertical de la pantalla en DPI.
            </summary>
            <returns>
            Un <see cref="T:System.Drawing.Point"/> que indica la resolución de
            la pantalla en Puntos Por Pulgada (DPI).
            </returns>
        </member>
        <member name="T:MCART.Attributes.TextAttributeBase">
            <summary>
            Clase base para los atributos basados en texto.
            </summary>
        </member>
        <member name="F:MCART.Attributes.TextAttributeBase.Value">
            <summary>
            Obtiene el valor asociado a este atributo.
            </summary>
            <value>El valor de este atributo</value>
        </member>
        <member name="M:MCART.Attributes.TextAttributeBase.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Attributes.TextAttributeBase"/>.
            </summary>
            <param name="attrValue">Valor de este atributo.</param>
        </member>
        <member name="T:MCART.Attributes.IntAttributeBase">
            <summary>
            Clase base para los atributos basados en números.
            </summary>
        </member>
        <member name="F:MCART.Attributes.IntAttributeBase.Value">
            <summary>
            Obtiene el valor asociado a este atributo.
            </summary>
        </member>
        <member name="M:MCART.Attributes.IntAttributeBase.#ctor(System.Int32)">
            <summary>
            Crea una nueva isntancia de la clase 
            <see cref="T:MCART.Attributes.IntAttributeBase"/>.
            </summary>
            <param name="attrValue">Valor de este atributo.</param>
        </member>
        <member name="T:MCART.Attributes.FloatAttributeBase">
            <summary>
            Clase base para los atributos basados en números.
            </summary>
        </member>
        <member name="F:MCART.Attributes.FloatAttributeBase.Value">
            <summary>
            Obtiene el valor asociado a este atributo.
            </summary>
        </member>
        <member name="M:MCART.Attributes.FloatAttributeBase.#ctor(System.Single)">
            <summary>
            Crea una nueva isntancia de la clase 
            <see cref="T:MCART.Attributes.FloatAttributeBase"/>.
            </summary>
            <param name="attrValue">Valor de este atributo.</param>
        </member>
        <member name="T:MCART.Attributes.BoolAttributeBase">
            <summary>
            Clase base para los atributos basados en valores booleanos.
            </summary>
        </member>
        <member name="F:MCART.Attributes.BoolAttributeBase.Value">
            <summary>
            Obtiene el valor asociado a este atributo.
            </summary>
            <value>El valor de este atributo</value>
        </member>
        <member name="M:MCART.Attributes.BoolAttributeBase.#ctor(System.Boolean)">
            <summary>
            Crea una nueva isntancia de la clase 
            <see cref="T:MCART.Attributes.BoolAttributeBase"/>.
            </summary>
            <param name="attrValue">Valor de este atributo.</param>
        </member>
        <member name="T:MCART.Attributes.VersionAttributeBase">
            <summary>
            Clase base para los atributos basados en valores booleanos.
            </summary>
        </member>
        <member name="F:MCART.Attributes.VersionAttributeBase.Value">
            <summary>
            Obtiene el valor asociado a este atributo.
            </summary>
            <value>El valor de este atributo</value>
        </member>
        <member name="M:MCART.Attributes.VersionAttributeBase.#ctor(System.Version)">
            <summary>
            Crea una nueva isntancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttributeBase"/>.
            </summary>
            <param name="attrValue">Valor de este atributo.</param>
        </member>
        <member name="T:MCART.Attributes.ThunkAttribute">
            <summary>
            Marca un elemento como método de Thunking (facilita la llamada de otros
            métodos).
            </summary>
        </member>
        <member name="T:MCART.Attributes.NotPluginAttribute">
            <summary>
            Marca una clase para no ser cargada como 
            <see cref="T:MCART.PluginSupport.IPlugin"/>, a pesar de implementar
            <see cref="T:MCART.PluginSupport.IPlugin"/>.
            </summary>
        </member>
        <member name="T:MCART.Attributes.VersionAttribute">
            <summary>
            Especifica la versión de un elemento
            </summary>
        </member>
        <member name="M:MCART.Attributes.VersionAttribute.#ctor(System.Version)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="M:MCART.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="major">Número de versión mayor.</param>
            <param name="minor">Número de versión menor.</param>
            <param name="build">Número de compilación.</param>
            <param name="rev">Número de revisión.</param>
        </member>
        <member name="M:MCART.Attributes.VersionAttribute.#ctor(System.Single)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="majorMinor">Número de versión mayor/menor.</param>
        </member>
        <member name="T:MCART.Attributes.MinMCARTVersionAttribute">
            <summary>
            Especifica la versión mínima de MCART requerida por el elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.MinMCARTVersionAttribute.#ctor(System.Version)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="M:MCART.Attributes.MinMCARTVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="major">Número de versión mayor.</param>
            <param name="minor">Número de versión menor.</param>
            <param name="build">Número de compilación.</param>
            <param name="rev">Número de revisión.</param>
        </member>
        <member name="M:MCART.Attributes.MinMCARTVersionAttribute.#ctor(System.Single)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="majorMinor">Número de versión mayor/menor.</param>
        </member>
        <member name="T:MCART.Attributes.TargetMCARTVersionAttribute">
            <summary>
            Especifica la versión de MCART recomendada para el elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.TargetMCARTVersionAttribute.#ctor(System.Version)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="M:MCART.Attributes.TargetMCARTVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="major">Número de versión mayor.</param>
            <param name="minor">Número de versión menor.</param>
            <param name="build">Número de compilación.</param>
            <param name="rev">Número de revisión.</param>
        </member>
        <member name="M:MCART.Attributes.TargetMCARTVersionAttribute.#ctor(System.Single)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.VersionAttribute"/>.
            </summary>
            <param name="majorMinor">Número de versión mayor/menor.</param>
        </member>
        <member name="T:MCART.Attributes.BetaAttribute">
            <summary>
            Marca un elemento como versión Beta.
            </summary>
        </member>
        <member name="T:MCART.Attributes.UnsecureAttribute">
            <summary>
            Marca un elemento como inseguro.
            </summary>
        </member>
        <member name="T:MCART.Attributes.UnstableAttribute">
            <summary>
            Marca un elemento como inestable.
            </summary>
        </member>
        <member name="T:MCART.Attributes.NameAttribute">
            <summary>
            Establece un nombre personalizado para mostrar del elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.NameAttribute.#ctor(System.String)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.NameAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="T:MCART.Attributes.DescriptionAttribute">
            <summary>
            Establece una descripción para el elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.DescriptionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="T:MCART.Attributes.AuthorAttribute">
            <summary>
            Establece el autor del elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.AuthorAttribute.#ctor(System.String)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.DescriptionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="T:MCART.Attributes.CopyrightAttribute">
            <summary>
            Establece el autor del elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.CopyrightAttribute.#ctor(System.String)">
            <summary>
            Inicializa unanueva instancia de la clase 
            <see cref="T:MCART.Attributes.DescriptionAttribute"/>.
            </summary>
            <param name="attrValue">Valor del atributo.</param>
        </member>
        <member name="T:MCART.Attributes.LicenseTextAttribute">
            <summary>
            Establece el texto de licencia a asociar con el elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.LicenseTextAttribute.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Attributes.LicenseTextAttribute"/>.
            </summary>
            <param name="attrValue">Texto de la licencia.</param>
        </member>
        <member name="T:MCART.Attributes.LicenseFileAttribute">
            <summary>
            Establece un archivo de licencia a asociar con el elemento.
            </summary>
        </member>
        <member name="M:MCART.Attributes.LicenseFileAttribute.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Attributes.LicenseFileAttribute"/>.
            </summary>
            <param name="attrValue">
            Ruta del archivo de licencia adjunto.
            </param>
        </member>
        <member name="T:MCART.Attributes.UnusableAttribute">
            <summary>
            Marca un elemento como no utilizable.
            </summary>
        </member>
        <member name="T:MCART.Attributes.LenghtyAttribute">
            <summary>
            Indica que un elemento podría tardar en ejecutarse, y por lo tanto,
            es capaz de reportar su progreso.
            </summary>
        </member>
        <member name="T:MCART.Attributes.StubAttribute">
            <summary>
            Indica que un elemento no está completo, y que no posee la
            funcionalidad necesaria.
            </summary>
        </member>
        <member name="T:MCART.Attributes.ServerAttribute">
            <summary>
            Attributo que define a un servidor.
            </summary>
            <remarks>
            Es posible establecer este atributo más de una vez en un mismo elemento.
            Los servidores adicionales definidos se utilizarán como redundancias, en
            caso que alguno de los servidores falle o no se encuentre accesible.
            </remarks>
        </member>
        <member name="P:MCART.Attributes.ServerAttribute.Server">
            <summary>
            Obtiene o establece el servidor.
            </summary>
        </member>
        <member name="P:MCART.Attributes.ServerAttribute.Port">
            <summary>
            Obtiene o establece el puerto de conexión del servidor.
            </summary>
        </member>
        <member name="M:MCART.Attributes.ServerAttribute.#ctor(System.String,System.UInt16)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Attributes.ServerAttribute"/> estableciendo el servidor y el puerto
            al cual este atributo hará referencia.
            </summary>
            <param name="server">Nombre del servidor / Dirección IP.</param>
            <param name="port">Número de puerto del servidor.</param>
        </member>
        <member name="M:MCART.Attributes.ServerAttribute.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Attributes.ServerAttribute"/> estableciendo el servidor y el puerto
            al cual este atributo hará referencia.
            </summary>
            <param name="server">
            Nombre del servidor / Dirección IP. También incluye el número de 
            puerto en el formato <c>"servidor:puerto"</c>.
            </param>
        </member>
        <member name="M:MCART.Attributes.ServerAttribute.#ctor(System.Net.IPEndPoint)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Attributes.ServerAttribute"/> a partir de un objeto
            <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
            <param name="endPoint">
            <see cref="T:System.Net.IPEndPoint"/> que apunta al servidor.
            </param>
        </member>
        <member name="T:MCART.Exceptions.InterfaceExpectedException">
            <summary>
            Excepcion que se produce cuando un método o función esperaba una
            interfaz como argumento.
            </summary>
        </member>
        <member name="F:MCART.Exceptions.InterfaceExpectedException.OffendingType">
            <summary>
            Tipo que ha causado la excepción.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="T">Tipo que generó la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes
            the exception.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.String,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes
            the exception.</param>
            <param name="T">Tipo que generó la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="inner">The exception that is the cause of the current
            exception.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.Exception,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="inner">The exception that is the cause of the current
            exception.</param>
            <param name="T">Tipo que generó la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes
            the exception.</param>
            <param name="inner">The exception that is the cause of the current
            exception. </param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.String,System.Exception,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes
            the exception.</param>
            <param name="inner">The exception that is the cause of the current
            exception.</param>
            <param name="T">Tipo que generó la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="context">The contextual information about the source or
            destination.</param>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceExpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="context">The contextual information about the source or
            destination.</param>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="T">Tipo que generó la excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.NotPluginException">
            <summary>
            Excepción que se produce al intentar cargar plugins desde un ensamblado
            que no contiene ninguno.
            </summary>
        </member>
        <member name="F:MCART.Exceptions.NotPluginException.OffendingAssembly">
            <summary>
            The offending assembly.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.NotPluginException.#ctor(System.Reflection.Assembly)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotPluginException"/>.
            </summary>
            <param name="offendingAssembly">Offending assembly.</param>
        </member>
        <member name="M:MCART.Exceptions.NotPluginException.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotPluginException"/>.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that describes the exception.</param>
            <param name="offendingAssembly">Offending assembly.</param>
        </member>
        <member name="M:MCART.Exceptions.NotPluginException.#ctor(System.Exception,System.Reflection.Assembly)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotPluginException"/>.
            </summary>
            <param name="inner">
            <see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="offendingAssembly">Offending assembly.</param>
        </member>
        <member name="M:MCART.Exceptions.NotPluginException.#ctor(System.String,System.Exception,System.Reflection.Assembly)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotPluginException"/>.
            </summary>
            <param name="message">
            Un <see cref="T:System.String"/> que describe a la excepción.
            </param>
            <param name="inner">
            <see cref="T:System.Exception"/> que es la causa de esta excepción.
            </param>
            <param name="offendingAssembly">Offending assembly.</param>
        </member>
        <member name="M:MCART.Exceptions.NotPluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Reflection.Assembly)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InterfaceExpectedException"/>.
            </summary>
            <param name="context">
            The contextual information about the source or destination.
            </param>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="offendingAssembly">Offending assembly.</param>
        </member>
        <member name="T:MCART.Exceptions.EmptyCollectionException`1">
            <summary>
            Excepción que se produce cuando un <see cref="T:System.Collections.Generic.IEnumerable`1"/> está 
            vacío.
            </summary>
        </member>
        <member name="F:MCART.Exceptions.EmptyCollectionException`1.OffendingCollection">
            <summary>
            Colección a la que se intentó acceder.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.Exception,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="offendingList">Offending list.</param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="offendingCollection">Colección a la que se intentó acceder.</param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="offendingCollection">Colección a la que se intentó acceder.</param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="offendingCollection">Colección a la que se intentó acceder.</param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:MCART.Exceptions.EmptyCollectionException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.EmptyCollectionException`1"/> class
            </summary>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
        </member>
        <member name="T:MCART.Exceptions.InterfaceNotImplementedException">
            <summary>
            Excepcion que se produce cuando se solicita cargar un <see cref="T:MCART.PluginSupport.Plugin"/> con la interfaz especificada, pero no la implementa.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InterfaceNotImplementedException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="F:MCART.Exceptions.InterfaceNotImplementedException.MissingInterface">
            <summary>
            Obtiene el tipo de la interfaz que se ha solicitado cargar
            </summary>
            <returns></returns>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor">
            <summary>
            Inicializa una nueva instancia de este objeto con los valores predeterminados, sin establecer la instancia solicitada que generó el error
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de este objeto con la excepción interna que causó esta excepción
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de este objeto especificando el tipo que causó la excepción
            </summary>
            <param name="T">Tipo que generó la excepción</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.Type,System.Exception)">
            <summary>
            Inicializa una nueva instancia de este objeto especificando el tipo que causó la excepción, además de la <see cref="T:System.Exception"/> que generó esta.
            </summary>
            <param name="T">Tipo que generó la excepción</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de este objeto con el mensaje especificado
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InterfaceNotImplementedException.#ctor(System.String,System.Exception,System.Type)">
            <summary>
            Inicializa una nueva instancia de este objeto especificando el mensaje, la <see cref="T:System.Exception"/> y el tipo que generó esta excepción.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="T">Tipo que generó la excepción</param>
        </member>
        <member name="T:MCART.Exceptions.DirectoryIsFullException">
            <summary>
            Excepción que se produce cuando se determina que el directorio está lleno
            </summary>
        </member>
        <member name="F:MCART.Exceptions.DirectoryIsFullException.OffendingDirectory">
            <summary>
            Directorio al que se intentó escribir.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.DirectoryIsFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DirectoryIsFullException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.DirectoryIsFullException.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DirectoryIsFullException"/>.
            </summary>
            <param name="OffendingDirectory">Offending directory.</param>
        </member>
        <member name="M:MCART.Exceptions.DirectoryIsFullException.#ctor(System.Exception,System.IO.DirectoryInfo)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DirectoryIsFullException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="OffendingDirectory">Offending directory.</param>
        </member>
        <member name="M:MCART.Exceptions.DirectoryIsFullException.#ctor(System.String,System.IO.DirectoryInfo)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DirectoryIsFullException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="OffendingDirectory">Offending directory.</param>
        </member>
        <member name="M:MCART.Exceptions.DirectoryIsFullException.#ctor(System.String,System.Exception,System.IO.DirectoryInfo)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DirectoryIsFullException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="OffendingDirectory">Offending directory.</param>
        </member>
        <member name="T:MCART.Exceptions.InvalidPasswordException">
            <summary>
            Excepción que se produce si la contraseña es incorrecta
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPasswordException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPasswordException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPasswordException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidPasswordException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPasswordException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPasswordException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPasswordException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPasswordException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.FeatureNotAvailableException">
            <summary>
            Excepción que se produce al intentar utilizar una característica no disponible
            </summary>
        </member>
        <member name="M:MCART.Exceptions.FeatureNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.FeatureNotAvailableException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.FeatureNotAvailableException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.FeatureNotAvailableException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.FeatureNotAvailableException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.FeatureNotAvailableException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.FeatureNotAvailableException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.FeatureNotAvailableException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.FeatureNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.FeatureNotAvailableException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.TooManyArgumentsException">
            <summary>
            Excepción que se produce al enviar demasiados parámetros a un método
            </summary>
        </member>
        <member name="M:MCART.Exceptions.TooManyArgumentsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooManyArgumentsException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.TooManyArgumentsException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooManyArgumentsException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.TooManyArgumentsException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooManyArgumentsException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.TooManyArgumentsException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooManyArgumentsException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.TooManyArgumentsException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooManyArgumentsException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.TooFewArgumentsException">
            <summary>
            Excepción que se produce al enviar muy pocos parámetros a un método
            </summary>
        </member>
        <member name="M:MCART.Exceptions.TooFewArgumentsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooFewArgumentsException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.TooFewArgumentsException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooFewArgumentsException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.TooFewArgumentsException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooFewArgumentsException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.TooFewArgumentsException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooFewArgumentsException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.TooFewArgumentsException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.TooFewArgumentsException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.MissingArgumentException">
            <summary>
            Excepción que se produce cuando falta un argumento
            </summary>
        </member>
        <member name="M:MCART.Exceptions.MissingArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.MissingArgumentException"/>.
            </summary>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.MissingArgumentException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.MissingArgumentException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.MissingArgumentException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.MissingArgumentException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.MissingArgumentException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.MissingArgumentException"/>.
            </summary>
            <param name="ArgumentName">Argument name.</param>
        </member>
        <member name="M:MCART.Exceptions.MissingArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.MissingArgumentException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.InvalidReturnValueException">
            <summary>
            Excepción que se produce cuando se detecta que una función ha devuelto
            un valor inválido sin generar una excepción.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidReturnValueException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidReturnValueException"/> .
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.Delegate)">
            <summary>
            Inicializa una nueva instancia de la excepción con el delegado
            especificado.
            </summary>
            <param name="Function"><see cref="T:System.Delegate"/> cuyo resultado causó
            la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la excepción especificando el nombre de
            la función.
            </summary>
            <param name="FunctionName">Nombre de la función cuyo resultado ha causado la excepción</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.Delegate,System.Object)">
            <summary>
            Inicializa una nueva instancia de este objeto con la función y el valor
            devuelto especificados.
            </summary>
            <param name="Function"><see cref="T:System.Delegate"/> cuyo resultado causó
            la excepción.</param>
            <param name="ReturnValue">Valor inválido que ha causado esta
            excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.String,System.Object)">
            <summary>
            Inicializa una nueva instancia de este objeto con la función y el valor
            devuelto especificados.
            </summary>
            <param name="FunctionName">Nombre de la función cuyo resultado ha
            causado la excepción.</param>
            <param name="ReturnValue">Valor inválido que ha causado esta
            excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de esta excepción con el mensaje y la
            excepción interna especificadas.
            </summary>
            <param name="message">Mensaje informativo acerca de esta excepción.</param>
            <param name="inner">Excepción interna que causó esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.Delegate,System.Object,System.Exception)">
            <summary>
            Inicializa una nueva instancia de este objeto con la función y el valor
            devuelto especificados.
            </summary>
            <param name="Function"><see cref="T:System.Delegate"/> cuyo resultado causó
            la excepción.</param>
            <param name="ReturnValue">Valor inválido que ha causado esta
            excepción.</param>
            <param name="inner">Excepción interna que causó esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidReturnValueException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            Inicializa una nueva instancia de este objeto con la función y el valor
            devuelto especificados.
            </summary>
            <param name="FunctionName">Nombre de la función cuyo resultado ha
            causado la excepción.</param>
            <param name="ReturnValue">Valor inválido que ha causado esta
            excepción.</param>
            <param name="inner">Excepción interna que causó esta excepción.</param>
        </member>
        <member name="F:MCART.Exceptions.InvalidReturnValueException.OffendingFunction">
            <summary>
            Obtiene el delegado del método que ha causado la excepción
            </summary>
            <returns>Un objeto <see cref="T:System.Delegate"/> cuyo resultado causó la excepción</returns>
        </member>
        <member name="F:MCART.Exceptions.InvalidReturnValueException.OffendingFunctionName">
            <summary>
            Obtiene el nombre de la función que ha causado la excepción
            </summary>
            <returns>El nombre de la función cuyo resultado causó la excepción</returns>
        </member>
        <member name="F:MCART.Exceptions.InvalidReturnValueException.OffendingReturnValue">
            <summary>
            Obtiene el valor que ha causado la excepción
            </summary>
            <returns>El valor inválido devuelto por la función, causante de la excepción</returns>
        </member>
        <member name="T:MCART.Exceptions.PluginException">
            <summary>
            Excepción que produce un <see cref="T:MCART.PluginSupport.Plugin"/> al encontrar un error
            </summary>
        </member>
        <member name="F:MCART.Exceptions.PluginException.OffendingPlugin">
            <summary>
            The offending plugin.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(MCART.PluginSupport.IPlugin)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="Plugin">Plugin.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(MCART.PluginSupport.IPlugin,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="Plugin">Plugin.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(MCART.PluginSupport.IPlugin,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="Plugin">Plugin.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(MCART.PluginSupport.IPlugin,System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="Plugin">Plugin.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.PluginException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="T:MCART.Exceptions.PluginNeededException">
            <summary>
            Excepción que se produce cuando se requere un plugin para continuar
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginNeededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.PluginNeededException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.PluginNeededException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNeededException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginNeededException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNeededException"/>.
            </summary>
            <param name="ClassType">Class type.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginNeededException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNeededException"/>.
            </summary>
            <param name="ClassName">Class name.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginNeededException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNeededException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="F:MCART.Exceptions.PluginNeededException.RequiredClassType">
            <summary>
            Tipo de clase requerida.
            </summary>
        </member>
        <member name="T:MCART.Exceptions.PluginInitializationException">
            <summary>
            Excepción que se produce cuando un <see cref="T:MCART.PluginSupport.Plugin"/> encuentra un error al inicializarse.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.PluginInitializationException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.PluginInitializationException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginInitializationException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginInitializationException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginInitializationException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginInitializationException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.InvalidPluginClassException">
            <summary>
            Excepción que se produce cuando la clase no puede ser cargada como <see cref="T:MCART.PluginSupport.Plugin"/>
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidPluginClassException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPluginClassException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidPluginClassException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.
            </summary>
            <param name="ClassType">Class type.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPluginClassException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.
            </summary>
            <param name="ClassName">Nombre de la clase que es la causa de este 
            <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidPluginClassException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidPluginClassException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="F:MCART.Exceptions.InvalidPluginClassException.RequiredClassType">
            <summary>
            Tipo de clase requerida.
            </summary>
        </member>
        <member name="T:MCART.Exceptions.PluginClassNotFoundException">
            <summary>
            Excepción que se produce cuando un <see cref="T:System.Reflection.Assembly"/> no contiene la clase especificada.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginClassNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.PluginClassNotFoundException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.PluginClassNotFoundException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginClassNotFoundException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginClassNotFoundException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginClassNotFoundException"/>.
            </summary>
            <param name="ClassType">Class type.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginClassNotFoundException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginClassNotFoundException"/>.
            </summary>
            <param name="ClassName">Class name.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginClassNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginClassNotFoundException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="F:MCART.Exceptions.PluginClassNotFoundException.RequiredClassType">
            <summary>
            Tipo de clase requerida.
            </summary>
        </member>
        <member name="T:MCART.Exceptions.StackUnderflowException">
            <summary>
            Excepción que se produce al intentar remover un objeto de una pila vacía
            </summary>
        </member>
        <member name="M:MCART.Exceptions.StackUnderflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.StackUnderflowException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.StackUnderflowException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.StackUnderflowException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.StackUnderflowException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.StackUnderflowException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.StackUnderflowException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.StackUnderflowException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.InvalidDatabaseException">
            <summary>
            Excepción que se produce cuando una base de datos no es válida.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidDatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidDatabaseException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InvalidDatabaseException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidDatabaseException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidDatabaseException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Exceptions.InvalidDatabaseException"/>.
            </summary>
            <param name="message">
            Un <see cref="T:System.String"/> que describe a la excepción.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InvalidDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Exceptions.InvalidDatabaseException"/>.
            </summary>
            <param name="message">
            Un <see cref="T:System.String"/> que describe a la excepción.
            </param>
            <param name="inner">
            <see cref="T:System.Exception"/> que es la causa de esta excepción.
            </param>
        </member>
        <member name="T:MCART.Exceptions.NotMyDatabaseException">
            <summary>
            Excepción que se produce cuando una base de datos no corresponde a la
            aplicación.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.NotMyDatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotMyDatabaseException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.NotMyDatabaseException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Exceptions.NotMyDatabaseException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.NotMyDatabaseException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Exceptions.NotMyDatabaseException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.NotMyDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.NotMyDatabaseException"/>.
            </summary>
            <param name="message">
            Un <see cref="T:System.String"/> que describe a la excepción.
            </param>
            <param name="inner">
            <see cref="T:System.Exception"/> que es la causa de esta excepción.
            </param>
        </member>
        <member name="T:MCART.Exceptions.DataNotFoundException">
            <summary>
            Excepción  que se produce al no encontrar los datos solicitados.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.DataNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.DataNotFoundException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.DataNotFoundException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataNotFoundException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.DataNotFoundException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataNotFoundException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.DataNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataNotFoundException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.InsufficientDataException">
            <summary>
            Excepción que se produce al no haber suficientes datos
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InsufficientDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InsufficientDataException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.InsufficientDataException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InsufficientDataException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InsufficientDataException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InsufficientDataException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InsufficientDataException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InsufficientDataException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InsufficientDataException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InsufficientDataException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.UnknownTypeException">
            <summary>
            Excepción que se produce al hacer referencia a un tipo desconodico
            </summary>
        </member>
        <member name="M:MCART.Exceptions.UnknownTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.UnknownTypeException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.UnknownTypeException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.UnknownTypeException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.UnknownTypeException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.UnknownTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.UnknownTypeException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.UnknownTypeException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.UnknownTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.UnknownTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.InvalidTypeException">
            <summary>
            Excepción que se produce al hacer referencia a un tipo inválido
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="F:MCART.Exceptions.InvalidTypeException.OffendingType">
            <summary>
            Tipo que ha causado la excepción.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="Type">Tipo que ha causado la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.String,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="Type">Tipo que ha causado la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.Exception,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="Type">Tipo que ha causado la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.InvalidTypeException.#ctor(System.String,System.Exception,System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.InvalidTypeException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
            <param name="Type">Tipo que ha causado la excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.DataAlreadyExistsException">
            <summary>
            Excepción que se produce al intentar crear nueva información dentro de una Database con un Uid que ya existe
            </summary>
        </member>
        <member name="M:MCART.Exceptions.DataAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.DataAlreadyExistsException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.DataAlreadyExistsException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataAlreadyExistsException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.DataAlreadyExistsException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataAlreadyExistsException"/>.
            </summary>
            <param name="Uid">Uid.</param>
        </member>
        <member name="M:MCART.Exceptions.DataAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.DataAlreadyExistsException"/>.
            </summary>
            <param name="Uid">Uid.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.PluginNotInitializedException">
            <summary>
            Excepción que se produce cuando se llama a un método de un <see cref="T:MCART.PluginSupport.Plugin"/> sin inicializar
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.PluginNotInitializedException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.PluginNotInitializedException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNotInitializedException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.PluginNotInitializedException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNotInitializedException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.PluginNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.PluginNotInitializedException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.ServerNotFoundException">
            <summary>
            Excepción que se produce cuando no se puede resolver un nombre DNS, o no se encuentra el servidor especificado.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.ServerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.ServerNotFoundException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.ServerNotFoundException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ServerNotFoundException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.ServerNotFoundException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ServerNotFoundException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.ServerNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ServerNotFoundException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.ServerNotFoundException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ServerNotFoundException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.CorruptDataException">
            <summary>
            Excepción que se produce cuando se reciben datos corruptos
            </summary>
        </member>
        <member name="M:MCART.Exceptions.CorruptDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.CorruptDataException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.CorruptDataException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CorruptDataException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.CorruptDataException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CorruptDataException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CorruptDataException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CorruptDataException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CorruptDataException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CorruptDataException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.CouldntConnectException">
            <summary>
            Excepción que se produce cuando no se puede realizar la conexión
            </summary>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="F:MCART.Exceptions.CouldntConnectException.OffendingIP">
            <summary>
            The offending ip.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.Net.IPEndPoint)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="EndPoint">End point.</param>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.Net.IPEndPoint,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="EndPoint">End point.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.Net.IPEndPoint,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="EndPoint">End point.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.CouldntConnectException.#ctor(System.Net.IPEndPoint,System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.CouldntConnectException"/>.
            </summary>
            <param name="EndPoint">End point.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.ConnectionClosedException">
            <summary>
            Excepción que se produce cuando la conexión se encontraba cerrada al intentar enviar o recibir datos
            </summary>
        </member>
        <member name="M:MCART.Exceptions.ConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.ConnectionClosedException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="M:MCART.Exceptions.ConnectionClosedException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ConnectionClosedException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.ConnectionClosedException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ConnectionClosedException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.ConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.ConnectionClosedException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Exceptions.OperationException">
            <summary>
            Excepción que se produce cuando una operación falla
            </summary>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="info">
            El objeto que contiene la información serializada del objeto.
            </param>
            <param name="context">
            La información contextual acerca del orígen o el destino.
            </param>
        </member>
        <member name="F:MCART.Exceptions.OperationException.OffendingTask">
            <summary>
            The offending task.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Delegate)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="Task">Task.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Delegate,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="Task">Task.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Delegate,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="Task">Task.</param>
            <param name="info">El objeto que contiene la información serializada del objeto.</param>
            <param name="context">La información contextual acerca del orígen o el destino.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Delegate,System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="Task">Task.</param>
            <param name="message">Un <see cref="T:System.String"/> que describe a la excepción.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="M:MCART.Exceptions.OperationException.#ctor(System.Delegate,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Exceptions.OperationException"/>.
            </summary>
            <param name="Task">Task.</param>
            <param name="inner"><see cref="T:System.Exception"/> que es la causa de esta excepción.</param>
        </member>
        <member name="T:MCART.Math">
            <summary>
            Funciones matemáticas varias
            </summary>
        </member>
        <member name="F:MCART.Math.Deg_Rad">
            <summary>
            Representa la proporción de 1 grado DEG sobre PI
            </summary>
        </member>
        <member name="T:MCART.Math.Series">
            <summary>
            Series matemáticas
            </summary>
        </member>
        <member name="M:MCART.Math.Series.Fibonacci">
            <summary>
            Expone un enumerador que contiene la secuencia completa de
            Fibonacci.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.Generic.IEnumerable`1"/> con la secuencia infinita de
            Fibonacci.
            </returns>
        </member>
        <member name="M:MCART.Math.Series.Lucas">
            <summary>
            Expone un enumerador que contiene la secuencia completa de
            Lucas.
            </summary>
            <returns>
            Un <see cref="T:System.Collections.Generic.IEnumerable`1"/> con la secuencia infinita de
            Lucas.
            </returns>
        </member>
        <member name="M:MCART.Math.IsPrime(System.Int64)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.Int32)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.UInt32)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.Int16)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.UInt16)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.SByte)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsPrime(System.Byte)">
            <summary>
            Comprueba si un número es primo.
            </summary>
            <returns>
            <c>true</c>si el número es primo, <c>false</c> en caso contrario.
            </returns>
            <param name="i">Número a comprobar.</param>
        </member>
        <member name="M:MCART.Math.IsValid(System.Double)">
            <summary>
            Determina si un <see cref="T:System.Double"/> es un número real operable.
            </summary>
            <param name="x"><see cref="T:System.Double"/> a comprobar.</param>
            <returns>
            <c>true</c> si <paramref name="x"/> es un número real
            <see cref="T:System.Double"/> operable, en otras palabras, si no es igual a 
            <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/> o
            <see cref="F:System.Double.NegativeInfinity"/>; en cuyo caso se devuelve 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Math.IsValid(System.Single)">
            <summary>
            Determina si un <see cref="T:System.Single"/> es un número real operable.
            </summary>
            <param name="x"><see cref="T:System.Single"/> a comprobar.</param>
            <returns>
            <c>true</c> si <paramref name="x"/> es un número real
            <see cref="T:System.Single"/> operable, en otras palabras, si no es igual a 
            <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.PositiveInfinity"/> o
            <see cref="F:System.Single.NegativeInfinity"/>; en cuyo caso se devuelve 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Math.AreValid(System.Double[])">
            <summary>
            Determina si una colección de <see cref="T:System.Double"/> son números 
            reales operables.
            </summary>
            <param name="x">
            Colección  de <see cref="T:System.Double"/> a comprobar.
            </param>
            <returns>
            <c>true</c> si todos los elementos de <paramref name="x"/> son 
            números operables, en otras palabras, si no son NaN o Infinito; en 
            caso contrario, se devuelve <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Math.AreValid(System.Single[])">
            <summary>
            Determina si una colección de <see cref="T:System.Single"/> son números 
            reales operables.
            </summary>
            <param name="x">
            Colección  de <see cref="T:System.Single"/> a comprobar.
            </param>
            <returns>
            <c>true</c> si todos los elementos de <paramref name="x"/> son 
            números operables, en otras palabras, si no son NaN o Infinito; en 
            caso contrario, se devuelve <c>false</c>.
            </returns>
        </member>
        <member name="M:MCART.Math.Nearest2Pow(System.UInt32)">
            <summary>
            Calcula la potencia de dos más cercana mayor o igual al número
            </summary>
            <param name="x">Número de entrada. Se buscará una potencia de dos mayor o igual a este valor.</param>
            <returns>Un valor ULong que es resultado de la operación.</returns>
        </member>
        <member name="M:MCART.Math.NearestMultiplyUp(System.Double,System.Double)">
            <summary>
            Devuelve el primer múltiplo de <paramref name="multiplier"/> que es mayor que <paramref name="x"/>
            </summary>
            <param name="x">Número objetivo</param>
            <param name="multiplier">Base multiplicativa. Esta función devolverá un múltiplo de este valor que sea mayor a <paramref name="x"/></param>
            <returns>Un <see cref="T:System.Double"/> que es el primer múltiplo de <paramref name="multiplier"/> que es mayor que <paramref name="x"/></returns>
        </member>
        <member name="M:MCART.Math.ArePositives(System.Double[])">
            <summary>
            Devuelve <c>True</c> si todos los números son positivos.
            </summary>
            <param name="x">números a comprobar.</param>
        </member>
        <member name="M:MCART.Math.AreNegatives(System.Double[])">
            <summary>
            Devuelve <c>True</c> si todos los números son negativos.
            </summary>
            <param name="x">números a comprobar.</param>
        </member>
        <member name="M:MCART.Math.AreZero``1(``0[])">
            <summary>
            Devuelve <c>True</c> si todos los números son iguales a cero.
            </summary>
            <param name="x">números a comprobar.</param>
        </member>
        <member name="M:MCART.Math.AreNotZero``1(``0[])">
            <summary>
            Devuelve <c>true</c> si todos los números son distintos de cero.
            </summary>
            <param name="x">números a comprobar.</param>
        </member>
        <member name="M:MCART.Math.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Establece límites de sobreflujo para evaluar una expresión.
            </summary>
            <param name="expression">Expresión a evaluar.</param>
            <param name="min">Límite inferior de salida, inclusive.</param>
            <param name="max">Límite superior de salida, inclusive.</param>
            <returns>
            El valor evaluado que se encuentra dentro del rango especificado.
            </returns>
            <remarks>
            Esta implementación se incluye para permitir parámetros de tipo
            <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/> y
            <see cref="F:System.Double.PositiveInfinity"/>.
            </remarks>
        </member>
        <member name="M:MCART.Math.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Establece límites de sobreflujo para evaluar una expresión.
            </summary>
            <param name="expression">Expresión a evaluar.</param>
            <param name="min">Límite inferior de salida, inclusive.</param>
            <param name="max">Límite superior de salida, inclusive.</param>
            <returns>
            El valor evaluado que se encuentra dentro del rango especificado.
            </returns>
            <remarks>
            Esta implementación se incluye para permitir parámetros de tipo
            <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/> y
            <see cref="F:System.Single.PositiveInfinity"/>.
            </remarks>
        </member>
        <member name="M:MCART.Math.Clamp``1(``0,``0,``0)">
            <summary>
            Establece límites de sobreflujo para evaluar una expresión.
            </summary>
            <param name="expression">Expresión a evaluar.</param>
            <param name="max">Límite superior de salida, inclusive.</param>
            <param name="min">Límite inferior de salida, inclusive.</param>
            <returns>
            El valor evaluado que se encuentra dentro del rango especificado.
            </returns>
        </member>
        <member name="M:MCART.Math.Clamp``1(``0,``0)">
            <summary>
            Establece límites de sobreflujo para evaluar una expresión.
            </summary>
            <param name="expression">Expresión a evaluar.</param>
            <param name="max">Límite superior de salida, inclusive.</param>
            <returns>
            El valor evaluado que se encuentra entre 0 y 
            <paramref name="max"/>.
            </returns>
        </member>
        <member name="M:MCART.Math.IsWhole(System.Double)">
            <summary>
            Determina si un <see cref="T:System.Double"/> es un número entero.
            </summary>
            <param name="x">Valor a comprobar.</param>
            <returns><c>True</c> si el valor es entero; de lo contrario, <c>False</c></returns>
        </member>
        <member name="M:MCART.Math.GetQuadBezierPoint(System.Double,MCART.Types.Point,MCART.Types.Point,MCART.Types.Point)">
            <summary>
            Obtiene las cooerdenadas X,Y de una posición específica dentro de un
            bézier cuadrático
            </summary>
            <param name="Position">
            Posición a obtener. Debe ser un <see cref="T:System.Double"/> entre 0.0 y 
            1.0.
            </param>
            <param name="StartPoint">
            Punto inicial del bézier cuadrático.
            </param>
            <param name="ControlPoint">
            Punto de control del bézier cuadrático.
            </param>
            <param name="EndPoint">Punto final del bézier cuadrático.</param>
            <returns>
            Un <see cref="T:MCART.Types.Point"/> con las coordenadas correspondientes a la
            posición dentro del bézier cuadrático dado por
            <paramref name="Position"/>.
            </returns>
        </member>
        <member name="M:MCART.Math.GetArcPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Obtiene las coordenadas de un punto dentro de un arco.
            </summary>
            <param name="radius">Radio del arco.</param>
            <param name="startAngle">
            Ángulo inicial del arco; en el sentido de las agujas del reloj.
            </param>
            <param name="endAngle">
            Ángulo final del arco; en el sentido de las agujas del reloj.
            </param>
            <param name="place">Posición a obtener dentro del arco.</param>
            <returns>
            Un conjunto de coordenadas con la posición del punto solicitado.
            </returns>
        </member>
        <member name="M:MCART.Math.GetCirclePoint(System.Double,System.Double)">
            <summary>
            Obtiene las coordenadas de un punto dentro de un círculo.
            </summary>
            <param name="radius">Radio del círculo.</param>
            <param name="place">Posición a obtener dentro del círculo.</param>
            <returns>
            Un conjunto de coordenadas con la posición del punto solicitado.
            </returns>
        </member>
        <member name="T:MCART.Objects">
            <summary>
            Funciones de manipulación de objetos.
            </summary>
        </member>
        <member name="M:MCART.Objects.AnyAssignableFrom(System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Nullable{System.Int32}@)">
            <summary>
            Comprueba si alguno de los tipos especificados es asignable a partir
            del tipo <paramref name="source"/>.
            </summary>
            <param name="types">Lista de tipos a comprobar.</param>
            <param name="source">Tipo que desea asignarse.</param>
            <param name="index">
            Argumento de salida. Indica el índice del primer tipo que puede ser
            asignado a partir de <paramref name="source"/>.
            </param>
            <returns>
            <c>true</c> si el tipo <paramref name="source"/> puede ser asignado 
            a uno de los tipos especificados, <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:MCART.Objects.AnyAssignableFrom(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Comprueba si alguno de los tipos especificados es asignable a partir
            del tipo <paramref name="source"/>.
            </summary>
            <param name="types">Lista de tipos a comprobar.</param>
            <param name="source">Tipo que desea asignarse.</param>
            <returns>
            <c>true</c> si el tipo <paramref name="source"/> puede ser asignado 
            a uno de los tipos especificados, <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:MCART.Objects.AreAssignableFrom(System.Type[],System.Type)">
            <summary>
            Comprueba si todos los tipos son asignables a partir del tipo
            <paramref name="source"/>.
            </summary>
            <param name="types">Lista de tipos a comprobar.</param>
            <param name="source">Tipo que desea asignarse.</param>
            <returns><c>true</c> si todos los tipos son asignables a partir de
            <paramref name="source"/>; de lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Objects.IsAnyNull(System.Object[])">
            <summary>
            Determina si cualquiera de los objetos es <c>null</c>.
            </summary>
            <returns>
            <c>true</c>, si cualquiera de los objetos es <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="x">Objetos a comprobar.</param>
        </member>
        <member name="M:MCART.Objects.IsAnyNull(System.Int32@,System.Object[])">
            <summary>
            Determina si cualquiera de los objetos es <c>null</c>.
            </summary>
            <returns>
            <c>true</c>, si cualquiera de los objetos es <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="index">
            Parámetro de salida. Si se encuentra un objeto que es <c>null</c>,
            este valor será igual al índice de dicho objeto, en caso contrario, 
            se devolverá <c>-1</c>.
            </param>
            <param name="x">Objetos a comprobar.</param>
        </member>
        <member name="M:MCART.Objects.AreAllNull(System.Object[])">
            <summary>
            Determina si todos los objetos son <c>null</c>.
            </summary>
            <returns>
            <c>true</c>, si todos los objetos son <c>null</c>; de lo contrario,
            <c>false</c>.
            </returns>
            <param name="x">Objetos a comprobar.</param>
        </member>
        <member name="M:MCART.Objects.IsNull``1(``0)">
            <summary>
            Obtiene un valor que determina si el objeto es <c>null</c>.
            </summary>
            <returns>
            <c>true</c> si el objeto es <c>null</c>; de lo contrario,
            <c>false</c>.
            </returns>
            <param name="obj">Objeto a comprobar.</param>
            <typeparam name="T">Tipo del objeto.</typeparam>
        </member>
        <member name="M:MCART.Objects.Itself``1(``0)">
            <summary>
            Devuelve una referencia circular a este mismo objeto.
            </summary>
            <returns>Este objeto.</returns>
            <param name="obj">Objeto.</param>
            <typeparam name="T">Tipo de este objeto.</typeparam>
            <remarks>
            Esta función únicamente es útil al utilizar Visual Basic en conjunto
            con la estructura <c lang="VB">With</c></remarks>
        </member>
        <member name="M:MCART.Objects.Is(System.Object,System.Object)">
            <summary>
            Determina si <paramref name="obj1"/> es la misma instancia en
            <paramref name="obj2"/>.
            </summary>
            <param name="obj1">Objeto a comprobar.</param>
            <param name="obj2">Objeto contra el cual comparar.</param>
            <returns></returns>
        </member>
        <member name="M:MCART.Objects.IsNot(System.Object,System.Object)">
            <summary>
            Determina si <paramref name="obj1"/> es una instancia diferente a
            <paramref name="obj2"/>.
            </summary>
            <param name="obj1">Objeto a comprobar.</param>
            <param name="obj2">Objeto contra el cual comparar.</param>
            <returns>
            <c>true</c> si la instancia de <paramref name="obj1"/> es
            <paramref name="obj2"/>; de lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Objects.IsEither(System.Object,System.Object[])">
            <summary>
            Determina si un objeto es cualquiera de los indicados.
            </summary>
            <returns><c>true</c>si <paramref name="obj"/> es cualquiera de los
            objetos especificados; de lo contrario, <c>false</c>.</returns>
            <param name="obj">Objeto a comprobar.</param>
            <param name="objs">Lista de objetos a comparar.</param>
        </member>
        <member name="M:MCART.Objects.IsNeither(System.Object,System.Object[])">
            <summary>
            Determina si un objeto no es ninguno de los indicados.
            </summary>
            <returns><c>true</c>si <paramref name="obj"/> no es ninguno de los
            objetos especificados; de lo contrario, <c>false</c>.</returns>
            <param name="obj">Objeto a comprobar.</param>
            <param name="objs">Lista de objetos a comparar.</param>
        </member>
        <member name="M:MCART.Objects.GetTypes``1">
            <summary>
            Obtiene una lista de tipos asignables a partir de la interfaz 
            especificada.
            </summary>
            <typeparam name="T">Interfaz a buscar.</typeparam>
            <returns>
            Una lista de tipos de las clases que implementan a la interfaz
            <typeparamref name="T"/> dentro del 
            <see cref="P:System.AppDomain.CurrentDomain"/>.
            </returns>
        </member>
        <member name="M:MCART.Objects.GetTypes``1(System.AppDomain)">
            <summary>
            Obtiene una lista de tipos asignables a partir de la interfaz 
            especificada dentro del <see cref="T:System.AppDomain"/> especificado.
            </summary>
            <typeparam name="T">Interfaz a buscar.</typeparam>
            <param name="Domain">
            <see cref="T:System.AppDomain"/> en el cual realizar la búsqueda.
            </param>
            <returns>
            Una lista de tipos de las clases que implementan a la interfaz 
            <typeparamref name="T"/> dentro del <paramref name="Domain"/>.
            </returns>
        </member>
        <member name="M:MCART.Objects.ToTypes(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Obtiene una lista de los tipos de los objetos especificados.
            </summary>
            <param name="objects">
            Objetos a partir de los cuales generar la colección de tipos.
            </param>
            <returns>
            Una lista compuesta por los tipos de los objetos provistos.
            </returns>
        </member>
        <member name="M:MCART.Objects.New``1">
            <summary>
            Inicializa una nueva instancia del tipo en runtime especificado.
            </summary>
            <returns>La nueva instancia del tipo especificado.</returns>
            <typeparam name="T">Tipo de instancia a crear.</typeparam>
        </member>
        <member name="M:MCART.Objects.New``1(System.Type)">
            <summary>
            Inicializa una nueva instancia del tipo dinámico especificado,
            devolviéndola como un <typeparamref name="T"/>.
            </summary>
            <returns>La nueva instancia del tipo especificado.</returns>
            <param name="j">Tipo a instanciar. Debe ser, heredar o implementar 
            el tipo especificado en <typeparamref name="T"/></param>
            <typeparam name="T">Tipo de instancia a devolver.</typeparam>
        </member>
        <member name="M:MCART.Objects.New(System.Type)">
            <summary>
            Inicializa una nueva instancia del tipo en runtime especificado.
            </summary>
            <returns>La nueva instancia del tipo especificado.</returns>
            <param name="j">Tipo a instanciar.</param>
        </member>
        <member name="M:MCART.Objects.New``1(System.Object[])">
            <summary>
            Crea uns instancia de un objeto con un constructor que acepte los 
            argumentos provistos.
            </summary>
            <typeparam name="T">Tipo de instancia a devolver.</typeparam>
            <param name="Params">Parámetros a pasar al constructor. Se buscará 
            un constructor compatible para poder crear la instancia.</param>
            <returns>Una nueva instancia del tipo especificado.</returns>
        </member>
        <member name="M:MCART.Objects.New``1(System.Type,System.Object[])">
            <summary>
            Inicializa una nueva instancia de un objeto con un constructor que
            acepte los argumentos provistos.
            </summary>
            <typeparam name="T">Tipo de instancia a devolver.</typeparam>
            <param name="j">Tipo a instanciar. Debe ser, heredar o implementar 
            el tipo especificado en <typeparamref name="T"/>.</param>
            <param name="Params">Parámetros a pasar al constructor. Se buscará 
            un constructor compatible para poder crear la instancia.</param>
            <returns>Una nueva instancia del tipo especificado.</returns>
        </member>
        <member name="M:MCART.Objects.New(System.Type,System.Object[])">
            <summary>
            Inicializa una nueva instancia del tipo en runtime especificado.
            </summary>
            <returns>La nueva instancia del tipo especificado.</returns>
            <param name="j">Tipo a instanciar.</param>
            <param name="Params">Parámetros a pasar al constructor. Se buscará 
            un constructor compatible para poder crear la instancia.</param>
        </member>
        <member name="M:MCART.Objects.ReleaseCOMObject(System.Object)">
            <summary>
            Libera un objeto COM.
            </summary>
            <param name="obj">Objeto COM a liberar.</param>
        </member>
        <member name="M:MCART.Objects.GetAttr``1(System.Reflection.Assembly)">
            <summary>
            Devuelve el atributo asociado a la declaración del objeto especificado
            </summary>
            <typeparam name="T">Tipo de atributo a devolver. Debe heredar <see cref="T:System.Attribute"/>.</typeparam>
            <param name="it"><see cref="T:System.Reflection.Assembly"/> del cual se extraerá el atributo.</param>
            <returns>Un atributo del tipo <typeparamref name="T"/> con los datos asociados en la declaración del objeto.</returns>
        </member>
        <member name="M:MCART.Objects.GetAttr``1(System.Reflection.MemberInfo)">
            <summary>
            Devuelve el atributo asociado a la declaración del objeto especificado.
            </summary>
            <typeparam name="T">Tipo de atributo a devolver. Debe heredar <see cref="T:System.Attribute"/>.</typeparam>
            <param name="it">Objeto del cual se extraerá el atributo.</param>
            <returns>Un atributo del tipo <typeparamref name="T"/> con los datos asociados en la declaración del objeto.</returns>
        </member>
        <member name="M:MCART.Objects.GetAttr``1(System.Object)">
            <summary>
            Devuelve el atributo asociado a la declaración del objeto especificado.
            </summary>
            <typeparam name="T">Tipo de atributo a devolver. Debe heredar <see cref="T:System.Attribute"/>.</typeparam>
            <param name="it">Objeto del cual se extraerá el atributo.</param>
            <returns>Un atributo del tipo <typeparamref name="T"/> con los datos asociados en la declaración del objeto.</returns>
        </member>
        <member name="M:MCART.Objects.GetAttr``2">
            <summary>
            Devuelve el atributo asociado a la declaración del tipo
            especificado.
            </summary>
            <typeparam name="T">Tipo de atributo a devolver. Debe heredar 
            <see cref="T:System.Attribute"/>.</typeparam>
            <typeparam name="it">
            Tipo del cual se extraerá el atributo.
            </typeparam>
            <returns>
            Un atributo del tipo <typeparamref name="T"/> con los datos 
            asociados en la declaración del tipo.
            </returns>
        </member>
        <member name="M:MCART.Objects.GetAttr``1(System.Type)">
            <summary>
            Devuelve el atributo asociado a la declaración del tipo especificado
            </summary>
            <typeparam name="T">Tipo de atributo a devolver. Debe heredar 
            <see cref="T:System.Attribute"/>.</typeparam>
            <param name="it">Tipo del cual se extraerá el atributo</param>
            <returns>Un atributo del tipo <typeparamref name="T"/> con los datos
             asociados en la declaración del tipo.</returns>
        </member>
        <member name="M:MCART.Objects.IsTypeAnyOf``1(System.Type[])">
            <summary>
            Devuelve <c>True</c> si el tipo <typeparamref name="T"/> es alguno de los tipos especificados
            </summary>
            <typeparam name="T">Tipo a comprobar</typeparam>
            <param name="Types">Lista de tipos aceptados</param>
            <returns><c>True</c> si <typeparamref name="T"/> es alguno de los tipos especificados en <paramref name="Types"/>; de lo contrario, <c>False</c>.</returns>
        </member>
        <member name="M:MCART.Objects.IsTypeAnyOf(System.Type,System.Type[])">
            <summary>
            Devuelve <c>True</c> si el tipo <paramref name="T"/> es alguno de los tipos especificados
            </summary>
            <param name="T">Tipo a comprobar</param>
            <param name="Types">Lista de tipos aceptados</param>
            <returns><c>True</c> si <paramref name="T"/> es alguno de los tipos especificados en <paramref name="Types"/>; de lo contrario, <c>False</c>.</returns>
        </member>
        <member name="M:MCART.Objects.IsNumericType(System.Type)">
            <summary>
            Determina si el tipo <paramref name="T"/> es de un tipo numérico
            </summary>
            <param name="T">Tipo a comprobar</param>
            <returns><c>true</c> si <paramref name="T"/> es un tipo numérico; de
            lo contrario, <c>false</c>.</returns>
        </member>
        <member name="M:MCART.Objects.IsNumericType``1">
            <summary>
            Determina si el tipo <typeparamref name="T"/> es de un tipo numérico
            </summary>
            <typeparam name="T">Tipo a comprobar</typeparam>
            <returns><c>True</c> si <typeparamref name="T"/> es un tipo numérico; de lo contrario, <c>False</c>.</returns>
        </member>
        <member name="M:MCART.Objects.ReadString(System.Security.SecureString)">
            <summary>
            Convierte un <see cref="T:System.Security.SecureString"/> en un
            <see cref="T:System.String"/>.
            </summary>
            <param name="value">
            <see cref="T:System.Security.SecureString"/> a convertir.
            </param>
            <returns>Un <see cref="T:System.String"/> de código administrado.</returns>
            <remarks>
            El uso de este método NO ESTÁ RECOMENDADO, ya que la conversión al
            tipo <see cref="T:System.String"/> vence el propósito original de
            <see cref="T:System.Security.SecureString"/>, y se provee como una
            alternativa sencilla, en casos en los que el programa no dependa de
            que la confidencialidad de una cadena en particular se deba
            mantener durante la ejecución.
            </remarks>
        </member>
        <member name="M:MCART.Objects.Read16(System.Security.SecureString)">
            <summary>
            Convierte un <see cref="T:System.Security.SecureString"/> en un
            arreglo de <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
            <see cref="T:System.Security.SecureString"/> a convertir.
            </param>
            <returns>
            Un arreglo de <see cref="T:System.Int16"/> de código administrado.
            </returns>
        </member>
        <member name="M:MCART.Objects.Read8(System.Security.SecureString)">
            <summary>
            Convierte un <see cref="T:System.Security.SecureString"/> en un
            arreglo de <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
            <see cref="T:System.Security.SecureString"/> a convertir.
            </param>
            <returns>
            Un arreglo de <see cref="T:System.Byte"/> de código administrado.
            </returns>
        </member>
        <member name="T:MCART.Networking.Client.Client">
            <summary>
            Permite enviar y recibir información desde y hacia un servidor. Además,
            es una clase base para los controladores de protocolo del cliente.
            </summary>
        </member>
        <member name="F:MCART.Networking.Client.Client.defaultPort">
            <summary>
            Puerto predeterminado para las conexiones entrantes.
            </summary>
        </member>
        <member name="F:MCART.Networking.Client.Client.bufferSize">
            <summary>
            Búfer predeterminado para recepción.
            </summary>
        </member>
        <member name="F:MCART.Networking.Client.Client.connection">
            <summary>
            Conexión al servidor
            </summary>
        </member>
        <member name="P:MCART.Networking.Client.Client.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:MCART.Networking.Client.Client"/> is alive.
            </summary>
            <value><c>true</c> if is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MCART.Networking.Client.Client.ConnectAsync(System.String,System.UInt16)">
            <summary>
            Establece una conexión con el servidor de forma asíncrona.
            </summary>
            <returns>Un <see cref="T:System.Threading.Tasks.Task"/> que representa la tarea.</returns>
            <param name="server">Servidor al cual conectarse.</param>
            <param name="port">
            Opcional. Puerto del servidor. Si se omite, se conectará al puerto
            predeterminado.
            </param>
        </member>
        <member name="M:MCART.Networking.Client.Client.Connect(System.String,System.UInt16)">
            <summary>
            Establece una conexión con el servidor.
            </summary>
            <param name="server">Servidor al cual conectarse.</param>
            <param name="port">
            Opcional. Puerto del servidor. Si se omite, se conectará al puerto
            predeterminado.
            </param>
        </member>
        <member name="M:MCART.Networking.Client.Client.Disconnect">
            <summary>
            Desconecta correctamente a este cliente del servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Client.Client.TalkToServer(System.Byte[])">
            <summary>
            Envía un mensaje, y espera a que el servidor responda.
            </summary>
            <returns>Un mensaje enviado por el servidor.</returns>
            <param name="data">Mensaje a enviar al servidor.</param>
        </member>
        <member name="M:MCART.Networking.Client.Client.TalkToServerAsync(System.Byte[])">
            <summary>
            Envía un mensaje, y espera a que el servidor responda de forma asíncrona.
            </summary>
            <returns>Un mensaje enviado por el servidor.</returns>
            <param name="data">Mensaje a enviar al servidor.</param>
        </member>
        <member name="M:MCART.Networking.Client.Client.AtConnect">
            <summary>
            Método invalidable que indica una serie de acciones a realizar al
            conectarse exitosamente con el servidor.
            </summary>
            <remarks>
            De forma predeterminada, no se realiza ninguna acción.
            </remarks>
        </member>
        <member name="M:MCART.Networking.Client.Client.AtDisconnect">
            <summary>
            Método invalidable que indica una serie de acciones a realizar al
            desconectarse del servidor.
            </summary>
            <remarks>
            De forma predeterminada, no se realiza ninguna acción.
            </remarks>
        </member>
        <member name="M:MCART.Networking.Client.Client.AtFail">
            <summary>
            Método invalidable que indica una serie de acciones a realizar al no
            poder establecerse una conexión con el servidor.
            </summary>
            <remarks>
            De forma predeterminada, no se realiza ninguna acción.
            </remarks>
        </member>
        <member name="M:MCART.Networking.Client.Client.ConnChk">
            <summary>
            Se asegura de cerrar la conexión.
            </summary>
        </member>
        <member name="M:MCART.Networking.Client.Client.Finalize">
            <summary>
            Realiza alguans tareas de limpieza antes de finalizar esta
            instancia de la clase <see cref="T:MCART.Networking.Client.Client"/>.
            </summary>
        </member>
        <member name="T:MCART.Networking.PortAttribute">
            <summary>
            Atributo que establece un número de puerto que un
            <see cref="T:MCART.Networking.Server.Server`1"/> debería utilizar al escuchar
            conexiones entrantes.
            </summary>
        </member>
        <member name="M:MCART.Networking.PortAttribute.#ctor(System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:MCART.Networking.PortAttribute"/>.
            </summary>
            <param name="portNumber">Número de puerto a utilizar.</param>
        </member>
        <member name="T:MCART.Networking.Server.Protocols.Echo">
            <summary>
            Protocolo simple de eco.
            </summary>
            <remarks>Este protocolo utiliza TCP/IP, no IGMP.</remarks>
        </member>
        <member name="M:MCART.Networking.Server.Protocols.Echo.ClientAttendant(MCART.Networking.Server.Client,MCART.Networking.Server.Server{MCART.Networking.Server.Client},System.Byte[])">
            <summary>
            Protocolo de atención normal.
            </summary>
        </member>
        <member name="T:MCART.Networking.Server.Server">
            <summary>
            Controla conexiones entrantes y ejecuta protocolos sobre los clientes
            que se conecten al servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server.op_Implicit(MCART.Networking.Server.Protocol{MCART.Networking.Server.Client})~MCART.Networking.Server.Server">
            <summary>
            Convierte implícitamente un <see cref="T:MCART.Networking.Server.Protocol`1"/> en un
            <see cref="T:MCART.Networking.Server.Server"/>.
            </summary>
            <param name="p">
            <see cref="T:MCART.Networking.Server.Protocol`1"/> a convertir.
            </param>
        </member>
        <member name="M:MCART.Networking.Server.Server.#ctor(MCART.Networking.Server.Protocol{MCART.Networking.Server.Client},System.Net.IPEndPoint)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Networking.Server.Server"/>.
            </summary>
            <param name="protocol">
            Conjunto de protocolos a utilizar para este servidor.
            </param>
            <param name="ep">
            <see cref="T:System.Net.IPEndPoint"/> local a escuchar. Si se omite, se
            escuchará el puerto <see cref="F:MCART.Networking.Server.Server`1.defaultPort"/> de
            todas las direcciones IP del servidor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se produce si <paramref name="protocol"/> es <c>null</c>.
            </exception>
        </member>
        <member name="T:MCART.Networking.Server.Server`1">
            <summary>
            Controla conexiones entrantes y ejecuta protocolos sobre los clientes
            que se conecten al servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.disconnectionTimeout">
            <summary>
            Tiempo de espera en milisegundos antes de realizar una desconexión
            forzada al cerrar el servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.defaultPort">
            <summary>
            Puerto predeterminado para las conexiones entrantes.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.op_Implicit(MCART.Networking.Server.Protocol{`0})~MCART.Networking.Server.Server{`0}">
            <summary>
            Convierte implícitamente un <see cref="T:MCART.Networking.Server.Protocol`1"/> en un
            <see cref="T:MCART.Networking.Server.Server`1"/>.
            </summary>
            <param name="p">
            <see cref="T:MCART.Networking.Server.Protocol`1"/> a convertir.
            </param>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.Clients">
            <summary>
            Lista de objetos <see cref="T:MCART.Networking.Server.Client"/> conectados a este servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.Protocol">
            <summary>
            Instancia de protocolos a utilizar para dar servicio a los
            clientes que se conecten a este servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.ListeningPort">
            <summary>
            Número de puerto al que este servidor escucha.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.ListeningEndPoint">
            <summary>
            Dirección IP a la cual este servidor escucha.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.clwaiter">
            <summary>
            Lista de hilos atendiendo a clientes.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1.conns">
            <summary>
            Escucha de conexiones entrantes.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Server`1._isAlive">
            <summary>
            campo que determina si el servidor está escuchando conexiones y
            sirviendo a clientes (vivo)
            </summary>
        </member>
        <member name="T:MCART.Networking.Server.Server`1.LogEventHandler">
            <summary>
            Controla el evento <see cref="E:MCART.Networking.Server.Server`1.Logging"/>.
            </summary>
            <param name="sender">Objeto que ha generado el evento.</param>
            <param name="e">Argumentos del evento.</param>
        </member>
        <member name="E:MCART.Networking.Server.Server`1.Logging">
            <summary>
            Ocurre cuando el servidor desea reportar un cambio de estado, o 
            enviar un mensaje a la interfaz del servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.Log(System.String)">
            <summary>
            Escribe un mensaje de Log en la salida del servidor.
            </summary>
            <param name="msg">Mensaje a escribir en el Log.</param>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.GetClient">
            <summary>
            Encapsula <see cref="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync"/> para
            permitir cancelar la tarea cuando el servidor se detenga.
            </summary>
            <returns>
            El <see cref="T:System.Net.Sockets.TcpClient"/> conectado. Si el servidor se detiene, se
            devuelve <c>null</c>.
            </returns>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.AttendClient(`0)">
            <summary>
            Atiende al cliente.
            </summary>
            <returns>Un <see cref="T:System.Threading.Tasks.Task"/> que atiende al cliente.</returns>
            <param name="client">Cliente a atender.</param>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.BeAlive">
            <summary>
            Hilo de escucha y atención del servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.#ctor(MCART.Networking.Server.Protocol{`0},System.Net.IPEndPoint)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Networking.Server.Server`1"/>.
            </summary>
            <param name="protocol">
            Conjunto de protocolos a utilizar para este servidor.
            </param>
            <param name="ep">
            <see cref="T:System.Net.IPEndPoint"/> local a escuchar. Si se omite, se
            escuchará el puerto <see cref="F:MCART.Networking.Server.Server`1.defaultPort"/> de todas las
            direcciones IP del servidor.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Se produce si <paramref name="protocol"/> es <c>null</c>.
            </exception>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.Start">
            <summary>
            Crea un hilo de ejecución que da servicio a los clientes
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.StopAsync">
            <summary>
            Detiene al servidor de forma asíncrona.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.Stop">
            <summary>
            Detiene al servidor.
            </summary>
        </member>
        <member name="P:MCART.Networking.Server.Server`1.IsAlive">
            <summary>
            Obtiene o establece un valor que indica si este
            <see cref="T:MCART.Networking.Server.Server"/> está activo (vivo).
            </summary>
            <value><c>true</c> si está vivo; sino, <c>false</c>.</value>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.Broadcast(System.Byte[],MCART.Networking.Server.Client)">
            <summary>
            Envía un mensaje a todos los clientes, excepto el especificado.
            </summary>
            <param name="data">Mensaje a enviar a los clientes.</param>
            <param name="client">Parámetro opcional. 
            Cliente que envía los datos. Si se omite, el mensaje se enviará
            a todos los clientes conectados a esta instancia.
            </param>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.Multicast(System.Byte[],System.Predicate{MCART.Networking.Server.Client})">
            <summary>
            Envía un mensaje a todos los clientes que satisfacen la
            condición especificada por <paramref name="condition"/>.
            </summary>
            <param name="data">Mensaje a enviar a los clientes.</param>
            <param name="condition">
            Condición que determina a los clientes que recibirán el mensaje.
            </param>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.BroadcastAsync(System.Byte[],MCART.Networking.Server.Client)">
            <summary>
            Envía un mensaje a todos los clientes, excepto el especificado.
            </summary>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/> que representa esta tarea.
            </returns>
            <param name="data">Mensaje a enviar a los clientes.</param>
            <param name="client">Parámetro opcional. 
            Cliente que envía los datos. Si se omite, el mensaje se enviará
            a todos los clientes conectados a esta instancia.
            </param>
        </member>
        <member name="M:MCART.Networking.Server.Server`1.MulticastAsync(System.Byte[],System.Predicate{MCART.Networking.Server.Client})">
            <summary>
            Envía un mensaje a todos los clientes que satisfacen la
            condición especificada por <paramref name="condition"/>.
            </summary>
            <returns>
            Un <see cref="T:System.Threading.Tasks.Task"/> que representa esta tarea.
            </returns>
            <param name="data">Mensaje a enviar a los clientes.</param>
            <param name="condition">
            Condición que determina a los clientes que recibirán el mensaje.
            </param>
        </member>
        <member name="T:MCART.Networking.Server.Client">
            <summary>
            Representa a un cliente que no requiere datos de estado que se ha
            conectado al servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Client.bufferSize">
            <summary>
            Búfer predeterminado para recepción.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Client.TcpClient">
            <summary>
            Obtiene la conexión <see cref="T:System.Net.Sockets.TcpClient"/> asociada a esta instancia.
            </summary>
            <value>My connection.</value>
        </member>
        <member name="F:MCART.Networking.Server.Client.Server">
            <summary>
            Obtiene el objeto Server asociado a esta instancia.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:MCART.Networking.Server.Client.IsAlive">
            <summary>
            Gets a value indicating whether this <see cref="T:MCART.Networking.Server.Client"/> is alive.
            </summary>
            <value><c>true</c> if is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MCART.Networking.Server.Client.DataAvailable">
            <summary>
            Obtiene un valor que indica si hay datos disponibles para leer.
            </summary>
            <value><c>true</c> si hay datos disponibles; sino, <c>false</c>.</value>
        </member>
        <member name="M:MCART.Networking.Server.Client.#ctor(System.Net.Sockets.TcpClient,MCART.Networking.Server.Server{MCART.Networking.Server.Client})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Networking.Server.Client"/>.
            </summary>
            <param name="tcpClient">
            <see cref="F:MCART.Networking.Server.Client.TcpClient"/> a utilizar para las comunicaciones con el 
            cliente.
            </param>
            <param name="server">
            <see cref="F:MCART.Networking.Server.Client.Server"/> que atenderá a este cliente.
            </param>
        </member>
        <member name="M:MCART.Networking.Server.Client.Send(System.Byte[])">
            <summary>
            Envía un mensaje al cliente.
            </summary>
            <param name="data">Mensaje a enviar.</param>
        </member>
        <member name="M:MCART.Networking.Server.Client.SendAsync(System.Byte[])">
            <summary>
            Envía un mensaje al cliente de forma asíncrona.
            </summary>
            <param name="data">Mensaje a enviar.</param>
        </member>
        <member name="M:MCART.Networking.Server.Client.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Envía un mensaje al cliente de forma asíncrona.
            </summary>
            <param name="data">Mensaje a enviar.</param>
            <param name="cancellationToken">Token de cancelación de tarea.</param>
        </member>
        <member name="M:MCART.Networking.Server.Client.Recieve">
            <summary>
            Devuelve los datos que el cliente envía.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Client.RecieveAsync">
            <summary>
            Devuelve los datos recibidos una vez que el cliente los envía.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Client.RecieveAsync(System.Threading.CancellationToken)">
            <summary>
            Devuelve los datos recibidos una vez que el cliente los envía.
            </summary>
            <param name="cancellationToken">Token de cancelación de tarea.</param>
        </member>
        <member name="M:MCART.Networking.Server.Client.Disconnect">
            <summary>
            Desconecta al cliente del servidor.
            </summary>
        </member>
        <member name="T:MCART.Networking.Server.Client`1">
            <summary>
            Representa un cliente que requiere datos de estado asociados que se ha
            conectado al servidor.
            </summary>
        </member>
        <member name="F:MCART.Networking.Server.Client`1.userObj">
            <summary>
            Contiene un objeto de estado personalizado asociado a esta 
            instancia, para utilizarse como el usuario lo desee.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Client`1.#ctor(System.Net.Sockets.TcpClient,MCART.Networking.Server.Server{MCART.Networking.Server.Client})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MCART.Networking.Server.Client`1"/>.
            </summary>
            <param name="tcpClient">
            <see cref="T:System.Net.Sockets.TcpClient"/> a utilizar para las comunicaciones con el 
            cliente.
            </param>
            <param name="server">
            <see cref="T:MCART.Networking.Server.Server"/> que atenderá a este cliente.
            </param>
        </member>
        <member name="T:MCART.Networking.Server.Protocol`1">
            <summary>
            Esta clase abstracta determina una serie de funciones a heredar por
            una clase que provea de protocolos a un servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.Protocol`1.ClientAttendant(`0,MCART.Networking.Server.Server{`0},System.Byte[])">
            <summary>
            Atiende al cliente
            </summary>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
            <param name="data">Datos recibidos desde el cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.Protocol`1.ClientWelcome(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de bienvenida del cliente.
            </summary>
            <returns><c>true</c> si el cliente fue aceptado por el protocolo; de lo contrario, <c>false</c>.</returns>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.Protocol`1.ClientBye(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de desconexión del cliente.
            </summary>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.Protocol`1.ClientDisconnect(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de desconexión inesperada del cliente.
            </summary>
            <param name="client">Cliente que se ha desconectado.</param>
            <param name="server">Servidor que atiendía al cliente.</param>
        </member>
        <member name="T:MCART.Networking.Server.Protocol">
            <summary>
            Esta clase abstracta determina una serie de funciones a heredar por
            una clase que provea de protocolos a un servidor.
            </summary>
        </member>
        <member name="T:MCART.Networking.Server.IProtocol`1">
            <summary>
            Determina una serie de funciones a implementar por una clase que provea
            de protocolos a un servidor.
            </summary>
        </member>
        <member name="M:MCART.Networking.Server.IProtocol`1.ClientAttendant(`0,MCART.Networking.Server.Server{`0},System.Byte[])">
            <summary>
            Atiende al cliente
            </summary>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
            <param name="data">Datos recibidos desde el cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.IProtocol`1.ClientWelcome(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de bienvenida del cliente.
            </summary>
            <returns><c>true</c> si el cliente fue aceptado por el protocolo; de lo contrario, <c>false</c>.</returns>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.IProtocol`1.ClientBye(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de desconexión del cliente.
            </summary>
            <param name="client">Cliente que será atendido.</param>
            <param name="server">Servidor que atiende al cliente.</param>
        </member>
        <member name="M:MCART.Networking.Server.IProtocol`1.ClientDisconnect(`0,MCART.Networking.Server.Server{`0})">
            <summary>
            Protocolo de desconexión inesperada del cliente.
            </summary>
            <param name="client">Cliente que se ha desconectado.</param>
            <param name="server">Servidor que atiendía al cliente.</param>
        </member>
        <member name="T:MCART.Common">
            <summary>
            Contiene operaciones comunes de transformación de datos en los
            programas, y de algunas comparaciones especiales.
            Además, algunas de estas funciones también se implementan como
            extensiones.
            </summary>
        </member>
        <member name="M:MCART.Common.Condense(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Condensa un arreglo de <see cref="T:System.String"/>  en una sola cadena.
            </summary>
            <returns>La cadena condensada.</returns>
            <param name="str">Arreglo a condensar.</param>
            <param name="separation">
            Establece una cadena de separación entre los elementos de la
            cadena. Si de omite, se utilizará <c>null</c>.
            </param>
        </member>
        <member name="M:MCART.Common.Left(System.String,System.Int32)">
            <summary>
            Obtiene una cadena que contenga la cantidad de caracteres 
            especificados desde la izquierda de la cadena.
            </summary>
            <param name="str">
            Instancia de <see cref="T:System.String"/> a procesar.
            </param>
            <param name="length">Longitud de caracteres a obtener.</param>
            <returns>
            Una cadena que contiene los caracteres especificados desde la
            izquierda de la cadena.
            </returns>
        </member>
        <member name="M:MCART.Common.Right(System.String,System.Int32)">
            <summary>
            Obtiene una cadena que contenga la cantidad de caracteres 
            especificados desde la izquierda de la cadena.
            </summary>
            <param name="str">
            Instancia de <see cref="T:System.String"/> a procesar.
            </param>
            <param name="length">Longitud de caracteres a obtener.</param>
            <returns>
            Una cadena que contiene los caracteres especificados desde la
            izquierda de la cadena.
            </returns>
        </member>
        <member name="M:MCART.Common.IsEmpty(System.String)">
            <summary>
            Determina si una cadena está vacía.
            </summary>
            <returns>
            <c>true</c> si la cadena está vacía o es <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="str">Cadena a comprobar.</param>
        </member>
        <member name="M:MCART.Common.AreAllEmpty(System.String[])">
            <summary>
            Determina si un conjunto de cadenas están vacías.
            </summary>
            <returns>
            <c>true</c> si las cadenas están vacías o son <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="str">Cadenas a comprobar.</param>
        </member>
        <member name="M:MCART.Common.IsAnyEmpty(System.String[])">
            <summary>
            Determina si alguna cadena está vacía.
            </summary>
            <returns>
            <c>true</c> si alguna cadena está vacía o es <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="str">Cadenas a comprobar.</param>
        </member>
        <member name="M:MCART.Common.IsAnyEmpty(System.Int32[]@,System.String[])">
            <summary>
            Determina si alguna cadena está vacía.
            </summary>
            <returns>
            <c>true</c> si alguna cadena está vacía o es <c>null</c>; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="str">Cadenas a comprobar.</param>
            <param name="index">
            Argumento de salida. Índices de las cadenas vacías encontradas.
            </param>
        </member>
        <member name="M:MCART.Common.CountChars(System.String,System.Char[])">
            <summary>
            Cuenta los caracteres que contiene una cadena.
            </summary>
            <returns>
            Un <see cref="T:System.Int32"/> con la cantidad total de caracteres de
            <paramref name="chars"/> que aparecen en <paramref name="check"/>.
            </returns>
            <param name="check">Cadena a comprobar.</param>
            <param name="chars">Caracteres a contar.</param>
        </member>
        <member name="M:MCART.Common.CountChars(System.String,System.String)">
            <summary>
            Cuenta los caracteres que contiene una cadena.
            </summary>
            <returns>Un <see cref="T:System.Int32"/> con la cantidad total de
            caracteres de <paramref name="chars"/> que aparecen en
            <paramref name="check"/>.</returns>
            <param name="check">Cadena a comprobar.</param>
            <param name="chars">Caracteres a contar.</param>
        </member>
        <member name="M:MCART.Common.ContainsAny(System.String,System.Char[])">
            <summary>
            Determina si la cadena contiene a cualquiera de los caracteres
            especificados.
            </summary>
            <returns>
            <c>true</c> si la cadena contiene a cualquiera de los caracteres,
            <c>false</c> en caso contrario.
            </returns>
            <param name="str">Cadena a verificar.</param>
            <param name="chars">Caracteres a buscar.</param>
        </member>
        <member name="M:MCART.Common.ContainsAny(System.String,System.Int32@,System.Char[])">
            <summary>
            Determina si la cadena contiene a cualquiera de los caracteres
            especificados.
            </summary>
            <returns>
            <c>true</c> si la cadena contiene a cualquiera de los caracteres,
            <c>false</c> en caso contrario.
            </returns>
            <param name="str">Cadena a verificar.</param>
            <param name="argNum">
            Parámetro de salida. Si <paramref name="str"/> contiene cualquier
            caracter especificado en <paramref name="chars"/>, se devolverá el
            índice del argumento contenido; en caso contrario, se devuelve 
            <c>-1</c>.
            </param>
            <param name="chars">Caracteres a buscar.</param>
        </member>
        <member name="M:MCART.Common.ContainsAny(System.String,System.String[])">
            <summary>
            Determina si la cadena contiene a cualquiera de las cadenas
            especificadas.
            </summary>
            <returns>
            <c>true</c> si la cadena contiene a cualquiera de los caracteres,
            <c>false</c> en caso contrario.
            </returns>
            <param name="str">Cadena a verificar.</param>
            <param name="strings">Cadenas a buscar.</param>
        </member>
        <member name="M:MCART.Common.ContainsAny(System.String,System.Int32@,System.String[])">
            <summary>
            Determina si la cadena contiene a cualquiera de las cadenas
            especificadas.
            </summary>
            <returns>
            <c>true</c> si la cadena contiene a cualquiera de los caracteres,
            <c>false</c> en caso contrario.
            </returns>
            <param name="str">Cadena a verificar.</param>
            <param name="argNum">
            Parámetro de salida. Si <paramref name="str"/> contiene cualquier
            caracter especificado en <paramref name="strings"/>, se devolverá
            el índice del argumento contenido; en caso contrario, se devuelve 
            <c>-1</c>.
            </param>
            <param name="strings">Cadenas a buscar.</param>
        </member>
        <member name="M:MCART.Common.CollectionListed(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Condensa una lista en una <see cref="T:System.String"/>
            </summary>
            <returns></returns>
            <param name="lst">Lista a condensar. Sus elementos deben ser del
            tipo <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:MCART.Common.Swap``1(``0@,``0@)">
            <summary>
            Intercambia el valor de los objetos especificados.
            </summary>
            <param name="a">Objeto A.</param>
            <param name="b">Objeto B.</param>
            <typeparam name="T">Tipo de los argumentos. Puede omitirse con
            seguridad.</typeparam>
        </member>
        <member name="M:MCART.Common.IsBetween``1(``0,``0,``0)">
            <summary>
            Comprueba que el valor se encuentre en el rango especificado.
            </summary>
            <returns>
            <c>true</c>si el valor se encuentra entre los especificados; de lo
            contrario, <c>false</c>.
            </returns>
            <param name="a">Valor a comprobar.</param>
            <param name="min">Mínimo del rango de valores, inclusive.</param>
            <param name="max">Máximo del rango de valores, inclusive.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:MCART.Common.Sequencer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genera una secuencia de números en el rango especificado.
            </summary>
            <returns>
            Una lista de enteros con la secuencia generada.
            </returns>
            <param name="top">Valor más alto.</param>
            <param name="floor">Valor más bajo.</param>
            <param name="stepping">Saltos del secuenciador.</param>
        </member>
        <member name="M:MCART.Common.ToPercent(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Convierte los valores de una colección de elementos 
            <see cref="T:System.Double"/> a porcentajes.
            </summary>
            <returns>Una colección de <see cref="T:System.Double"/> con sus valores
            expresados en porcentaje.</returns>
            <param name="lst">Colección a procesar.</param>
            <param name="baseZero">Opcional. si es <c>true</c>, la base de
            porcentaje es cero; de lo contrario, se utilizará el valor mínimo
            dentro de la colección.</param>
        </member>
        <member name="M:MCART.Common.ToPercent(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double)">
            <summary>
            Convierte los valores de una colección de elementos 
            <see cref="T:System.Double"/> a porcentajes.
            </summary>
            <returns>Una colección de <see cref="T:System.Double"/> con sus valores
            expresados en porcentaje.</returns>
            <param name="lst">Colección a procesar.</param>
            <param name="min">Valor que representará 0%.</param>
            <param name="max">Valor que representará 100%.</param>
        </member>
        <member name="M:MCART.Common.Likeness(System.String,System.String,System.Int32)">
            <summary>
            Calcula el porcentaje de similitud entre dos <see cref="T:System.String"/>.
            </summary>
            <returns>El porcentaje de similitud entre las dos cadenas.</returns>
            <param name="ofString">Cadena A a comparar.</param>
            <param name="toString">Cadena B a comparar.</param>
            <param name="tolerance">
            Rango de tolerancia de la comparación. Representa la distancia 
            máxima permitida de cada caracter que todavía hace a las cadenas 
            similares.
            </param>
        </member>
        <member name="M:MCART.Common.CouldItBe(System.String,System.String,System.Double)">
            <summary>
            Comprueba si un nombre podría tratarse de otro indicado.
            </summary>
            <returns>
            Un valor que representa la probabilidad de que
            <paramref name="checkName"/> haga referencia al nombre
            <paramref name="actualName"/>.
            </returns>
            <param name="checkName">Nombre a comprobar.</param>
            <param name="actualName">Nombre real conocido.</param>
            <param name="tolerance">
            Opcional. <see cref="T:System.Double"/> entre 0.0 y 1.0 que establece el
            nivel mínimo de similitud aceptado. si no se especifica, se asume
            75% (0.75).
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se produce cuando <paramref name="tolerance"/> no es un valor entre
            0.0 y 1.0.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Se produce cuando <paramref name="checkName"/> o
            <paramref name="actualName"/> son cadenas vacías o <c>null</c>.
            </exception>
        </member>
        <member name="M:MCART.Common.ToHex(System.Byte[])">
            <summary>
            <see cref="T:MCART.Attributes.ThunkAttribute"/> de 
            <see cref="M:System.BitConverter.ToString(System.Byte[])"/> que no incluye guiones.
            </summary>
            <returns>
            La representación hexadecimal del arreglo de <see cref="T:System.Byte"/>.
            </returns>
            <param name="arr">Arreglo de bytes a convertir.</param>
        </member>
        <member name="M:MCART.Common.ContainsLetters(System.String,System.Nullable{System.Boolean})">
            <summary>
            Verifica si la cadena contiene letras.
            </summary>
            <returns>
            <c>true</c> si la cadena contiene letras: de lo contrario,
            <c>false</c>.
            </returns>
            <param name="s">Cadena a comprobar.</param>
            <param name="ucase">
            Opcional. Especifica el tipo de comprobación a realizar. Si es
            <c>true</c>, Se tomarán en cuenta únicamente los caracteres en
            mayúsculas, si es <c>false</c>, se tomarán en cuenta unicamente  los
            caracteres en minúsculas. Si se omite o se establece en <c>null</c>,
            se tomarán en cuenta ambos casos.</param>
        </member>
        <member name="M:MCART.Common.ContainsNumbers(System.String)">
            <summary>
            Comprueba si la cadena contiene números
            </summary>
            <returns>
            <c>true</c> si la cadena contiene números; de lo contrario,
            <c>false</c>.
            </returns>
            <param name="s">Cadena a comprobar.</param>
        </member>
        <member name="M:MCART.Common.ToHex(System.Byte)">
            <summary>
            Convierte un <see cref="T:System.Byte"/> en su representación hexadecimal.
            </summary>
            <returns>
            La representación hexadecimal de <paramref name="b"/>.
            </returns>
            <param name="b">El <see cref="T:System.Byte"/> a convertir.</param>
        </member>
        <member name="T:System.Windows.Converters.BooleanConverter`1">
            <summary>
            Clase base para crear convertidores de valores booleanos
            </summary>
            <typeparam name="T">
            Tipo de valores a convertir. Deben ser estructuras o enumeraciones.
            </typeparam>
        </member>
        <member name="M:System.Windows.Converters.BooleanConverter`1.#ctor(`0,`0)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.BooleanConverter`1"/>, configurando los valores que
            corresponderán a <c>true</c> y <c>false</c>.
            </summary>
            <param name="TrueValue">Valor equivalente a <c>true</c>.</param>
            <param name="FalseValue">Valor equivalente a <c>false</c>.</param>
        </member>
        <member name="P:System.Windows.Converters.BooleanConverter`1.True">
            <summary>
            Obtiene o establece el valor que equivale a <c>true</c> en este
            <see cref="T:System.Windows.Converters.BooleanConverter`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Converters.BooleanConverter`1.False">
            <summary>
            Obtiene o establece el valor que equivale a <c>false</c> en este
            <see cref="T:System.Windows.Converters.BooleanConverter`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.BooleanConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Boolean"/> a un objeto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="P:System.Windows.Converters.BooleanConverter`1.True"/>, si el objeto es de tipo <see cref="T:System.Boolean"/> y su
            valor es <c>true</c>; en caso contrario, se devuelve 
            <see cref="P:System.Windows.Converters.BooleanConverter`1.False"/>.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.BooleanConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un objeto en un <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>true</c> si el objeto es igual a <see cref="P:System.Windows.Converters.BooleanConverter`1.True"/>; 
            <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.BoolFlagConverter`1">
            <summary>
            Clase base para crear convertidores de valores booleanos que analizan
            banderas de una enumeración.
            </summary>
            <typeparam name="T">
            Tipo de valores a convertir. Deben ser enumeraciones.
            </typeparam>
        </member>
        <member name="M:System.Windows.Converters.BoolFlagConverter`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.BoolFlagConverter`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Se produce si el tipo especificado al instanciar esta clase no es
            una enumeración.
            </exception>
        </member>
        <member name="M:System.Windows.Converters.BoolFlagConverter`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.BoolFlagConverter`1"/>, configurando el valor que
            corresponderá a <c>true</c>.
            </summary>
            <param name="TrueValue">Valor equivalente a <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            Se produce si el tipo especificado al instanciar esta clase no es
            una enumeración.
            </exception>
        </member>
        <member name="P:System.Windows.Converters.BoolFlagConverter`1.True">
            <summary>
            Obtiene o establece el valor que equivale a <c>true</c> en este
            <see cref="T:System.Windows.Converters.BoolFlagConverter`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.BoolFlagConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Si no se ha establecido un valor para <see cref="P:System.Windows.Converters.BoolFlagConverter`1.True"/>, se
            devolverá <c>true</c> si hay alguna bandera activa, o <c>false</c> 
            en caso contrario. Si se estableció un valor para 
            <see cref="P:System.Windows.Converters.BoolFlagConverter`1.True"/>, se devolverá <c>True</c> solo si dicha(s) 
            bandera(s) se encuentra(n) activa(s), <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.BoolFlagConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Boolean"/> al tipo establecido para este
            <see cref="T:System.Windows.Converters.BoolFlagConverter`1"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Si <paramref name="value"/> es <c>true</c>, se devuelve la(s) 
            bandera(s) a ser detectada(s), en caso de haberse establecido un 
            valor para <see cref="P:System.Windows.Converters.BoolFlagConverter`1.True"/>, o en caso contrario, se devolverá
            <c>default(T)</c>.</returns>
        </member>
        <member name="T:System.Windows.Converters.NullBoolConverter`1">
            <summary>
            Clase base para crear convertidores de valores booleanos que pueden ser
            <c>null</c>.
            </summary>
            <typeparam name="T">Tipo de valores a convertir.</typeparam>
        </member>
        <member name="M:System.Windows.Converters.NullBoolConverter`1.#ctor(`0,`0)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.NullBoolConverter`1"/>, configurando los valores que
            corresponderán a <c>true</c> y <c>false</c>.
            </summary>
            <param name="TrueValue">Valor equivalente a <c>true</c>.</param>
            <param name="FalseValue">Valor equivalente a <c>false</c>.</param>
        </member>
        <member name="M:System.Windows.Converters.NullBoolConverter`1.#ctor(`0,`0,`0)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.NullBoolConverter`1"/>, configurando los valores que
            corresponderán a <c>true</c> y <c>false</c>.
            </summary>
            <param name="TrueValue">Valor equivalente a <c>true</c>.</param>
            <param name="FalseValue">Valor equivalente a <c>false</c>.</param>
            <param name="NullValue">Valor equivalente a <c>null</c>.</param>
        </member>
        <member name="P:System.Windows.Converters.NullBoolConverter`1.True">
            <summary>
            Obtiene o establece el valor que equivale a <c>true</c> en este
            <see cref="T:System.Windows.Converters.NullBoolConverter`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Converters.NullBoolConverter`1.False">
            <summary>
            Obtiene o establece el valor que equivale a <c>false</c> en este
            <see cref="T:System.Windows.Converters.NullBoolConverter`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Converters.NullBoolConverter`1.Null">
            <summary>
            Obtiene o establece el valor que equivale a <c>null</c> en este
            <see cref="T:System.Windows.Converters.NullBoolConverter`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.NullBoolConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="P:System.Windows.Converters.NullBoolConverter`1.True"/> si <paramref name="value"/> es <c>true</c>,
            <see cref="P:System.Windows.Converters.NullBoolConverter`1.False"/> si <paramref name="value"/> es <c>false</c>,
            <see cref="P:System.Windows.Converters.NullBoolConverter`1.Null"/> si <paramref name="value"/> es <c>null</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.NullBoolConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Boolean"/> al tipo establecido para este
            <see cref="T:System.Windows.Converters.BooleanConverter`1"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>true</c> si <paramref name="value"/> es <see cref="P:System.Windows.Converters.NullBoolConverter`1.True"/>,
            <c>false</c> si <paramref name="value"/> es <see cref="P:System.Windows.Converters.NullBoolConverter`1.False"/>,
            <c>null</c> si <paramref name="value"/> es <see cref="P:System.Windows.Converters.NullBoolConverter`1.Null"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.BooleanToInvVisibilityConverter">
            <summary>
            Inverso de <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/> 
            </summary>
        </member>
        <member name="M:System.Windows.Converters.BooleanToInvVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.BooleanToInvVisibilityConverter"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Converters.ToStringConverter">
            <summary>
            Convierte un valor a su representación como un <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.ToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte cualquier objeto en un <see cref="T:System.String"/>
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un <see cref="T:System.String"/> que representa al objeto.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.ToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Intenta una conversión de <see cref="T:System.String"/> a un objeto del tipo
            de destino especificado.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Si la conversión desde <see cref="T:System.String"/> tuvo éxito, se 
            devolverá al objeto, se devolverá <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.AddConverter`1">
            <summary>
            Permite la adición de propiedades numéricas
            </summary>
            <typeparam name="T">
            Tipo de valores. Puede ser cualquier tipo de valor numérico.
            </typeparam>
        </member>
        <member name="F:System.Windows.Converters.AddConverter`1.Operand">
            <summary>
            Operando de suma de este <see cref="T:System.Windows.Converters.AddConverter`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.AddConverter`1.#ctor(`0)">
            <summary>
            .Clear()Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.AddConverter`1"/>.
            </summary>
            <param name="Operand">
            Operando a sumar a los valores procesados por este
            <see cref="T:System.Windows.Converters.AddConverter`1"/>.
            </param>
        </member>
        <member name="M:System.Windows.Converters.AddConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Devuelve la suma entre <see cref="F:System.Windows.Converters.AddConverter`1.Operand"/> y 
            <paramref name="value"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>La suma de <paramref name="value"/> y el operando especificado.</returns>
        </member>
        <member name="M:System.Windows.Converters.AddConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Revierte la operación de suma aplicada a <paramref name="value"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            El valor de <paramref name="value"/> antes de la suma.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.MultiplyConverter`1">
            <summary>
            Permite la multiplicación de propiedades numéricas
            </summary>
            <typeparam name="T">
            Tipo de valores. Puede ser cualquier tipo de valor numérico.
            </typeparam>
        </member>
        <member name="F:System.Windows.Converters.MultiplyConverter`1.Operand">
            <summary>
            Operando de multiplicación de este 
            <see cref="T:System.Windows.Converters.MultiplyConverter`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.MultiplyConverter`1.#ctor(`0)">
            <summary>
            .Clear()Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.MultiplyConverter`1"/>.
            </summary>
            <param name="Operand">
            Operando a utilizar para multiplicar los valores procesados por
            este <see cref="T:System.Windows.Converters.MultiplyConverter`1"/>.
            </param>
        </member>
        <member name="M:System.Windows.Converters.MultiplyConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Devuelve la multiplicación entre <see cref="F:System.Windows.Converters.MultiplyConverter`1.Operand"/> y
            <paramref name="value"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>La suma de <paramref name="value"/> y el operando especificado.</returns>
        </member>
        <member name="M:System.Windows.Converters.MultiplyConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Revierte la operación de multiplicación aplicada a
            <paramref name="value"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            El valor de <paramref name="value"/> antes de la multiplicación.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.CountVisibilityConverter">
            <summary>
            Convierte un valor <see cref="T:System.Int32"/>  a <see cref="T:System.Windows.Visibility"/> 
            </summary>
        </member>
        <member name="F:System.Windows.Converters.CountVisibilityConverter.WithItems">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver en caso
            de que la cuenta de elementos sea mayor a cero.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.CountVisibilityConverter.WithoutItems">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver en caso
            de que la cuenta de elementos sea igual a cero.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.CountVisibilityConverter.#ctor(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.CountVisibilityConverter"/>.
            </summary>
            <param name="withItems">
            <see cref="T:System.Windows.Visibility"/> a utilizar en caso de que la cuenta sea 
            mayor a cero.
            </param>
            <param name="withoutItems">
            <see cref="T:System.Windows.Visibility"/> a utilizar en caso de que la cuenta sea 
            igual a cero.
            </param>
        </member>
        <member name="M:System.Windows.Converters.CountVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Obtiene un <see cref="T:System.Windows.Visibility"/> a partir de un valor de cuenta.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="F:System.Windows.Converters.CountVisibilityConverter.WithItems"/> si <paramref name="value"/> es mayor a
            cero, <see cref="F:System.Windows.Converters.CountVisibilityConverter.WithoutItems"/> en caso contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.CountVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Infiere una cuenta de elementos basado en el <see cref="T:System.Windows.Visibility"/> provisto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>1</c> si <paramref name="value"/> es igual a 
            <see cref="F:System.Windows.Converters.CountVisibilityConverter.WithItems"/>, <c>0</c> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.DoubleVisibilityConverter">
            <summary>
            Convierte un valor <see cref="T:System.Double"/> a <see cref="T:System.Windows.Visibility"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.DoubleVisibilityConverter.Positives">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el valor sea mayor a cero.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.DoubleVisibilityConverter.ZeroOrNegatives">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el valor sea menor o igual a cero.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.DoubleVisibilityConverter.#ctor(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.DoubleVisibilityConverter"/>.
            </summary>
            <param name="positives">
            <see cref="T:System.Windows.Visibility"/> a utilizar para valores positivos.
            </param>
            <param name="zeroOrNegatives">
            <see cref="T:System.Windows.Visibility"/> a utilizar para cero y valores negativos.
            </param>
        </member>
        <member name="M:System.Windows.Converters.DoubleVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Obtiene un <see cref="T:System.Windows.Visibility"/> a partir del valor.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="F:System.Windows.Converters.DoubleVisibilityConverter.Positives"/> si <paramref name="value"/> es mayor a
            cero, <see cref="F:System.Windows.Converters.DoubleVisibilityConverter.ZeroOrNegatives"/> en caso contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.DoubleVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Infiere un valor basado en el <see cref="T:System.Windows.Visibility"/> provisto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>1.0</c> si <paramref name="value"/> es igual a 
            <see cref="F:System.Windows.Converters.DoubleVisibilityConverter.Positives"/>, <c>0.0</c> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.FloatVisibilityConverter">
            <summary>
            Convierte un valor <see cref="T:System.Single"/> a <see cref="T:System.Windows.Visibility"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.FloatVisibilityConverter.Positives">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el valor sea mayor a cero.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.FloatVisibilityConverter.ZeroOrNegatives">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el valor sea menor o igual a cero.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.FloatVisibilityConverter.#ctor(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.FloatVisibilityConverter"/>.
            </summary>
            <param name="positives">
            <see cref="T:System.Windows.Visibility"/> a utilizar para valores positivos.
            </param>
            <param name="zeroOrNegatives">
            <see cref="T:System.Windows.Visibility"/> a utilizar para cero y valores negativos.
            </param>
        </member>
        <member name="M:System.Windows.Converters.FloatVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Obtiene un <see cref="T:System.Windows.Visibility"/> a partir del valor.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="F:System.Windows.Converters.FloatVisibilityConverter.Positives"/> si <paramref name="value"/> es mayor a
            cero, <see cref="F:System.Windows.Converters.FloatVisibilityConverter.ZeroOrNegatives"/> en caso contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.FloatVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Infiere un valor basado en el <see cref="T:System.Windows.Visibility"/> provisto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>1.0f</c> si <paramref name="value"/> es igual a 
            <see cref="F:System.Windows.Converters.FloatVisibilityConverter.Positives"/>, <c>0.0f</c> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.BrushOpacityAdjust">
            <summary>
            Permite compartir un recurso de <see cref="T:System.Windows.Media.Brush"/> entre controles,
            ajustando la opacidad del enlace de datos.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.BrushOpacityAdjust.Opacity">
            <summary>
            Obtiene o establece la opacidad a aplicar al <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.BrushOpacityAdjust.#ctor(System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.BrushOpacityAdjust"/>.
            </summary>
            <param name="opacity">
            Opacidad a aplicar al <see cref="T:System.Windows.Media.Brush"/>.
            </param>
        </member>
        <member name="M:System.Windows.Converters.BrushOpacityAdjust.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Aplica la nueva opacidad al <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un nuevo <see cref="T:System.Windows.Media.Brush"/> con la opacidad establecida en este
            <see cref="T:System.Windows.Converters.BrushOpacityAdjust"/>.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.BrushOpacityAdjust.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Devuelve un <see cref="T:System.Windows.Media.Brush"/> con 100% opacidad.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un nuevo <see cref="T:System.Windows.Media.Brush"/> con la opacidad al 100%.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.StringVisibilityConverter">
            <summary>
            Convierte un <see cref="T:System.String"/> a un <see cref="T:System.Windows.Visibility"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.StringVisibilityConverter.Empty">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el <see cref="T:System.String"/> esté vacío.
            </summary>
        </member>
        <member name="F:System.Windows.Converters.StringVisibilityConverter.NotEmpty">
            <summary>
            Obtiene o establece el <see cref="T:System.Windows.Visibility"/> a devolver cuando
            el <see cref="T:System.String"/> no esté vacío.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.StringVisibilityConverter.#ctor(System.Windows.Visibility,System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.StringVisibilityConverter"/>.
            </summary>
            <param name="empty">
            <see cref="T:System.Windows.Visibility"/> a devolver cuando la cadena esté vacía.
            </param>
            <param name="notEmpty">
            <see cref="T:System.Windows.Visibility"/> a devolver cuando la cadena no esté vacía.
            </param>
        </member>
        <member name="M:System.Windows.Converters.StringVisibilityConverter.#ctor(System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.StringVisibilityConverter"/>.
            </summary>
            <param name="inverted">
            Inversión de valores de <see cref="T:System.Windows.Visibility"/>.
            </param>
        </member>
        <member name="M:System.Windows.Converters.StringVisibilityConverter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:System.Windows.Converters.StringVisibilityConverter"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.StringVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Obtiene un <see cref="T:System.Windows.Visibility"/> a partir del valor.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <see cref="F:System.Windows.Converters.StringVisibilityConverter.Empty"/> si <paramref name="value"/> es una cadena
            vacía, <see cref="F:System.Windows.Converters.StringVisibilityConverter.NotEmpty"/> en caso contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.StringVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Infiere un valor basado en el <see cref="T:System.Windows.Visibility"/> provisto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>value.ToString()</c> si <paramref name="value"/> no es una
            cadena vacía, <see cref="F:System.String.Empty"/> en caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.NumberBoolConverter">
            <summary>
            Convierte directamente un número a <see cref="T:System.Boolean"/> 
            </summary>
        </member>
        <member name="M:System.Windows.Converters.NumberBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Int32"/> en un <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>true</c> si <paramref name="value"/> es distinto de cero,
            <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.NumberBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Infiere un valor <see cref="T:System.Int32"/>a partir de un <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            <c>-1</c> si <paramref name="value"/> es <c>true</c>, <c>0</c> en
            caso contrario.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.BooleanInverter">
            <summary>
            Invierte un valor booleano
            </summary>
        </member>
        <member name="M:System.Windows.Converters.BooleanInverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Invierte el valor de un <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>El inverso del valor.</returns>
        </member>
        <member name="M:System.Windows.Converters.BooleanInverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Invierte el valor de un <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>El inverso del valor.</returns>
        </member>
        <member name="T:System.Windows.Converters.DoubleMarginConverter">
            <summary>
            Convierte un <see cref="T:System.Double"/> en un <see cref="T:System.Windows.Thickness"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.DoubleMarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Double"/> en un <see cref="T:System.Windows.Thickness"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Función opcional de transformación de valor. Dene ser de tipo
            <see cref="T:System.Func`2"/> donde el tipo de argumento y el
            tipo devuelto sean ambos <see cref="T:System.Double"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un <see cref="T:System.Windows.Thickness"/> uniforme cuyos valores de grosor son
            iguales al valor especificado.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.DoubleMarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Revierte la conversión realizada por este objeto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Función opcional de transformación de valor.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un <see cref="T:System.Double"/> cuyo valor es el promedio del grosor
            establecido en el <see cref="T:System.Windows.Thickness"/> especificado.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.LabeledDoubleConverter">
            <summary>
            Convierte un <see cref="T:System.Double"/> en un <see cref="T:System.String"/>,
            opcionalmente mostrando una etiqueta si el valor es inferior a cero.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.LabeledDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un <see cref="T:System.Double"/> en un <see cref="T:System.String"/>,
            opcionalmente mostrando una etiqueta si el valor es inferior a cero.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Etiqueta a mostrar en caso que el valor sea inferior a cero.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un <see cref="T:System.Windows.Thickness"/> uniforme cuyos valores de grosor son
            iguales al valor especificado.
            </returns>
        </member>
        <member name="M:System.Windows.Converters.LabeledDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Revierte la conversión realizada por este objeto.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Función opcional de transformación de valor.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>
            Un <see cref="T:System.Double"/> cuyo valor es el promedio del grosor
            establecido en el <see cref="T:System.Windows.Thickness"/> especificado.
            </returns>
        </member>
        <member name="T:System.Windows.Converters.VisibilityInverter">
            <summary>
            Invierte los valores de <see cref="T:System.Windows.Visibility"/> 
            </summary>
        </member>
        <member name="F:System.Windows.Converters.VisibilityInverter.NotVisible">
            <summary>
            Obtiene o establece el valor a devolver cuando el valor no sea
            <see cref="F:System.Windows.Visibility.Visible"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Converters.VisibilityInverter.#ctor(System.Windows.Visibility)">
            <summary>
            Inicializa una nueva instancia de la clase 
            <see cref="T:System.Windows.Converters.VisibilityInverter"/>.
            </summary>
            <param name="notVisible">
            Opcional. Estado a devolver al invertir el valor de
            <see cref="F:System.Windows.Visibility.Visible"/>. Si se omite, se devolverá
            <see cref="F:System.Windows.Visibility.Collapsed"/>.
            </param>
        </member>
        <member name="M:System.Windows.Converters.VisibilityInverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Invierte el valor de un <see cref="T:System.Windows.Visibility"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>El inverso del valor.</returns>
        </member>
        <member name="M:System.Windows.Converters.VisibilityInverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Invierte el valor de un <see cref="T:System.Windows.Visibility"/>.
            </summary>
            <param name="value">Objeto a convertir.</param>
            <param name="targetType">Tipo del destino.</param>
            <param name="parameter">
            Parámetros personalizados para este <see cref="T:System.Windows.Data.IValueConverter"/>.
            </param>
            <param name="culture">
            <see cref="T:System.Globalization.CultureInfo"/> a utilizar para la conversión.</param>
            <returns>El inverso del valor.</returns>
        </member>
    </members>
</doc>
